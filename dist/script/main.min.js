/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		0: 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "chunks/" + ({"1":"AsyncApp","2":"AsyncRouter"}[chunkId]||chunkId) + "_" + "f7425797" + "_" + chunkId + ".min.js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 							error.name = 'ChunkLoadError';
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				document.head.appendChild(script);
/******/ 			}
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = this["webpackJsonp"] = this["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 32);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(34));
__export(__webpack_require__(10));
__export(__webpack_require__(35));
__export(__webpack_require__(36));
__export(__webpack_require__(37));
//# sourceMappingURL=index.js.map

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.defineReadonlyProperty = undefined;
exports.injectable = injectable;
exports.autowired = autowired;

__webpack_require__(21);

var _globalUtil = __webpack_require__(3);

var _createClassFactory = __webpack_require__(11);

// tslint:disable:variable-name
var defineReadonlyProperty = exports.defineReadonlyProperty = function defineReadonlyProperty(target, propertyKey, propertyValue) {
    Object.defineProperty(target, propertyKey, {
        configurable: false,
        enumerable: true,
        value: propertyValue,
        writable: false
    });
};
function injectable(className) {
    if (className === undefined || className === null || className.length <= 0) {
        throw new Error("Injectable注入对象必须设置类名。");
    }
    // tslint:disable-next-line:variable-name
    return function (_constructor) {
        var paramTypes = Reflect.getMetadata("design:paramtypes", _constructor);
        // 已注册
        // tslint:disable-next-line:curly
        (0, _globalUtil.addToClassPool)(className, _constructor, function () {
            if (paramTypes) {
                for (var _i = 0, paramTypes_1 = paramTypes; _i < paramTypes_1.length; _i++) {
                    var val = paramTypes_1[_i];
                    // tslint:disable-next-line:curly
                    if (val === _constructor) {
                        throw new Error("不能依赖自己");
                    } else if (elmerData.classPool.indexOf(val) === -1) {
                        throw new Error("\u7C7B\u3010" + className + "\u3011construct\u53C2\u6570" + val + "\u6CA1\u6709\u88AB\u6CE8\u518C");
                    }
                }
            }
        });
    };
}
/**
 * 注解初始化类，在全局生成唯一个对象
 * @param _constructor 初始化类
 * @param classPoolName 全局类唯一识别名称，当类没有使用Injectable时，通过此参数做注册
 */
function autowired(_constructor, className) {
    var argv = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        argv[_i - 2] = arguments[_i];
    }
    return function (target, propertyKey) {
        target[propertyKey] = (0, _createClassFactory.createClassFactory)(_constructor, {
            argv: argv,
            className: className
        });
    };
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getCurrentMissionId = exports.setWikiState = exports.getWikiState = exports.wikiState = undefined;

var _elmerCommon = __webpack_require__(0);

var wikiState = exports.wikiState = {};
var getWikiState = exports.getWikiState = function getWikiState(key) {
    var missionId = wikiState["missionId"];
    var missionObj = wikiState[missionId];
    return missionObj ? missionObj[key] : null;
};
var setWikiState = exports.setWikiState = function setWikiState(key, value) {
    var missionId = wikiState["missionId"];
    var missionObj = wikiState[missionId];
    if (!missionObj) {
        missionObj = {};
        wikiState[missionId] = missionObj;
    }
    _elmerCommon.StaticCommon.setValue(missionObj, key, value);
};
var getCurrentMissionId = exports.getCurrentMissionId = function getCurrentMissionId() {
    return wikiState["missionId"];
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var GLOBAL_STATE_KEY_FOR_ELMERUI = "__elmerUI__";
var globalVar = exports.globalVar = function globalVar() {
    if (!globalThis[GLOBAL_STATE_KEY_FOR_ELMERUI]) {
        globalThis[GLOBAL_STATE_KEY_FOR_ELMERUI] = {
            classPool: [],
            components: {},
            elmerState: {},
            objPool: {}
        };
    }
    return globalThis[GLOBAL_STATE_KEY_FOR_ELMERUI];
};
/**
 * 定义全局状态，通过此方法定义，防止被其他模块定义混乱而被覆盖掉
 * @param stateKey  stateKey
 * @param stateValue stateValue
 * @param ignoreError [boolean] if ignoreError === false then throw error
 */
var defineGlobalState = exports.defineGlobalState = function defineGlobalState(stateKey, stateValue, ignoreError) {
    var globalState = globalVar();
    if (stateKey !== undefined && stateKey !== null && stateKey.length > 0) {
        Object.defineProperty(globalState.elmerState, stateKey, {
            configurable: false,
            enumerable: true,
            value: stateValue,
            writable: false
        });
    } else {
        if (!ignoreError) {
            throw new Error("定义全局状态失败，stateKey不能为空！");
        }
    }
};
var setGlobalState = exports.setGlobalState = function setGlobalState(stateKey, stateValue, ignoreError) {
    defineGlobalState(stateKey, stateValue, ignoreError);
};
var getGlobalState = exports.getGlobalState = function getGlobalState(stateKey) {
    return globalVar().elmerState[stateKey];
};
/**
 * 定义全局变量，保存到window对象
 * @param varKey 变量名称
 * @param varValue 变量值
 */
var defineGlobalVar = exports.defineGlobalVar = function defineGlobalVar(varKey, varValue) {
    if (varKey !== undefined && varKey !== null && varKey.length > 0) {
        Object.defineProperty(globalThis, varKey, {
            configurable: false,
            enumerable: true,
            value: varValue,
            writable: false
        });
    } else {
        throw new Error("定义全局状态失败，stateKey不能为空！");
    }
};
var getGlobalVar = exports.getGlobalVar = function getGlobalVar(varkey) {
    return globalThis[varkey];
};
var addToClassPool = exports.addToClassPool = function addToClassPool(className, factory, fn) {
    if (factory) {
        var elmerData_1 = globalVar();
        var hasExists = false;
        factory.prototype.className = className;
        for (var _i = 0, _a = elmerData_1.classPool; _i < _a.length; _i++) {
            var tmpClass = _a[_i];
            if (tmpClass.prototype.className === className) {
                hasExists = true;
                break;
            }
        }
        if (!hasExists) {
            typeof fn === "function" && fn();
            elmerData_1.classPool.push(factory);
        }
    }
};
// tslint:disable 
var __extends = exports.__extends = function () {
    var ignorePropKeys = ["selector", "template", "model", "service", "i18n", "connect", "setData", "setState", "render"]; // 忽略属性是不需要继承的组件特殊属性
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p) && ignorePropKeys.indexOf(p) < 0) {
                d[p] = b[p];
            }
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
// tslint:enable

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hookUtils = __webpack_require__(2);

Object.keys(_hookUtils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _hookUtils[key];
    }
  });
});

var _useEffect = __webpack_require__(75);

Object.keys(_useEffect).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _useEffect[key];
    }
  });
});

var _useState = __webpack_require__(76);

Object.keys(_useState).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _useState[key];
    }
  });
});

var _useCallback = __webpack_require__(77);

Object.keys(_useCallback).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _useCallback[key];
    }
  });
});

var _useComponent = __webpack_require__(78);

Object.keys(_useComponent).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _useComponent[key];
    }
  });
});

var _getNode = __webpack_require__(79);

Object.keys(_getNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _getNode[key];
    }
  });
});

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Component = exports.CONST_CLASS_COMPONENT_FLAG = undefined;

var _elmerCommon = __webpack_require__(0);

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var CONST_CLASS_COMPONENT_FLAG = exports.CONST_CLASS_COMPONENT_FLAG = "COMPONENT_113df7d2-555c-53a1-30fb-58627fd7";
var Component = /** @class */function (_super) {
    __extends(Component, _super);
    function Component(props, context) {
        var _this = _super.call(this) || this;
        _this.props = props;
        _this.context = context;
        return _this;
    }
    /**
     * 更新数据，触发组件重新渲染(已废弃)
     * @deprecated
     * @param data 更新数据
     * @param argv 其他参数
     */
    Component.prototype.setData = function (data) {
        var argv = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            argv[_i - 1] = arguments[_i];
        }
        throw new Error("Method not implemented.");
    };
    /**
     * 更新数据，触发组件重新渲染，数据只更新到state属性
     * @param data 更新数据
     * @param argv 其他参数
     * @returns {Promise<any>}
     */
    Component.prototype.setState = function (data) {
        var argv = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            argv[_i - 1] = arguments[_i];
        }
        throw new Error("Method not implemented.");
    };
    Component.flag = CONST_CLASS_COMPONENT_FLAG;
    return Component;
}(_elmerCommon.Common);
exports.Component = Component;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var elmer_common_1 = __webpack_require__(0);
var ASyntax = /** @class */function (_super) {
    __extends(ASyntax, _super);
    function ASyntax() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ASyntax.prototype.readVarString = function (str) {
        var myText = str;
        var result = "";
        var hasVar = false;
        if (/^\s*"/.test(str)) {
            var char = String.fromCharCode(255);
            var nstr = str.replace(/\\"/g, char);
            var strM = nstr.match(/^"([\s\S\\"^"]*?)"/);
            if (strM) {
                var varStr = strM[1];
                var leftStr = str.substr(strM[0].length);
                result = varStr.split(char).join('\"');
                myText = leftStr.split(char).join('\"');
                hasVar = true;
            }
        } else if (/^\s*'/.test(str)) {
            var char = String.fromCharCode(255);
            var nstr = str.replace(/\\'/g, char);
            var strM = nstr.match(/^'([\s\S\\'^']*?)'/);
            if (strM) {
                var varStr = strM[1];
                var leftStr = str.substr(strM[0].length);
                result = varStr.split(char).join("\'");
                myText = leftStr.split(char).join("\'");
                hasVar = true;
            }
        }
        return {
            code: myText,
            hasVar: hasVar,
            var: result
        };
    };
    /**
     * 运行单行判断脚本
     * @param code 脚本代码
     * @param component 当前绑定组件用于读取指定数据
     * @param optionData 当前绑定过程读取可选数据
     */
    ASyntax.prototype.runLimitScript = function (code, component, optionData) {
        var _this = this;
        var orChar = String.fromCharCode(255); // 替换符号|| 符号
        var andChar = String.fromCharCode(254); // 替换 && 符号
        var xOrChar = String.fromCharCode(253); // 替换 | 符号
        var xAndChar = String.fromCharCode(252); // 替换 & 符号
        var varCode = (code || "").replace(/^\s*/, "").replace(/\s*$/, "").replace(/\|\|/g, orChar).replace(/\&\&/g, andChar).replace(/\|/, xOrChar).replace(/\&/, xAndChar);
        var varArr = varCode.split(/[+\-\*\/%\?\:]/);
        var varArrSplitArr = varCode.match(/([+\-\*\/%\?\:])/g);
        var logicChars = {
            eq: "==",
            gt: ">",
            gteq: ">=",
            lt: "<",
            lteq: "<=",
            neq: "!=",
            seq: "===",
            sneq: "!=="
        };
        var missionId = this.guid();
        var logicVar = {};
        var logicCodeArr = [];
        var index = 0;
        var mIndex = 0;
        var varBindFunc = function varBindFunc(xcode) {
            var varKey = missionId + "_" + index;
            var tmpCode = xcode.split(orChar).join("||").split(andChar).join("&&").split(xOrChar).join("|").split(xAndChar).join("&");
            if (tmpCode === "||" || tmpCode === "&&" || tmpCode === "|" || tmpCode === "&") {
                logicCodeArr.push(tmpCode);
            } else {
                if (/^"/.test(tmpCode) && /"$/.test(tmpCode)) {
                    logicVar[varKey] = tmpCode.replace(/^"/, "").replace(/"$/, "");
                    logicCodeArr.push("obj[\"" + varKey + "\"]");
                } else if (/^'/.test(tmpCode) && /'$/.test(tmpCode)) {
                    logicVar[varKey] = tmpCode.replace(/^'/, "").replace(/'$/, "");
                    logicCodeArr.push("obj[\"" + varKey + "\"]");
                } else if (logicChars[tmpCode]) {
                    logicCodeArr.push(logicChars[tmpCode]);
                } else if (/true/i.test(tmpCode) || /false/i.test(tmpCode)) {
                    logicCodeArr.push(tmpCode);
                } else if (/^[0-9]{1,}$/.test(tmpCode)) {
                    logicCodeArr.push(parseInt(tmpCode, 10));
                } else if (/^[0-9]{1,}\.[0-9]{1,}$/.test(tmpCode)) {
                    logicCodeArr.push(parseFloat(tmpCode));
                } else {
                    if (tmpCode !== " ") {
                        var optionValue = optionData ? _this.getValue(optionData, tmpCode) : undefined;
                        logicVar[varKey] = undefined === optionValue ? _this.getValue(component, tmpCode) : optionValue;
                        logicCodeArr.push("obj[\"" + varKey + "\"]");
                    }
                }
            }
            index += 1;
        };
        varArr.map(function (xcode) {
            var tmpCode = xcode.replace(/^\s{1,}/, "").replace(/\s{1,}$/, "");
            var tmpSplitArr = tmpCode.split(" ");
            if (tmpSplitArr && tmpSplitArr.length > 1) {
                tmpSplitArr.map(function (itemCode) {
                    varBindFunc(itemCode);
                });
            } else {
                varBindFunc(tmpCode);
            }
            if (varArrSplitArr && !_this.isEmpty(varArrSplitArr[mIndex]) && varArrSplitArr[mIndex] !== " ") {
                logicCodeArr.push(varArrSplitArr[mIndex]); // 将分割语句字符还原回去
            }
            mIndex += 1;
        });
        var runCode = logicCodeArr.join(" ");
        var runFunc = new Function("obj", "return " + runCode + ";");
        return runFunc(logicVar);
    };
    return ASyntax;
}(elmer_common_1.Common);
exports.ASyntax = ASyntax;
//# sourceMappingURL=ASyntax.js.map

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.autoInit = exports.injectable = exports.autowired = undefined;

var _createClassFactory = __webpack_require__(11);

var _injectable = __webpack_require__(1);

var autowired = exports.autowired = _injectable.autowired;
/**
 * Injectable 命名不规范，将要弃用
 * Duplicate todo
 */
var injectable = exports.injectable = _injectable.injectable;
// export const globalClassFactory = GlobalClassFactory;
var autoInit = exports.autoInit = _createClassFactory.autoInit;
exports.default = {
  title: "Injectable",
  version: "1.0.1"
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(63));
__export(__webpack_require__(12));
__export(__webpack_require__(64));
__export(__webpack_require__(65));
__export(__webpack_require__(66));
//# sourceMappingURL=index.js.map

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.REDUX_REDUCER_DEFINE_STATE_KEY = "ReduxReducerDefined";
exports.REDUX_GLOBAL_STATE_KEY = "ReduxStateData";
exports.REDUX_GLOBAL_LISTEN_KEY = "ReduxStateListener";

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var StaticCommon = /** @class */function () {
    function StaticCommon() {}
    StaticCommon.getType = function (val) {
        return Object.prototype.toString.call(val);
    };
    StaticCommon.isString = function (val) {
        return StaticCommon.getType(val) === "[object String]";
    };
    StaticCommon.isObject = function (val) {
        return StaticCommon.getType(val) === "[object Object]";
    };
    StaticCommon.isArray = function (val) {
        return StaticCommon.getType(val) === "[object Array]";
    };
    StaticCommon.isNumeric = function (val) {
        return !isNaN(val);
    };
    StaticCommon.isDOM = function (val) {
        return (/^(\[object\s*)HTML([a-zA-Z]*)(Element\])$/.test(StaticCommon.getType(val))
        );
    };
    StaticCommon.isSVGDOM = function (val) {
        return (/^\[object\sSVG([a-zA-Z]*)Element\]$/.test(StaticCommon.getType(val))
        );
    };
    StaticCommon.isFunction = function (val) {
        return StaticCommon.getType(val) === "[object Function]";
    };
    StaticCommon.isNodeList = function (val) {
        return StaticCommon.getType(val) === "[object NodeList]";
    };
    StaticCommon.isRegExp = function (val) {
        return StaticCommon.getType(val) === "[object RegExp]";
    };
    StaticCommon.isEmpty = function (val) {
        return val === undefined || val === null || StaticCommon.isString(val) && val.length <= 0;
    };
    StaticCommon.isPromise = function (val) {
        return StaticCommon.getType(val) === "[object Promise]";
    };
    StaticCommon.isGlobalObj = function (val) {
        return this.getType(val) === "[object global]";
    };
    // tslint:disable-next-line:no-shadowed-variable
    StaticCommon.isEqual = function (a, b) {
        if (a === b) {
            return a !== 0 || 1 / a === 1 / b;
        }
        if (a == null || b == null) {
            return a === b;
        }
        var classNameA = StaticCommon.getType(a),
            classNameB = StaticCommon.getType(b);
        if (classNameA !== classNameB) {
            return false;
        } else {
            switch (classNameA) {
                case "[object RegExp]":
                case "[object String]":
                    return "" + a === "" + b;
                case "[object Number]":
                    if (+a !== +a) {
                        return +b !== +b;
                    }
                    return +a === 0 ? 1 / +a === 1 / b : +a === +b;
                case "[object Date]":
                case "[object Boolean]":
                    return +a === +b;
            }
            if (classNameA === "[object Object]") {
                var propsA = Object.getOwnPropertyNames(a),
                    propsB = Object.getOwnPropertyNames(b);
                if (propsA.length !== propsB.length) {
                    return false;
                } else {
                    for (var i = 0; i < propsA.length; i++) {
                        var propName = propsA[i];
                        if (a[propName] !== b[propName]) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            if (classNameA === "[object Array]") {
                return a.toString() === b.toString();
            }
        }
    };
    StaticCommon.sleepCall = function (fn, timeout, obj) {
        if (typeof fn === "function") {
            // let handler: number | null | undefined = null;
            var tim = timeout || 200;
            var sleep = function sleep() {
                if (obj) {
                    fn.call(obj);
                } else {
                    fn();
                }
                // handler !== null && clearTimeout(handler);
            };
            setTimeout(sleep, tim);
        }
    };
    StaticCommon.getValue = function (data, key, defaultValue) {
        var keyValue = key !== undefined && key !== null ? key : "";
        if (/\./.test(keyValue)) {
            var keyArr = keyValue.split(".");
            var isFind = false;
            var index = 0;
            var keyStr = "";
            var tmpData = data;
            while (index <= keyArr.length - 1) {
                keyStr = keyArr[index];
                isFind = index === keyArr.length - 1;
                if (StaticCommon.isArray(tmpData) && StaticCommon.isNumeric(keyStr)) {
                    keyStr = parseInt(keyStr, 10);
                }
                if (!isFind) {
                    var nextKey = keyArr[keyArr.length - 1];
                    if (StaticCommon.isArray(tmpData) || StaticCommon.isObject(tmpData) || StaticCommon.isGlobalObj(tmpData)) {
                        //
                        tmpData = tmpData[keyStr];
                    }
                    if (tmpData && index === keyArr.length - 2) {
                        if (nextKey === "key") {
                            tmpData = tmpData.key;
                            isFind = true;
                        } else if (nextKey === "length") {
                            tmpData = tmpData.length;
                            isFind = true;
                        }
                    }
                } else {
                    tmpData = tmpData ? tmpData[keyStr] : undefined;
                }
                if (isFind) {
                    break;
                }
                index++;
            }
            return isFind ? undefined !== tmpData ? tmpData : defaultValue : defaultValue;
        } else {
            var rResult = data ? data[keyValue] : undefined;
            return data ? undefined !== rResult ? rResult : defaultValue : defaultValue;
        }
    };
    /**
     * 给指定对象设置属性值
     * @param data 设置属性值对象
     * @param key 设置属性key,属性key有多层可使用.区分
     * @param value 设置属性值
     * @param fn 自定义设置值回调
     */
    StaticCommon.setValue = function (data, key, value, fn) {
        var isUpdate = false;
        if (!StaticCommon.isObject(data)) {
            throw new Error("The parameter of data is not a object");
        }
        if (StaticCommon.isEmpty(key)) {
            throw new Error("The key can not be an empty string");
        }
        if (!StaticCommon.isEmpty(value)) {
            var keyArr = key.split(".");
            var keyLen = keyArr.length;
            var index = 0;
            var tmpData = data;
            while (index < keyLen) {
                var cKey = keyArr[index];
                if (index < keyLen - 1) {
                    // 不是最后一个节点
                    if (!StaticCommon.isEmpty(tmpData[cKey])) {
                        if (StaticCommon.isObject(tmpData[cKey])) {
                            tmpData = tmpData[cKey];
                        } else {
                            throw new Error("Can not set value to attribute of " + cKey);
                        }
                    } else {
                        tmpData[cKey] = {};
                        tmpData = tmpData[cKey];
                    }
                } else {
                    // 要更新数据的节点
                    if (typeof fn === "function") {
                        fn(tmpData, cKey, value);
                    } else {
                        tmpData[cKey] = value;
                    }
                    isUpdate = true;
                }
                index++;
            }
        }
        return isUpdate;
    };
    /**
     * 获取随机ID
     */
    StaticCommon.getRandomID = function () {
        var now = new Date();
        var year = now.getFullYear().toString(),
            month = now.getMonth() + 1 < 10 ? "0" + (now.getMonth() + 1).toString() : (now.getMonth() + 1).toString(),
            date = now.getDate() < 10 ? "0" + now.getDate().toString() : now.getDate().toString(),
            hour = now.getHours() < 10 ? ["0", now.getHours()].join("") : now.getHours().toString(),
            minute = now.getMinutes() < 10 ? ["0", now.getMinutes()].join("") : now.getMinutes().toString(),
            second = now.getSeconds() < 10 ? ["0", now.getSeconds()].join("") : now.getSeconds().toString(),
            reSecond = now.getMilliseconds();
        var randValue = parseInt((Math.random() * 9999 + 1000).toString(), 10);
        return [year, month, date, hour, minute, second, reSecond, randValue].join("");
    };
    /**
     * 字符串有连接符-将自动转换成已首字母大写
     * @param val 转换文本
     * @param firstUpperCase 是否大写
     */
    StaticCommon.toHumpStr = function (val, firstUpperCase) {
        if (!this.isEmpty(val)) {
            var vStr = val.replace(/(^\-)|(\-$)/, "");
            var vArr = vStr.split("-");
            for (var i = 0; i < vArr.length; i++) {
                if (i === 0 && firstUpperCase || i > 0) {
                    vArr[i] = vArr[i].substr(0, 1).toUpperCase() + vArr[i].substr(1);
                }
            }
            return vArr.join("");
        } else {
            return val;
        }
    };
    StaticCommon.humpToStr = function (val) {
        if (!this.isEmpty(val)) {
            var vStr = val.substr(0, 1).toLowerCase() + val.substr(1);
            var rStr = vStr.replace(/([A-Z])/g, function ($1) {
                return "-" + $1.toLowerCase();
            });
            return rStr;
        }
        return val;
    };
    StaticCommon.extend = function (desc, src, setReadOnly, ignoreKeys) {
        if (!setReadOnly) {
            if (this.isObject(desc) && this.isObject(src)) {
                if (Object.assign) {
                    Object.assign(desc, src);
                } else {
                    // tslint:disable-next-line:forin
                    for (var key in src) {
                        if (!ignoreKeys || ignoreKeys.indexOf(key) < 0) {
                            desc[key] = src[key];
                        }
                    }
                }
            }
        } else {
            if (this.isObject(desc) && this.isObject(src)) {
                // tslint:disable-next-line:forin
                for (var key in src) {
                    if (!ignoreKeys || ignoreKeys.indexOf(key) < 0) {
                        // 已经存在的属性需要使用delete删除，防止redine error问题
                        if (desc.hasOwnProperty(key)) {
                            delete desc[key];
                        }
                        this.defineReadOnlyProperty(desc, key, src[key]);
                    }
                }
            }
        }
        return desc;
    };
    StaticCommon.merge = function (obj1, obj2) {
        var result = {};
        if (obj1 && !obj2) {
            result = obj1;
        } else if (!obj1 && obj2) {
            result = obj2;
        } else if (obj1 && obj2) {
            if (this.isObject(obj1)) {
                // tslint:disable-next-line:forin
                for (var key in obj1) {
                    result[key] = obj1[key];
                }
            }
            if (this.isObject(obj2)) {
                for (var sKey in obj2) {
                    if (!result.hasOwnProperty(sKey)) {
                        result[sKey] = obj2[sKey];
                    }
                }
            }
        }
        return result;
    };
    /**
     * 将字符串转转换成对应的数据类型，遇到true|false转换成bool类型，遇到数字文本转换成数字类型数据
     * @param data 要转换的数据
     */
    StaticCommon.val = function (data) {
        if (this.isString(data)) {
            if (!isNaN(data)) {
                return data.indexOf(".") >= 0 ? parseFloat(data) : parseInt(data, 10);
            } else {
                return (/^(true|false)$/.test(data) ? Boolean(data) : data
                );
            }
        } else {
            return data;
        }
    };
    StaticCommon.defineReadOnlyProperty = function (obj, propertyKey, propertyValue) {
        (function (paramObj, paramPropertyKey, paramPropertyValue) {
            paramObj && Object.defineProperty(paramObj, paramPropertyKey, {
                configurable: true,
                enumerable: true,
                value: paramPropertyValue,
                writable: false
            });
        })(obj, propertyKey, propertyValue);
    };
    StaticCommon.launchFullscreen = function (element) {
        if (element.requestFullscreen) {
            // tslint:disable-next-line: no-floating-promises
            element.requestFullscreen();
        } else if (element["mozRequestFullScreen"]) {
            element["mozRequestFullScreen"]();
        } else if (element["webkitRequestFullscreen"]) {
            element["webkitRequestFullscreen"]();
        } else if (element["msRequestFullscreen"]) {
            element["msRequestFullscreen"]();
        }
    };
    StaticCommon.exitFullscreen = function () {
        if (document.exitFullscreen) {
            // tslint:disable-next-line: no-floating-promises
            document.exitFullscreen();
        } else if (document["mozCancelFullScreen"]) {
            document["mozCancelFullScreen"]();
        } else if (document["webkitExitFullscreen"]) {
            document["webkitExitFullscreen"]();
        }
    };
    StaticCommon.isFullScreen = function () {
        return document["isFullScreen"] || document["mozIsFullScreen"] || document["webkitIsFullScreen"];
    };
    StaticCommon.guid = function () {
        var S4 = function S4() {
            // tslint:disable-next-line: no-bitwise
            return ((1 + Math.random()) * 0x10000 | 0).toString(16).substr(1);
        };
        return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4();
    };
    StaticCommon.getUri = function (queryString) {
        var str = !StaticCommon.isEmpty(queryString) ? queryString : location.search || "";
        var strArr = [];
        var result = {};
        str = str.replace(/^\?/, "").replace(/\#[\s\S]*$/, "");
        strArr = str.split("&");
        // tslint:disable-next-line: forin
        for (var key in strArr) {
            var tmpItem = strArr[key] || "";
            var tmpM = tmpItem.match(/^\s*([\S]*)\s*=\s*([\S]*)$/);
            if (tmpM) {
                result[tmpM[1]] = tmpM[2];
            }
        }
        return result;
    };
    StaticCommon.getQuery = function (key, queryString) {
        return StaticCommon.getUri(queryString)[key];
    };
    /**
     * 获取字符串字节长度
     * @param {string|number} val 输入字符串
     */
    StaticCommon.strLen = function (val) {
        var str = val.toString();
        var len = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c > 255) {
                len += 2;
            } else {
                len += 1;
            }
        }
        return len;
    };
    return StaticCommon;
}();
exports.StaticCommon = StaticCommon;
exports.defineReadonlyProperty = function (target, propertyKey, propertyValue) {
    Object.defineProperty(target, propertyKey, {
        configurable: false,
        enumerable: true,
        value: propertyValue,
        writable: false
    });
};
exports.getEnvFromCommand = function (commandList) {
    var env = "Prod";
    if (commandList && commandList.length > 0) {
        for (var i = 0; i < commandList.length; i++) {
            var tmpCommand = commandList[i];
            var tmpMatch = tmpCommand.match(/^\-\-env\=([a-z0-9]{1,})$/i);
            if (tmpMatch) {
                env = tmpMatch[1];
            } else {
                var lMatch = tmpCommand.match(/^\-env\=([a-z0-9]{1,})$/i);
                if (lMatch) {
                    env = lMatch[1];
                }
            }
        }
    }
    return env;
};
exports.getCommand = function (command, cmdKey) {
    var result;
    var findKey = false;
    var findValue = false;
    var keyReg = /^[\-]{1,}/;
    var keyValueReg = /^([a-z0-9]{1,})\=/i;
    var isCmdKey = /^[\-]{1,}/.test(cmdKey);
    if (command && command.length > 0) {
        for (var i = 0; i < command.length; i++) {
            var cmd = command[i];
            if (isCmdKey) {
                if (cmd === cmdKey) {
                    if (!keyReg.test(command[i + 1])) {
                        result = command[i + 1] === undefined ? null : command[i + 1];
                        findValue = i + 1 < command.length;
                        break;
                    }
                }
            } else {
                if (!keyReg.test(cmd)) {
                    var keyMatchValue = cmd.match(keyValueReg);
                    if (keyMatchValue && keyMatchValue[1] === cmdKey) {
                        result = cmd.replace(keyValueReg, "");
                        findValue = true;
                        break;
                    } else {
                        if (cmd === cmdKey && !keyReg.test(command[i - 1])) {
                            findKey = true;
                        }
                    }
                }
            }
        }
    }
    return findValue ? result : findKey ? true : result;
};
//# sourceMappingURL=StaticCommon.js.map

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.autoInit = undefined;
exports.createClassFactory = createClassFactory;

var _elmerCommon = __webpack_require__(0);

__webpack_require__(21);

var _globalUtil = __webpack_require__(3);

var __spreadArrays = undefined && undefined.__spreadArrays || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
        s += arguments[i].length;
    }for (var r = Array(s), k = 0, i = 0; i < il; i++) {
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
            r[k] = a[j];
        }
    }return r;
};

// 实例化工厂
// tslint:disable-next-line:variable-name
function createClassFactory(_constructor, options) {
    var elmerData = (0, _globalUtil.globalVar)();
    var className = _constructor.prototype.className || _constructor.className;
    var paramTypes = Reflect.getMetadata("design:paramtypes", _constructor);
    var argv = [];
    var classPoolName;
    if (_elmerCommon.StaticCommon.isEmpty(className)) {
        if (!_elmerCommon.StaticCommon.isEmpty(options)) {
            if (_elmerCommon.StaticCommon.isString(options)) {
                className = options;
                classPoolName = options;
            } else {
                className = options.className;
                classPoolName = options.className;
            }
        }
    }
    if (!_elmerCommon.StaticCommon.isEmpty(options) && _elmerCommon.StaticCommon.isObject(options)) {
        argv = options.argv || [];
    }
    if (!_elmerCommon.StaticCommon.isEmpty(classPoolName)) {
        if (!elmerData.classPool[classPoolName]) {
            elmerData.classPool[classPoolName] = _constructor;
        }
    }
    if (_elmerCommon.StaticCommon.isEmpty(className)) {
        className = _constructor["className"];
    }
    if (!elmerData.objPool[className]) {
        // 参数实例化
        var paramInstance = Object.prototype.toString.call(paramTypes) === "[object Array]" ? paramTypes.map(function (val) {
            // 依赖的类必须全部进行注册
            if (elmerData.classPool.indexOf(val) === -1) {
                throw new Error(val + "\u6CA1\u6709\u88AB\u6CE8\u518C[" + className + "]");
            } else {
                return createClassFactory(val);
            }
        }) : [];
        var obj = new (_constructor.bind.apply(_constructor, __spreadArrays([void 0], paramInstance, argv)))();
        elmerData.objPool[className] = obj;
        return obj;
    } else {
        return elmerData.objPool[className];
    }
}
var autoInit = exports.autoInit = createClassFactory;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var StaticCommon = /** @class */function () {
    function StaticCommon() {}
    StaticCommon.getType = function (val) {
        return Object.prototype.toString.call(val);
    };
    StaticCommon.isString = function (val) {
        return StaticCommon.getType(val) === "[object String]";
    };
    StaticCommon.isObject = function (val) {
        return StaticCommon.getType(val) === "[object Object]";
    };
    StaticCommon.isArray = function (val) {
        return StaticCommon.getType(val) === "[object Array]";
    };
    StaticCommon.isNumeric = function (val) {
        return !isNaN(val);
    };
    StaticCommon.isDOM = function (val) {
        return (/^(\[object\s*)HTML([a-zA-Z]*)(Element\])$/.test(StaticCommon.getType(val))
        );
    };
    StaticCommon.isSVGDOM = function (val) {
        return (/^\[object\sSVG([a-zA-Z]*)Element\]$/.test(StaticCommon.getType(val))
        );
    };
    StaticCommon.isFunction = function (val) {
        return StaticCommon.getType(val) === "[object Function]";
    };
    StaticCommon.isNodeList = function (val) {
        return StaticCommon.getType(val) === "[object NodeList]";
    };
    StaticCommon.isRegExp = function (val) {
        return StaticCommon.getType(val) === "[object RegExp]";
    };
    StaticCommon.isEmpty = function (val) {
        return val === undefined || val === null || StaticCommon.isString(val) && val.length <= 0;
    };
    StaticCommon.isPromise = function (val) {
        return StaticCommon.getType(val) === "[object Promise]";
    };
    StaticCommon.isGlobalObj = function (val) {
        return this.getType(val) === "[object global]";
    };
    // tslint:disable-next-line:no-shadowed-variable
    StaticCommon.isEqual = function (a, b) {
        if (a === b) {
            return a !== 0 || 1 / a === 1 / b;
        }
        if (a == null || b == null) {
            return a === b;
        }
        var classNameA = StaticCommon.getType(a),
            classNameB = StaticCommon.getType(b);
        if (classNameA !== classNameB) {
            return false;
        } else {
            switch (classNameA) {
                case "[object RegExp]":
                case "[object String]":
                    return "" + a === "" + b;
                case "[object Number]":
                    if (+a !== +a) {
                        return +b !== +b;
                    }
                    return +a === 0 ? 1 / +a === 1 / b : +a === +b;
                case "[object Date]":
                case "[object Boolean]":
                    return +a === +b;
            }
            if (classNameA === "[object Object]") {
                var propsA = Object.getOwnPropertyNames(a),
                    propsB = Object.getOwnPropertyNames(b);
                if (propsA.length !== propsB.length) {
                    return false;
                } else {
                    for (var i = 0; i < propsA.length; i++) {
                        var propName = propsA[i];
                        if (a[propName] !== b[propName]) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            if (classNameA === "[object Array]") {
                return a.toString() === b.toString();
            }
        }
    };
    StaticCommon.sleepCall = function (fn, timeout, obj) {
        if (typeof fn === "function") {
            // let handler: number | null | undefined = null;
            var tim = timeout || 200;
            var sleep = function sleep() {
                if (obj) {
                    fn.call(obj);
                } else {
                    fn();
                }
                // handler !== null && clearTimeout(handler);
            };
            setTimeout(sleep, tim);
        }
    };
    StaticCommon.getValue = function (data, key, defaultValue) {
        var keyValue = key !== undefined && key !== null ? key : "";
        if (/\./.test(keyValue)) {
            var keyArr = keyValue.split(".");
            var isFind = false;
            var index = 0;
            var keyStr = "";
            var tmpData = data;
            while (index <= keyArr.length - 1) {
                keyStr = keyArr[index];
                isFind = index === keyArr.length - 1;
                if (StaticCommon.isArray(tmpData) && StaticCommon.isNumeric(keyStr)) {
                    keyStr = parseInt(keyStr, 10);
                }
                if (!isFind) {
                    var nextKey = keyArr[keyArr.length - 1];
                    if (StaticCommon.isArray(tmpData) || StaticCommon.isObject(tmpData) || StaticCommon.isGlobalObj(tmpData)) {
                        //
                        tmpData = tmpData[keyStr];
                    }
                    if (tmpData && index === keyArr.length - 2) {
                        if (nextKey === "key") {
                            tmpData = tmpData.key;
                            isFind = true;
                        } else if (nextKey === "length") {
                            tmpData = tmpData.length;
                            isFind = true;
                        }
                    }
                } else {
                    tmpData = tmpData ? tmpData[keyStr] : undefined;
                }
                if (isFind) {
                    break;
                }
                index++;
            }
            return isFind ? undefined !== tmpData ? tmpData : defaultValue : defaultValue;
        } else {
            var rResult = data ? data[keyValue] : undefined;
            return data ? undefined !== rResult ? rResult : defaultValue : defaultValue;
        }
    };
    /**
     * 给指定对象设置属性值
     * @param data 设置属性值对象
     * @param key 设置属性key,属性key有多层可使用.区分
     * @param value 设置属性值
     * @param fn 自定义设置值回调
     */
    StaticCommon.setValue = function (data, key, value, fn) {
        var isUpdate = false;
        if (!StaticCommon.isObject(data)) {
            throw new Error("The parameter of data is not a object");
        }
        if (StaticCommon.isEmpty(key)) {
            throw new Error("The key can not be an empty string");
        }
        if (!StaticCommon.isEmpty(value)) {
            var keyArr = key.split(".");
            var keyLen = keyArr.length;
            var index = 0;
            var tmpData = data;
            while (index < keyLen) {
                var cKey = keyArr[index];
                if (index < keyLen - 1) {
                    // 不是最后一个节点
                    if (!StaticCommon.isEmpty(tmpData[cKey])) {
                        if (StaticCommon.isObject(tmpData[cKey])) {
                            tmpData = tmpData[cKey];
                        } else {
                            throw new Error("Can not set value to attribute of " + cKey);
                        }
                    } else {
                        tmpData[cKey] = {};
                        tmpData = tmpData[cKey];
                    }
                } else {
                    // 要更新数据的节点
                    if (typeof fn === "function") {
                        fn(tmpData, cKey, value);
                    } else {
                        tmpData[cKey] = value;
                    }
                    isUpdate = true;
                }
                index++;
            }
        }
        return isUpdate;
    };
    /**
     * 获取随机ID
     */
    StaticCommon.getRandomID = function () {
        var now = new Date();
        var year = now.getFullYear().toString(),
            month = now.getMonth() + 1 < 10 ? "0" + (now.getMonth() + 1).toString() : (now.getMonth() + 1).toString(),
            date = now.getDate() < 10 ? "0" + now.getDate().toString() : now.getDate().toString(),
            hour = now.getHours() < 10 ? ["0", now.getHours()].join("") : now.getHours().toString(),
            minute = now.getMinutes() < 10 ? ["0", now.getMinutes()].join("") : now.getMinutes().toString(),
            second = now.getSeconds() < 10 ? ["0", now.getSeconds()].join("") : now.getSeconds().toString(),
            reSecond = now.getMilliseconds();
        var randValue = parseInt((Math.random() * 9999 + 1000).toString(), 10);
        return [year, month, date, hour, minute, second, reSecond, randValue].join("");
    };
    /**
     * 字符串有连接符-将自动转换成已首字母大写
     * @param val 转换文本
     * @param firstUpperCase 是否大写
     */
    StaticCommon.toHumpStr = function (val, firstUpperCase) {
        if (!this.isEmpty(val)) {
            var vStr = val.replace(/(^\-)|(\-$)/, "");
            var vArr = vStr.split("-");
            for (var i = 0; i < vArr.length; i++) {
                if (i === 0 && firstUpperCase || i > 0) {
                    vArr[i] = vArr[i].substr(0, 1).toUpperCase() + vArr[i].substr(1);
                }
            }
            return vArr.join("");
        } else {
            return val;
        }
    };
    StaticCommon.humpToStr = function (val) {
        if (!this.isEmpty(val)) {
            var vStr = val.substr(0, 1).toLowerCase() + val.substr(1);
            var rStr = vStr.replace(/([A-Z])/g, function ($1) {
                return "-" + $1.toLowerCase();
            });
            return rStr;
        }
        return val;
    };
    StaticCommon.extend = function (desc, src, setReadOnly, ignoreKeys) {
        if (!setReadOnly) {
            if (this.isObject(desc) && this.isObject(src)) {
                if (Object.assign) {
                    Object.assign(desc, src);
                } else {
                    // tslint:disable-next-line:forin
                    for (var key in src) {
                        if (!ignoreKeys || ignoreKeys.indexOf(key) < 0) {
                            desc[key] = src[key];
                        }
                    }
                }
            }
        } else {
            if (this.isObject(desc) && this.isObject(src)) {
                // tslint:disable-next-line:forin
                for (var key in src) {
                    if (!ignoreKeys || ignoreKeys.indexOf(key) < 0) {
                        // 已经存在的属性需要使用delete删除，防止redine error问题
                        if (desc.hasOwnProperty(key)) {
                            delete desc[key];
                        }
                        this.defineReadOnlyProperty(desc, key, src[key]);
                    }
                }
            }
        }
        return desc;
    };
    StaticCommon.merge = function (obj1, obj2) {
        var result = {};
        if (obj1 && !obj2) {
            result = obj1;
        } else if (!obj1 && obj2) {
            result = obj2;
        } else if (obj1 && obj2) {
            if (this.isObject(obj1)) {
                // tslint:disable-next-line:forin
                for (var key in obj1) {
                    result[key] = obj1[key];
                }
            }
            if (this.isObject(obj2)) {
                for (var sKey in obj2) {
                    if (!result.hasOwnProperty(sKey)) {
                        result[sKey] = obj2[sKey];
                    }
                }
            }
        }
        return result;
    };
    /**
     * 将字符串转转换成对应的数据类型，遇到true|false转换成bool类型，遇到数字文本转换成数字类型数据
     * @param data 要转换的数据
     */
    StaticCommon.val = function (data) {
        if (this.isString(data)) {
            if (!isNaN(data)) {
                return data.indexOf(".") >= 0 ? parseFloat(data) : parseInt(data, 10);
            } else {
                return (/^(true|false)$/.test(data) ? Boolean(data) : data
                );
            }
        } else {
            return data;
        }
    };
    StaticCommon.defineReadOnlyProperty = function (obj, propertyKey, propertyValue) {
        (function (paramObj, paramPropertyKey, paramPropertyValue) {
            paramObj && Object.defineProperty(paramObj, paramPropertyKey, {
                configurable: true,
                enumerable: true,
                value: paramPropertyValue,
                writable: false
            });
        })(obj, propertyKey, propertyValue);
    };
    StaticCommon.launchFullscreen = function (element) {
        if (element.requestFullscreen) {
            // tslint:disable-next-line: no-floating-promises
            element.requestFullscreen();
        } else if (element["mozRequestFullScreen"]) {
            element["mozRequestFullScreen"]();
        } else if (element["webkitRequestFullscreen"]) {
            element["webkitRequestFullscreen"]();
        } else if (element["msRequestFullscreen"]) {
            element["msRequestFullscreen"]();
        }
    };
    StaticCommon.exitFullscreen = function () {
        if (document.exitFullscreen) {
            // tslint:disable-next-line: no-floating-promises
            document.exitFullscreen();
        } else if (document["mozCancelFullScreen"]) {
            document["mozCancelFullScreen"]();
        } else if (document["webkitExitFullscreen"]) {
            document["webkitExitFullscreen"]();
        }
    };
    StaticCommon.isFullScreen = function () {
        return document["isFullScreen"] || document["mozIsFullScreen"] || document["webkitIsFullScreen"];
    };
    StaticCommon.guid = function () {
        var S4 = function S4() {
            // tslint:disable-next-line: no-bitwise
            return ((1 + Math.random()) * 0x10000 | 0).toString(16).substr(1);
        };
        return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4();
    };
    StaticCommon.getUri = function (queryString) {
        var str = !StaticCommon.isEmpty(queryString) ? queryString : location.search || "";
        var strArr = [];
        var result = {};
        str = str.replace(/^\?/, "").replace(/\#[\s\S]*$/, "");
        strArr = str.split("&");
        // tslint:disable-next-line: forin
        for (var key in strArr) {
            var tmpItem = strArr[key] || "";
            var tmpM = tmpItem.match(/^\s*([\S]*)\s*=\s*([\S]*)$/);
            if (tmpM) {
                result[tmpM[1]] = tmpM[2];
            }
        }
        return result;
    };
    StaticCommon.getQuery = function (key, queryString) {
        return StaticCommon.getUri(queryString)[key];
    };
    /**
     * 获取字符串字节长度
     * @param {string|number} val 输入字符串
     */
    StaticCommon.strLen = function (val) {
        var str = val.toString();
        var len = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c > 255) {
                len += 2;
            } else {
                len += 1;
            }
        }
        return len;
    };
    return StaticCommon;
}();
exports.StaticCommon = StaticCommon;
exports.defineReadonlyProperty = function (target, propertyKey, propertyValue) {
    Object.defineProperty(target, propertyKey, {
        configurable: false,
        enumerable: true,
        value: propertyValue,
        writable: false
    });
};
exports.getEnvFromCommand = function (commandList) {
    var env = "Prod";
    if (commandList && commandList.length > 0) {
        for (var i = 0; i < commandList.length; i++) {
            var tmpCommand = commandList[i];
            var tmpMatch = tmpCommand.match(/^\-\-env\=([a-z0-9]{1,})$/i);
            if (tmpMatch) {
                env = tmpMatch[1];
            } else {
                var lMatch = tmpCommand.match(/^\-env\=([a-z0-9]{1,})$/i);
                if (lMatch) {
                    env = lMatch[1];
                }
            }
        }
    }
    return env;
};
exports.getCommand = function (command, cmdKey) {
    var result;
    var findKey = false;
    var findValue = false;
    var keyReg = /^[\-]{1,}/;
    var keyValueReg = /^([a-z0-9]{1,})\=/i;
    var isCmdKey = /^[\-]{1,}/.test(cmdKey);
    if (command && command.length > 0) {
        for (var i = 0; i < command.length; i++) {
            var cmd = command[i];
            if (isCmdKey) {
                if (cmd === cmdKey) {
                    if (!keyReg.test(command[i + 1])) {
                        result = command[i + 1] === undefined ? null : command[i + 1];
                        findValue = i + 1 < command.length;
                        break;
                    }
                }
            } else {
                if (!keyReg.test(cmd)) {
                    var keyMatchValue = cmd.match(keyValueReg);
                    if (keyMatchValue && keyMatchValue[1] === cmdKey) {
                        result = cmd.replace(keyValueReg, "");
                        findValue = true;
                        break;
                    } else {
                        if (cmd === cmdKey && !keyReg.test(command[i - 1])) {
                            findKey = true;
                        }
                    }
                }
            }
        }
    }
    return findValue ? result : findKey ? true : result;
};
//# sourceMappingURL=StaticCommon.js.map

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var ReduxGlobalStateKeys_1 = __webpack_require__(9);
/**
 * 初始化全局变量保存Redux管理数据
 * @param getGlobalState 获取全局对象用于保存数据
 * @param defineGlobalState 定义全局对象保存数据，当前方法会调用几次defineGlobalState传入key初始化数据结构
 */
exports.defineReduxProvider = function (getGlobalState, defineGlobalState) {
    var dataID = ReduxGlobalStateKeys_1.REDUX_GLOBAL_STATE_KEY;
    var listenerID = ReduxGlobalStateKeys_1.REDUX_GLOBAL_LISTEN_KEY;
    var reduxState = {
        listener: null,
        state: null
    };
    if (!getGlobalState(dataID)) {
        reduxState.listener = {};
        reduxState.state = {};
        defineGlobalState(dataID, reduxState.state); // 保存单纯的state数据
        defineGlobalState(listenerID, reduxState.listener); // 保存subscribe挂载对象，在数据变化时触发组件的Change事件
        dataID = null;
        listenerID = null;
    } else {
        reduxState.state = getGlobalState(dataID);
        reduxState.listener = getGlobalState(listenerID);
    }
    return reduxState;
};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.declareComponent = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _globalUtil = __webpack_require__(3);

var formatSelector = function formatSelector(selectorName) {
    var dName = selectorName.replace(/([A-Z])/g, "-$1").replace(/^([a-z])/i, "-$1").toLowerCase();
    dName = /^\-/.test(dName) ? dName : "-" + dName;
    dName = "eui" + dName;
    return dName;
};
var registerComponent = function registerComponent(widgets, domName) {
    var register = function register(widgetFactory, domNameValue) {
        // tslint:disable-next-line:no-shadowed-variable
        var domName = widgetFactory.toString();
        var fMatch = domName.match(/^function\s*([a-z0-9_\-]*)\s*\(/i);
        var elmerData = (0, _globalUtil.globalVar)();
        if (fMatch) {
            var dName = fMatch[1];
            dName = domNameValue && domNameValue.length > 0 ? domNameValue : dName;
            dName = formatSelector(dName);
            var saveData = elmerData.components || {};
            if (!saveData[dName]) {
                Object.defineProperty(widgetFactory, "selector", {
                    configurable: false,
                    enumerable: true,
                    value: dName,
                    writable: false
                });
                Object.defineProperty(elmerData.components, dName, {
                    configurable: false,
                    enumerable: true,
                    value: widgetFactory,
                    writable: false
                });
            }
        } else {
            throw new Error("未定义组件名称!");
        }
    };
    if ((typeof widgets === "undefined" ? "undefined" : _typeof(widgets)) === "object") {
        Object.keys(widgets).map(function (wKey) {
            var factory = widgets[wKey];
            if (typeof factory === "function") {
                register(factory, wKey);
            } else {
                throw new Error("The register component " + wKey + " must be a function");
            }
        });
    } else if (typeof widgets === "function") {
        register(widgets, domName);
    } else {
        throw new Error("The Register component is muse be a constructor or a object");
    }
};
var defineReadonlyProperty = function defineReadonlyProperty(target, propertyKey, propertyValue) {
    Object.defineProperty(target, propertyKey, {
        configurable: false,
        enumerable: true,
        value: propertyValue,
        writable: false
    });
};
/**
 * 定义组件，挂载到全局变量
 * @param options
 * @deprecated - 即将弃用此方法,为兼容旧代码
 */
var declareComponent = exports.declareComponent = function declareComponent(options) {
    // tslint:disable-next-line:typedef
    // tslint:disable-next-line:variable-name
    return function (__contructor) {
        var _a;
        __contructor.prototype.selector = formatSelector(options.selector || "");
        // 使用defineReadonlyProperty定义属性，防止用户自定义方法重复定义
        defineReadonlyProperty(__contructor.prototype, "injectModel", options.model);
        defineReadonlyProperty(__contructor.prototype, "injectService", options.service);
        defineReadonlyProperty(__contructor.prototype, "connect", options.connect);
        defineReadonlyProperty(__contructor.prototype, "i18nConfig", options.i18n);
        defineReadonlyProperty(__contructor.prototype, "template", options.template);
        options.components && defineReadonlyProperty(__contructor.prototype, "components", options.components);
        if ((_a = options.template) === null || _a === void 0 ? void 0 : _a.fromLoader) {
            defineReadonlyProperty(__contructor.prototype, "render", function () {
                return this.htmlCode;
            }.bind({ htmlCode: options.template.htmlCode }));
        }
        registerComponent(__contructor, options.selector);
    };
};

/***/ }),
/* 15 */,
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(38));
__export(__webpack_require__(39));
__export(__webpack_require__(40));
__export(__webpack_require__(17));
__export(__webpack_require__(45));
//# sourceMappingURL=index.js.map

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var elmer_common_1 = __webpack_require__(0);
var VirtualRenderDiff = /** @class */function (_super) {
    __extends(VirtualRenderDiff, _super);
    function VirtualRenderDiff() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Diff运算，指定dom查找在旧dom树中的位置，并对比将要做的操作
     * @param {object} event diff参数
     * @param {IVirtualElement} event.dom 要做diff运算的节点
     */
    VirtualRenderDiff.prototype.diff = function (event) {
        var oldParentDom = event.oldParentDom;
        var result = {
            matchDom: null,
            matchIndex: event.lastMatchIndex
        };
        // 设置有key值的dom，只要对key和tagName做判断即可
        // 当旧节点树没有子节点时，则保留新dom节点的状态，不做任何判断
        if (oldParentDom && oldParentDom.children && oldParentDom.children.length > 0) {
            for (var diffIndex = 0; diffIndex < oldParentDom.children.length; diffIndex++) {
                var tmpOld = oldParentDom.children[diffIndex];
                if (!tmpOld.isDiff) {
                    var checkResult = this.sameNode(event.dom, tmpOld);
                    if (checkResult.sameNode) {
                        if (event.dom.status !== "DELETE") {
                            if (event.lastMatchIndex > diffIndex) {
                                if (tmpOld.status !== "DELETE") {
                                    event.dom.status = checkResult.hasChange ? "MOVEUPDATE" : "MOVE";
                                } else {
                                    event.dom.status = "APPEND";
                                }
                            } else {
                                // 当匹配上的旧节点是DELETE状态的时候，真实dom是匹配不上的，所以需要更改为Append状态
                                // 当旧节点不是DELETE状态是才能根据实际情况定义修改状态为UPDATE或则NORMAL
                                event.dom.status = tmpOld.status !== "DELETE" ? checkResult.hasChange ? "UPDATE" : "NORMAL" : "APPEND";
                            }
                            if (checkResult.hasChange) {
                                event.dom.changeAttrs = checkResult.updateProps;
                                event.dom.deleteAttrs = checkResult.deleteProps;
                            }
                        }
                        result.matchDom = tmpOld;
                        result.matchIndex = diffIndex;
                        event.dom.dom = tmpOld.dom;
                        event.dom.virtualID = tmpOld.virtualID; // 保留旧的虚拟dom id方便查询旧节点
                        event.dom.tagAttrs = tmpOld.tagAttrs;
                        tmpOld.isDiff = true;
                        // 已经match上的dom节点标记起来，防止相似节点被重复引用
                        break;
                    }
                }
            }
        }
        return result;
    };
    /**
     * 计算两个字符串的相似度
     * @param s 比较字符串
     * @param t 比较字符串
     * @param toFixed 计算结果保留小数位数
     */
    VirtualRenderDiff.prototype.similar = function (s, t, toFixed) {
        if (this.isString(s) && this.isString(t) && s.length === 0 && t.length === 0) {
            return 1;
        }
        if (!s || !t) {
            return 0;
        }
        var l = s.length > t.length ? s.length : t.length;
        var n = s.length;
        var m = t.length;
        var d = [];
        var f = toFixed || 3;
        var i, j, si, tj, cost;
        // tslint:disable-next-line: curly
        if (n === 0) return m;
        // tslint:disable-next-line: curly
        if (m === 0) return n;
        for (i = 0; i <= n; i++) {
            d[i] = [];
            d[i][0] = i;
        }
        for (j = 0; j <= m; j++) {
            d[0][j] = j;
        }
        for (i = 1; i <= n; i++) {
            si = s.charAt(i - 1);
            for (j = 1; j <= m; j++) {
                tj = t.charAt(j - 1);
                if (si === tj) {
                    cost = 0;
                } else {
                    cost = 1;
                }
                d[i][j] = this.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);
            }
        }
        var res = 1 - d[n][m] / l;
        return parseFloat(res.toFixed(f));
    };
    VirtualRenderDiff.prototype.min = function (a, b, c) {
        return a < b ? a < c ? a : c : b < c ? b : c;
    };
    VirtualRenderDiff.prototype.sameNode = function (newDom, oldDom) {
        var _this = this;
        var result = {
            deleteProps: [],
            hasChange: false,
            sameNode: false,
            similarPercent: 0,
            updateProps: {}
        };
        if (newDom.tagName === oldDom.tagName) {
            if (!this.isEmpty(newDom.props.key) && !this.isEmpty(oldDom.props.key)) {
                // 当key不为空时需要key相等才算是相同节点
                if (newDom.props.key === oldDom.props.key) {
                    result.sameNode = true;
                    result.similarPercent = 1;
                }
            } else if (this.isEmpty(newDom.props.key) && this.isEmpty(oldDom.props.key)) {
                // 当key都为空时，只要tagName相同即认为是相同的节点
                // innerHTML相似度达到80以上才算做相同节点
                var smpercent = 0;
                if (!/^text$/i.test(newDom.tagName)) {
                    // 非文本节点走一下判断
                    if (newDom.children.length === oldDom.children.length) {
                        // 当两个节点的属性都是空的，为了进一步确定是否是同一个节点，取子节点的tagName做判断就行，不考虑更下一层，否则过于复杂
                        // 由于是边渲染边做diff运算，新节点的子节点还没有渲染所以有数据绑定的属性和旧节点相差很大，只需要判断结构是否相同就行
                        var insm = this.compareChildrenStructure(newDom, oldDom);
                        var attrsm = this.similar(newDom.attrCode, oldDom.attrCode);
                        // 子节点数量一致的时候通过innerHTML的相似度和属性的相似度来判断
                        // 当没有设置任何属性值时用innerHTML的相似度来判断
                        // 当设置有属性时通过属性相似度和innerHTML的相似度哪个大取哪个
                        if (!this.isEmpty(newDom.attrCode)) {
                            smpercent = Math.max(insm, attrsm);
                        } else {
                            smpercent = insm;
                        }
                    } else {
                        // 子节点数量不一致，判断属性即可，不考虑innerHTML的判断，子节点数量不一致基本可判定未不相同的节点
                        smpercent = this.similar(newDom.attrCode, oldDom.attrCode);
                    }
                } else {
                    // 文本节点对比InnerHTML
                    smpercent = newDom.innerHTML === oldDom.innerHTML ? 1 : 0.9;
                }
                // const smpercent = !/^text$/i.test(newDom.tagName) ? this.similar(newDom.attrCode, oldDom.attrCode) : this.similar(newDom.innerHTML, oldDom.innerHTML);
                // // 当两个节点tagName相同，并且都是text节点的时候需要对比innerHTML属性，text节点没有attributes
                result.sameNode = smpercent >= 0.85;
                result.similarPercent = smpercent;
            }
            if (result.sameNode) {
                // 判断为同一个节点时才对属性做判断，不是同一个节点直接下移判断
                if (newDom.tagName !== "text") {
                    var newProps_1 = newDom.props || {};
                    var oldProps_1 = oldDom.props || {};
                    var newPropsKeys_1 = Object.keys(newProps_1);
                    var oldPropsKeys = Object.keys(oldProps_1);
                    var updateProps_1 = {};
                    oldPropsKeys.map(function (tmpKey) {
                        if (newPropsKeys_1.indexOf(tmpKey) >= 0) {
                            // 新，旧节点都有此属性时，属性值不同更新属性为新节点属性旧节点属性丢弃
                            // 新旧节点属性值相等，从updateProps属性删除
                            if (_this.isObject(newProps_1[tmpKey]) && _this.isObject(newProps_1[tmpKey])) {
                                // 两个属性值都是Object对象，使用isEqual比较
                                if (!_this.isEqual(newProps_1[tmpKey], oldProps_1[tmpKey])) {
                                    // 当两个属性值不相等时不需要做更新, 将变化的属性更新到update list
                                    result.hasChange = true;
                                    updateProps_1[tmpKey] = newProps_1[tmpKey];
                                }
                            } else if (!_this.isObject(newProps_1[tmpKey]) && !_this.isObject(newProps_1[tmpKey])) {
                                // 两个属性值都不是Object时直接使用===做比较， 其中一个是Object,另一个不是Object,即不相等，默认放置在要更新的对象上
                                if (newProps_1[tmpKey] !== oldProps_1[tmpKey]) {
                                    // 当两个属性值相等时不需要做更新
                                    result.hasChange = true;
                                    updateProps_1[tmpKey] = newProps_1[tmpKey];
                                }
                            }
                        } else {
                            // 旧节点属性不在新节点属性列表中，需要添加至要删除的属性列表中
                            result.hasChange = true;
                            result.deleteProps.push(tmpKey);
                        }
                    });
                    result.updateProps = updateProps_1;
                } else {
                    if (result.similarPercent !== 1) {
                        result.hasChange = true;
                    }
                }
            }
        }
        return result;
    };
    /**
     * 取第一层子节点进一步判断是否为同一个节点，不考虑更下一层
     * @param vdom 判断节点
     */
    VirtualRenderDiff.prototype.compareChildrenStructure = function (newDom, oldDom) {
        if (newDom.children.length === oldDom.children.length) {
            if (newDom.children.length > 0) {
                for (var i = 0; i < newDom.children.length; i++) {
                    if (newDom.children[i].tagName !== oldDom.children[i].tagName) {
                        return 0;
                    }
                }
                return 1;
            } else {
                // 当两个节点的子节点都是空的时候可以认为是相同结构
                return 1;
            }
        } else {
            return 0;
        }
    };
    return VirtualRenderDiff;
}(elmer_common_1.Common);
exports.VirtualRenderDiff = VirtualRenderDiff;
//# sourceMappingURL=VirtualRenderDiff.js.map

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", { value: true });
exports.strToFunc = function (funCode) {
    return new Function("return " + funCode)();
};
exports.funcToStr = function (func) {
    return typeof func === "function" ? func.toString() : "";
};
exports.onmessage = function (e) {
    var msgData = e.data;
    var msgType = msgData.type;
    var elmer = self["elmer"];
    var dataType = Object.prototype.toString.call(msgData.data);
    var tmpFn;
    try {
        if (msgType === "InitObject") {
            self[msgData.globalName] = self["workerDataToObject"](msgData.data);
            elmer.sendMsg({
                id: msgData.id,
                message: "success",
                statusCode: 200,
                type: msgType
            });
            return;
        } else if (msgType === "InitFunction") {
            self[msgData.globalName] = self["strToFunc"](msgData.data);
            elmer.sendMsg({
                id: msgData.id,
                message: "success",
                statusCode: 200,
                type: msgType
            });
            return;
        } else if (msgType === "CallObjMethod" || msgType === "CallMethod") {
            var objKey = msgData.obj;
            var callbackName = msgData.method;
            var selfFunc = void 0;
            if (msgType === "CallObjMethod") {
                var runCode = "var fn = " + objKey + "." + callbackName + ";\r\n";
                if (dataType === "[object Array]") {
                    runCode += "return fn.apply(" + objKey + ", argv);\r\n";
                } else {
                    runCode += "return fn(argv);\r\n";
                }
                selfFunc = new Function("argv", runCode);
            } else {
                if (dataType === "[object Array]") {
                    selfFunc = new Function('argv', "return " + callbackName + ".apply(self, argv);");
                } else {
                    selfFunc = new Function('argv', "return " + callbackName + "(argv);");
                }
            }
            if (typeof selfFunc === "function") {
                var callResult = selfFunc(msgData.data);
                elmer.sendMsg({
                    data: callResult,
                    id: msgData.id,
                    message: "",
                    statusCode: 200,
                    type: msgType
                });
            } else {
                elmer.sendMsg({
                    id: msgData.id,
                    message: tmpFn === undefined ? "The calling method is not defined" : "The specified object is not a function",
                    type: "CallObjMethod"
                });
            }
            return;
        }
    } catch (e) {
        console.error(e);
        elmer.sendMsg({
            data: undefined,
            error: e,
            id: msgData.id,
            message: e.message,
            statusCode: 500,
            type: msgType
        });
    }
};
exports.objectToWorkerData = function (obj) {
    var result = {
        data: {},
        funcData: {}
    };
    if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object") {
        for (var key in obj) {
            if (typeof obj[key] === "function") {
                result.funcData[key] = obj[key].toString();
            } else {
                result.data[key] = obj[key];
            }
        }
    }
    return result;
};
exports.objectToWorkerCode = function (obj, className) {
    var innerObjKey = className + new Date().format("YYYYMMDDHisms");
    var result = "(function(){\r\n";
    result += "    function " + className + "(){};\r\n";
    if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object") {
        var _loop_1 = function _loop_1(key) {
            var tmpValue = obj[key];
            var tmpType = Object.prototype.toString.call(tmpValue);
            if (typeof tmpValue === "function") {
                var code = tmpValue.toString();
                result += "    " + className + ".prototype." + key + " = " + code + ";\r\n";
            } else if (tmpType === "[object RegExp]") {
                var regCode = tmpValue.toString();
                result += "    " + className + ".prototype." + key + " = " + regCode + ";\r\n";
            } else if (tmpType === "[object Array]") {
                var tmpResult_1 = [];
                tmpValue.map(function (tmpItem) {
                    if (Object.prototype.toString.call(tmpItem) === "[object RegExp]") {
                        tmpResult_1.push(tmpItem.toString());
                    } else {
                        tmpResult_1.push(JSON.stringify(tmpItem));
                    }
                });
                result += "    " + className + ".prototype." + key + " = [" + tmpResult_1.join(",") + "];\r\n";
            } else {
                result += "    " + className + ".prototype." + key + " = " + JSON.stringify(obj[key]) + ";\r\n";
            }
        };
        for (var key in obj) {
            _loop_1(key);
        }
    }
    result += "    var " + innerObjKey + " = new " + className + "();\r\n";
    result += "    return " + innerObjKey + ";\r\n";
    result += "})();\r\n";
    result = result.replace(/\sthis\./g, [" ", innerObjKey, "."].join("")).replace(/\!this\./g, ["!", innerObjKey, "."].join("")).replace(/([\(\&\|\=\;])this\./g, ["$1", innerObjKey, "."].join(""));
    return result;
};
exports.classToWorkerCode = function (func) {
    var coreCode = func.toString().replace(/^function\s[a-z0-9\_]{1,}\s*\(/i, "");
    var defineName = func.name;
    var code = "(function(){\r\n";
    code += "    function " + defineName + "(" + coreCode + ";\r\n";
    Object.keys(func).map(function (funcKey) {
        var fCode = func[funcKey];
        if ((typeof fCode === "undefined" ? "undefined" : _typeof(fCode)) === "object") {
            fCode = JSON.stringify(fCode, null, 4);
        } else if (typeof fCode === "function") {
            fCode = fCode.toString();
        }
        code += "    " + defineName + "." + funcKey + " = " + fCode + ";\r\n";
    });
    code += "    return " + defineName + ";\r\n";
    code += "})();";
    return code;
};
exports.workerDataToObject = function (eventData) {
    var result = {};
    if (eventData) {
        if (eventData.data) {
            for (var key in eventData.data) {
                result[key] = eventData.data[key];
            }
        }
        if (eventData.funcData) {
            for (var key in eventData.funcData) {
                result[key] = self["strToFunc"](eventData.funcData[key]);
            }
        }
    }
    return result;
};
exports.__spreadArrays = function () {
    var il = arguments.length;
    var s = 0;
    for (var z = 0; z < il; z++) {
        s += arguments[z].length;
    }
    var r = Array(s);
    for (var k = 0, i = 0; i < il; i++) {
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
            r[k] = a[j];
        }
    }
    return r;
};

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ElmerDOM = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _ElmerAnimation = __webpack_require__(50);

var _ElmerAnimationProperty = __webpack_require__(20);

var _ElmerAnimationProperty2 = _interopRequireDefault(_ElmerAnimationProperty);

var _EventNames = __webpack_require__(52);

var _index = __webpack_require__(7);

var _injectable = __webpack_require__(1);

var _ElmerDomEvent = __webpack_require__(55);

var _ElmerDomQuery = __webpack_require__(56);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var ElmerDOM = /** @class */function (_super) {
    __extends(ElmerDOM, _super);
    function ElmerDOM() {
        var _this = _super.call(this) || this;
        _this.bindEvents = _EventNames.EventNames;
        _this.supportCss3 = false;
        _this.listener = [];
        _this.supportCss3 = _this.support("transform");
        _this.contains = document.documentElement !== null && document.documentElement.contains ? function (parent, node) {
            return parent !== node && parent.contains(node);
        } : function (parent, checkNode) {
            var node = checkNode;
            while (node && node.parentNode) {
                if (node === parent) {
                    return true;
                } else {
                    node = node.parentNode;
                }
            }
            return false;
        };
        return _this;
    }
    /**
     * 判断浏览器是否支持指定的css样式
     * @param {String} key css样式名称
     */
    ElmerDOM.prototype.support = function (key) {
        var prefix = ["webkit", "moz", "ms", "o"];
        if (!this.isEmpty(key)) {
            var prePropertyKey = key.substr(0, 1).toUpperCase() + key.substr(1);
            for (var i = 0; i < prefix.length; i++) {
                var myKey = prefix[i] + prePropertyKey;
                if (document.body && document.body.style[myKey] !== undefined) {
                    return true;
                }
            }
            return document.body && document.body.style[key] !== undefined;
        } else {
            return false;
        }
    };
    ElmerDOM.prototype.byId = function (id, dom) {
        if (this.isDOM(dom) && dom !== undefined && dom !== null) {
            return dom.querySelector("#" + id);
        } else {
            return document.getElementById(id);
        }
    };
    ElmerDOM.prototype.query = function (queryString, dom) {
        if (this.isDOM(dom) && dom !== undefined && dom !== null) {
            return dom.querySelectorAll(queryString) || new NodeList();
        } else {
            return document.querySelectorAll(queryString) || new NodeList();
        }
    };
    ElmerDOM.prototype.width = function (dom) {
        return this.isDOM(dom) ? dom.clientWidth : 0;
    };
    ElmerDOM.prototype.height = function (dom) {
        return this.isDOM(dom) ? dom.clientHeight : 0;
    };
    ElmerDOM.prototype.css = function (dom, key, value) {
        var _this = this;
        if (this.isDOM(dom)) {
            this.setCss(dom, key, value);
        } else if (this.getType(dom) === "[object NodeList]" || this.getType(dom) === "[object Array]") {
            dom.forEach(function (tmpDom) {
                _this.setCss(tmpDom, key, value);
            });
        }
    };
    ElmerDOM.prototype.setCss = function (dom, key, value) {
        if (dom) {
            if (this.isString(key)) {
                if (dom["style"][key] !== undefined) {
                    var cssValue = this.isNumeric(value) && key !== "opacity" ? value + "px" : value;
                    dom.style.setProperty(key, cssValue);
                }
            } else if (this.isObject(key)) {
                for (var csskey in key) {
                    if (!this.isEmpty(key[csskey])) {
                        var convertCssKeys = ["left", "top", "right", "bottom", "width", "height", "fontSize", "borderWidth", "borderLeftWidth", "borderTopWidth", "borderRightWidth", "borderBottomWidth", "marginLeft", "marginTop", "marginRight", "marginBottom", "paddingLeft", "paddingTop", "paddingRight", "paddingBottom"];
                        var setCssValue = this.isNumeric(key[csskey]) && convertCssKeys.indexOf(csskey) >= 0 ? key[csskey] + "px" : key[csskey];
                        dom.style.setProperty(this.humpToStr(csskey), setCssValue);
                    } else {
                        dom.style.setProperty(this.humpToStr(csskey), null);
                    }
                }
            }
        }
    };
    ElmerDOM.prototype.setCss3 = function (dom, key, value) {
        if (!this.isEmpty(key)) {
            var profillKey = key.substr(0, 1).toUpperCase() + key.substr(1);
            this.setCss(dom, key, value);
            this.setCss(dom, "webkit" + profillKey, value);
            this.setCss(dom, "moz" + profillKey, value);
            this.setCss(dom, "ms" + profillKey, value);
            this.setCss(dom, "o" + profillKey, value);
        }
    };
    ElmerDOM.prototype.getCss3 = function (key, value) {
        var calcReg = /^calc\(/i;
        var supportPrefix = ["webkit", "moz", "ms", "o"];
        var result = "";
        if (calcReg.test(value)) {
            supportPrefix.map(function (tmpPrefix) {
                result += key + ":-" + tmpPrefix + "-" + value + ";";
            });
            result += key + ":" + value;
        } else {
            supportPrefix.map(function (tmpPrefix) {
                result += "-" + tmpPrefix + "-" + key + ":" + value + ";";
            });
            result += key + ":" + value + ";";
        }
        return result;
    };
    ElmerDOM.prototype.hasClass = function (dom, className) {
        if (this.isDOM(dom)) {
            if (dom.classList && dom.classList.contains) {
                return dom.classList.contains(className);
            } else {
                var tmpClassName = (dom.className || "").replace(/\s\s/g, " ");
                var tmpClassArr = tmpClassName.split(" ");
                return tmpClassArr.indexOf(className) >= 0;
            }
        }
    };
    ElmerDOM.prototype.attr = function (dom, attrName, attrValue) {
        if (this.isDOM(dom)) {
            if (attrValue !== undefined) {
                dom.setAttribute(attrName, attrValue);
            } else {
                if (!this.isObject(attrName)) {
                    var v = dom.getAttribute(attrName);
                    return this.isNumeric(v) && v !== null ? v.indexOf(".") < 0 ? parseInt(v, 10) : parseFloat(v) : v;
                } else {
                    Object.keys(attrName).map(function (tmpAttrName) {
                        dom.setAttribute(tmpAttrName, attrName[tmpAttrName]);
                    });
                }
            }
        }
    };
    ElmerDOM.prototype.addClass = function (dom, className) {
        var _this = this;
        if (this.isDOM(dom) && !this.isEmpty(className)) {
            this.updateDomClassName(dom, className, true);
        } else if (this.getType(dom) === "[object NodeList]" || this.getType(dom) === "[object Array]") {
            var domList = dom;
            domList.forEach(function (item) {
                _this.updateDomClassName(item, className, true);
            });
        }
    };
    ElmerDOM.prototype.removeClass = function (dom, className) {
        var _this = this;
        if (this.getType(dom) === "[object NodeList]" || this.getType(dom) === "[object Array]") {
            dom.forEach(function (item) {
                _this.updateDomClassName(item, className, false);
            });
        } else {
            this.updateDomClassName(dom, className, false);
        }
    };
    ElmerDOM.prototype.on = function (dom, eventName, callBack, options) {
        this.addEvent(dom, eventName, callBack, options);
    };
    ElmerDOM.prototype.addEvent = function (dom, eventName, callBack, options) {
        if (this.isDOM(dom) || this.getType(dom) === "[object Window]") {
            var eventListener = dom.eventListeners || [];
            var profillEventName = "on" + eventName;
            var eventData = {
                eventName: eventName,
                handler: callBack
            };
            if (this.bindEvents.indexOf(eventName) >= 0) {
                // 使用addEventListener方法绑定事件
                if (dom.addEventListener) {
                    if (options) {
                        dom.addEventListener(eventName, callBack, options);
                    } else {
                        dom.addEventListener(eventName, callBack);
                    }
                } else {
                    if (options) {
                        dom.attachEvent(profillEventName, callBack, options);
                    } else {
                        dom.attachEvent(profillEventName, callBack);
                    }
                }
            } else {
                // 特殊事件直接绑定
                if (dom[eventName]) {
                    dom[eventName] = callBack;
                } else {
                    dom[profillEventName] = callBack;
                }
            }
            eventListener.push(eventData);
            dom.eventListeners = eventListener;
        }
    };
    ElmerDOM.prototype.removeEvent = function (dom, eventName, callBack, options) {
        var _this = this;
        if (this.isDOM(dom)) {
            var eventListeners_1 = dom.eventListeners || [];
            if (eventListeners_1 && eventListeners_1.length > 0) {
                eventListeners_1.map(function (tmpListener, index) {
                    if (tmpListener.eventName === eventName && callBack === tmpListener.handler) {
                        if (_this.bindEvents.indexOf(tmpListener.eventName) >= 0) {
                            if (dom.removeEventListener) {
                                dom.removeEventListener(tmpListener.eventName, tmpListener.handler);
                            } else {
                                if (dom.detachEvent) {
                                    dom.detachEvent("on" + tmpListener.eventName, tmpListener.handler);
                                }
                            }
                        } else {
                            dom[tmpListener.eventName] = null;
                        }
                        delete eventListeners_1[index];
                    }
                });
                dom.eventListeners = eventListeners_1;
            } else {
                if (dom.removeEventListener) {
                    dom.removeEventListener(eventName, callBack, options);
                } else if (dom.detachEvent) {
                    dom.detachEvent("on" + eventName, callBack, options);
                }
            }
        }
    };
    ElmerDOM.prototype.unbind = function (dom) {
        var _this = this;
        if (this.isDOM(dom)) {
            var eventListeners_2 = dom.eventListeners || [];
            eventListeners_2.map(function (tmpListener, index) {
                if (_this.bindEvents.indexOf(tmpListener.eventName) >= 0) {
                    if (dom.removeEventListener) {
                        dom.removeEventListener(tmpListener.eventName, tmpListener.handler);
                    } else {
                        if (dom.detachEvent) {
                            dom.detachEvent("on" + tmpListener.eventName, tmpListener.handler);
                        }
                    }
                }
                delete eventListeners_2[index];
            });
            dom.eventListeners = null;
        }
    };
    ElmerDOM.prototype.getMaxWidth = function (domList) {
        var maxWidth = 0;
        if (domList) {
            if (this.isNodeList(domList)) {
                domList.forEach(function (tmpDom) {
                    var tmpWidth = tmpDom.clientWidth;
                    if (tmpWidth > maxWidth) {
                        maxWidth = tmpWidth;
                    }
                    tmpWidth = null;
                });
            } else {
                domList.map(function (tmpDom) {
                    var tmpWidth = tmpDom.clientWidth;
                    if (tmpWidth > maxWidth) {
                        maxWidth = tmpWidth;
                    }
                    tmpWidth = null;
                });
            }
        }
        return maxWidth;
    };
    ElmerDOM.prototype.find = function (dom, selector) {
        var _this = this;
        var regs = this.getSelectors(selector) || [];
        var result = [];
        regs.map(function (tmpSelector) {
            var tmpDoms = _this.queryInDom(dom, tmpSelector);
            if (tmpDoms.length > 0) {
                result.push.apply(result, tmpDoms);
            }
        });
        return result;
    };
    ElmerDOM.prototype.animation = function (options) {
        if (this.isDOM(options.dom)) {
            return new _ElmerAnimation.ElmerAnimation({
                beginTime: options.beginTime,
                data: [{
                    beginTime: options.beginTime,
                    dom: options.dom,
                    duration: options.duration,
                    from: options.from,
                    onFinish: options.onFinish,
                    onStart: options.onStart,
                    to: options.to,
                    type: options.type || "Linear"
                }],
                duration: options.duration,
                onChange: this.onAnimationChange.bind(this)
            });
        } else {
            throw new Error("Animation dom must be an HtmlElement");
        }
    };
    ElmerDOM.prototype.animations = function (animationData) {
        return new _ElmerAnimation.ElmerAnimation({
            beginTime: animationData.beginTime,
            data: animationData.options,
            duration: animationData.duration,
            onBegin: animationData.onStart,
            onChange: this.onAnimationChange.bind(this),
            onEnd: animationData.onFinish
        });
    };
    ElmerDOM.prototype.show = function (dom, options) {
        var _this = this;
        var nDuration = options ? options.duration || 300 : 300;
        this.css(dom, {
            display: "",
            opacity: 0
        });
        this.animation({
            dom: dom,
            duration: nDuration,
            from: {
                opacity: 0
            },
            to: {
                opacity: 1
            },
            type: options && !this.isEmpty(options.type) ? options.type : "Linear",
            // tslint:disable-next-line: object-literal-sort-keys
            onStart: options ? options.onStart : null,
            onFinish: function onFinish() {
                _this.css(dom, {
                    display: "",
                    opacity: 1
                });
                options && typeof options.onFinish === "function" && options.onFinish();
            }
        });
    };
    ElmerDOM.prototype.hide = function (dom, options) {
        var _this = this;
        var nDuration = options ? options.duration || 300 : 300;
        this.css(dom, {
            display: "",
            opacity: 1
        });
        // tslint:disable: object-literal-sort-keys
        this.animation({
            dom: dom,
            duration: nDuration,
            from: {
                opacity: 1
            },
            to: {
                opacity: 0
            },
            type: options && !this.isEmpty(options.type) ? options.type : "Linear",
            onStart: options ? options.onStart : null,
            onFinish: function onFinish() {
                _this.css(dom, {
                    display: "none",
                    opacity: 1
                });
                options && typeof options.onFinish === "function" && options.onFinish();
            }
        });
        // tslint:enable: object-literal-sort-keys
    };
    ElmerDOM.prototype.slideIn = function (dom, options) {
        var _this = this;
        var attrHeight = this.attr(dom, "data-animation-height") || "";
        attrHeight = attrHeight.replace(/[a-z]*$/i, "").replace(/\%/g, "");
        var attrHeightValue = /^[0-9\.]{1,}$/.test(attrHeight) ? attrHeight : 0;
        var domHeight = attrHeightValue > 0 ? attrHeightValue : dom.clientHeight;
        var from = {
            height: 0,
            opacity: 1
        };
        var to = {
            height: domHeight,
            opacity: 1
        };
        var dValue = _ElmerAnimationProperty2.default.converAnimationProperty(_ElmerAnimationProperty2.default.readWillChangeCssDefaultData(dom, from, to));
        this.css(dom, {
            display: options && !this.isEmpty(options.display) ? options.display : "",
            opacity: "1"
        });
        if (to.height === 0) {
            to.height = dom.clientHeight;
        }
        this.css(dom, "height", 0);
        this.animation({
            dom: dom,
            duration: options ? options.duration || 300 : 300,
            from: from,
            to: to,
            type: options ? options.type : "Linear",
            // tslint:disable-next-line: object-literal-sort-keys
            onFinish: function onFinish() {
                _this.css(dom, {
                    height: dValue.height,
                    opacity: 1
                });
                options && typeof options.onFinish === "function" && options.onFinish();
            }
        });
        dValue = null;
        to = null;
        from = null;
        domHeight = null;
        attrHeightValue = null;
    };
    ElmerDOM.prototype.slideOut = function (dom, options) {
        var _this = this;
        var domHeight = dom.clientHeight;
        var from = {
            height: domHeight,
            opacity: 1
        };
        var to = {
            height: 0,
            opacity: 0.5
        };
        var dValue = _ElmerAnimationProperty2.default.converAnimationProperty(_ElmerAnimationProperty2.default.readWillChangeCssDefaultData(dom, from, to));
        this.animation({
            dom: dom,
            duration: options ? options.duration || 300 : 300,
            from: from,
            to: to,
            type: options ? options.type : "Linear",
            // tslint:disable-next-line: object-literal-sort-keys
            onFinish: function onFinish() {
                _this.css(dom, {
                    display: "none",
                    opacity: 1,
                    // tslint:disable-next-line: object-literal-sort-keys
                    height: dValue.height
                });
                _this.attr(dom, "data-animation-height", dValue.height);
                options && typeof options.onFinish === "function" && options.onFinish();
            }
        });
    };
    ElmerDOM.prototype.onAnimationChange = function (evt) {
        // console.log(evt.value);
        this.css(evt.dom, evt.value);
    };
    ElmerDOM.prototype.queryInDom = function (dom, selector) {
        var _this = this;
        var resultDoms = [];
        if (selector.mode === ">") {
            // 查询当前节点的第一级子节点
            dom.childNodes.forEach(function (tmpChildNode, index) {
                if (_this.matchQueryNode(tmpChildNode, selector.type, selector.value, index)) {
                    if (selector.child) {
                        var tmpChildDoms = _this.queryInDom(tmpChildNode, selector.child);
                        if (tmpChildDoms && tmpChildDoms.length > 0) {
                            resultDoms.push.apply(resultDoms, tmpChildDoms);
                        }
                        tmpChildDoms = null;
                    } else {
                        resultDoms.push(tmpChildNode);
                    }
                }
            });
        } else if (selector.mode === "+") {
            // 查询和当前同一级，第一个出现的节点
            var nextElement = this.getNextSilbingElement(dom, selector.type, selector.value);
            if (nextElement) {
                if (selector.child) {
                    resultDoms = this.queryInDom(nextElement, selector.child);
                } else {
                    resultDoms = [nextElement];
                }
                nextElement = null;
            }
        } else if (this.isEmpty(selector.mode)) {
            var tmpElements = null;
            var tmpResult = this.getElementsBySelectValue(dom, selector.type, selector.value);
            var filterType_1 = tmpResult.filterType;
            var filter_1 = tmpResult.filter;
            tmpElements = tmpResult.elements;
            if (tmpElements && tmpElements.length > 0) {
                tmpElements.forEach(function (tmpElement) {
                    if (filterType_1 === ".") {
                        if (_this.hasClass(tmpElement, filter_1)) {
                            if (selector.child) {
                                resultDoms.push.apply(resultDoms, _this.queryInDom(tmpElement, selector.child));
                            } else {
                                resultDoms.push(tmpElement);
                            }
                        }
                    } else if (filterType_1 === ":") {
                        // 暂不支持，先完成基本组件功能，以后在升级， 此处使用插件模式做判断，以便于扩展判断条件
                        // if(this.mDomModel.filterCheck(tmpElement, filter)) {
                        //     if(selector.child) {
                        //         resultDoms.push(...this.queryInDom(tmpElement, selector.child));
                        //     } else {
                        //         resultDoms.push(tmpElement);
                        //     }
                        // }
                    } else if (_this.isEmpty(filterType_1)) {
                        if (selector.child) {
                            resultDoms.push.apply(resultDoms, _this.queryInDom(tmpElement, selector.child));
                        } else {
                            resultDoms.push(tmpElement);
                        }
                    }
                });
            }
            tmpResult = null;
            tmpElements = null;
            filter_1 = null;
            filterType_1 = null;
        }
        return resultDoms;
    };
    ElmerDOM.prototype.getElementsBySelectValue = function (parent, selectorType, selectorValue) {
        var _this = this;
        var tagName = selectorValue.replace(/(\.|\:|\:\:).*$/, "");
        var filter = /^.*(\.|\:|\:\:)/.test(selectorValue) ? selectorValue.replace(/^.*(\.|\:|\:\:)/, "") : "";
        var filterType = selectorValue.substr(tagName.length, selectorValue.length - tagName.length - filter.length);
        var result = [];
        if (this.isEmpty(selectorType)) {
            parent.querySelectorAll(tagName).forEach(function (tmpElement) {
                result.push(tmpElement);
            });
        } else if (selectorType === "." || selectorType === "#") {
            parent.querySelectorAll("*").forEach(function (tmpElement) {
                if (selectorType === ".") {
                    if (_this.hasClass(tmpElement, tagName)) {
                        result.push(tmpElement);
                    }
                } else if (selectorType === "#") {
                    if (tmpElement.id === tagName) {
                        result.push(tmpElement);
                    }
                }
            });
        }
        tagName = null;
        filter = null;
        filterType = null;
        return {
            elements: result || [],
            filter: filter,
            filterType: filterType
        };
    };
    ElmerDOM.prototype.getNextSilbingElement = function (dom, queryType, querySelector) {
        var nextElement = dom.nextElementSibling;
        if (nextElement) {
            if (this.matchQueryNode(nextElement, queryType, querySelector, 0)) {
                return nextElement;
            } else {
                return this.getNextSilbingElement(nextElement, queryType, querySelector);
            }
        }
        return null;
    };
    ElmerDOM.prototype.matchQueryNode = function (dom, queryType, querySelector, index) {
        if (index === void 0) {
            index = 0;
        }
        var tmpReg = /^([a-z0-9][a-z0-9\-_]*)/;
        var tmpMatch = querySelector.match(tmpReg);
        if (tmpMatch) {
            var checkValue = tmpMatch[1];
            if (this.isEmpty(queryType)) {
                return dom.tagName.toLowerCase() === checkValue.toLowerCase();
            } else if (queryType === ".") {
                return this.hasClass(dom, checkValue);
            } else if (queryType === "#") {
                return dom.id === checkValue;
            }
        }
        return false;
    };
    /**
     * 更新dom的className，此写法为兼容低版本不支持classList
     * @param dom 更新dom元素
     * @param className 样式名
     * @param isAdd 是否为添加，否则删除
     */
    ElmerDOM.prototype.updateDomClassName = function (dom, className, isAdd) {
        if (this.isDOM(dom) && !this.isEmpty(className)) {
            if (dom.classList) {
                if (isAdd) {
                    !dom.classList.contains(className) && dom.classList.add(className);
                } else {
                    dom.classList.contains(className) && dom.classList.remove(className);
                }
            } else {
                var tmpClassName = (dom.className || "").replace(/\s\s/g, " ");
                var tmpClassArr = tmpClassName.split(" ");
                var hasChanged = false;
                var tmpClassIndex = tmpClassArr.indexOf(className);
                if (isAdd) {
                    if (tmpClassIndex < 0) {
                        tmpClassArr.push(className);
                        hasChanged = true;
                    }
                } else {
                    if (tmpClassIndex > 0) {
                        var newClassArr = [];
                        for (var i = 0; i < tmpClassArr.length; i++) {
                            if (tmpClassArr[i] !== className && !this.isEmpty(tmpClassArr[i])) {
                                newClassArr.push(tmpClassArr[i]);
                            } else {
                                hasChanged = true;
                            }
                        }
                        tmpClassArr = newClassArr;
                    }
                }
                if (hasChanged) {
                    dom.className = tmpClassArr.join(" ");
                }
            }
        }
    };
    __decorate([(0, _injectable.autowired)(_ElmerDomEvent.ElmerDomEvent), __metadata("design:type", _ElmerDomEvent.ElmerDomEvent)], ElmerDOM.prototype, "eventObj", void 0);
    ElmerDOM = __decorate([(0, _index.injectable)("ElmerDOM"), __metadata("design:paramtypes", [])], ElmerDOM);
    return ElmerDOM;
}(_ElmerDomQuery.ElmerDomQuery);
exports.ElmerDOM = ElmerDOM;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.convertAnimationDataToCssProperty = exports.readWillChangeCssDefaultData = exports.calcPropertyConfigData = exports.calcPropertyData = exports.isCssEmpty = undefined;

var _elmerCommon = __webpack_require__(0);

var _ElmerColorMapping = __webpack_require__(51);

var _ElmerColorMapping2 = _interopRequireDefault(_ElmerColorMapping);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __spreadArrays = undefined && undefined.__spreadArrays || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
        s += arguments[i].length;
    }for (var r = Array(s), k = 0, i = 0; i < il; i++) {
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
            r[k] = a[j];
        }
    }return r;
};

var rgbToHex = function rgbToHex(r, g, b) {
    // tslint:disable-next-line: no-bitwise
    var hex = (r << 16 | g << 8 | b).toString(16);
    return "#" + new Array(Math.abs(hex.length - 7)).join("0") + hex;
};
var hexToRgb = function hexToRgb(hex) {
    var rgb = [];
    var hexStr = hex || "#fff";
    var alph = "";
    if (hexStr.length >= 9) {
        alph = hexStr.substr(7, 2);
    }
    if (hexStr.length < 6) {
        hexStr = "#" + hexStr.replace(/^#/, "").repeat(3);
        hexStr = hexStr.substr(0, 7);
    }
    for (var i = 1; i < 7; i += 2) {
        var mData = hexStr.slice(i, i + 2);
        rgb.push(parseInt(mData, 16));
    }
    if (!_elmerCommon.StaticCommon.isEmpty(alph)) {
        rgb.push(parseInt(alph, 16));
    }
    return rgb;
};
var gradient = function gradient(startColor, endColor, step) {
    // 将 hex 转换为rgb
    var sColor = hexToRgb(startColor),
        eColor = hexToRgb(endColor);
    // 计算R\G\B每一步的差值
    var rStep = (eColor[0] - sColor[0]) / step,
        gStep = (eColor[1] - sColor[1]) / step,
        bStep = (eColor[2] - sColor[2]) / step;
    var gradientColorArr = [];
    for (var i = 0; i < step; i++) {
        // 计算每一步的hex值
        gradientColorArr.push(rgbToHex(parseInt((rStep * i + sColor[0]).toString(), 10), parseInt((gStep * i + sColor[1]).toString(), 10), parseInt((bStep * i + sColor[2]).toString(), 10)));
    }
    return gradientColorArr;
};
var rgbToNums = function rgbToNums(rgbStr) {
    var rgbMatch = rgbStr.match(/^\s*rgb\(([0-9]*)\s*\,\s*([0-9]*)\s*\,\s*([0-9]*)\s*\)\s*/);
    var rgbaMatch = rgbStr.match(/^\s*rgba\(([0-9]*)\s*\,\s*([0-9]*)\s*\,\s*([0-9]*)\s*\,\s*([0-9]*)\s*\)\s*/);
    var result = [];
    if (rgbaMatch) {
        result.push(parseInt(rgbaMatch[1], 10));
        result.push(parseInt(rgbaMatch[2], 10));
        result.push(parseInt(rgbaMatch[3], 10));
        result.push(parseInt(rgbaMatch[4], 10));
    } else {
        if (rgbMatch) {
            result.push(parseInt(rgbMatch[1], 10));
            result.push(parseInt(rgbMatch[2], 10));
            result.push(parseInt(rgbMatch[3], 10));
        }
    }
    return result;
};
var getTransformValue = function getTransformValue(dom) {
    var result = "";
    if (dom) {
        result = dom.style.transform || dom.style.webkitTransform || dom.style["msTransform"] || dom.style["mozTransform"] || dom.style["oTransform"] || "";
    }
    return result;
};
var isCssEmpty = exports.isCssEmpty = function isCssEmpty(cssValue) {
    return cssValue === undefined || cssValue === null;
};
var calcPropertyData = exports.calcPropertyData = function calcPropertyData(resultData, key, value) {
    var dResult = {
        cssKey: key,
        unit: ""
    };
    if (/color$/i.test(key)) {
        dResult.unit = "";
        if (!_elmerCommon.StaticCommon.isEmpty(value) && _elmerCommon.StaticCommon.isString(value)) {
            var mapValue = value.replace(/^\s*/, "").replace(/\s*$/, "").replace(/\s{2,}/, " ");
            var mapList = mapValue.split(" ");
            if (mapList.length > 0) {
                if (!isCssEmpty(_ElmerColorMapping2.default[mapList[0]])) {
                    mapList[0] = _ElmerColorMapping2.default[mapList[0]];
                }
                dResult.value1 = /^#/.test(mapList[0]) ? hexToRgb(mapList[0]) : rgbToNums(mapList[0]);
                if (mapList.length > 1) {
                    if (!isCssEmpty(_ElmerColorMapping2.default[mapList[1]])) {
                        mapList[1] = _ElmerColorMapping2.default[mapList[1]];
                    }
                    dResult.value2 = /^#/.test(mapList[1]) ? hexToRgb(mapList[1]) : rgbToNums(mapList[1]);
                    if (mapList.length > 2) {
                        if (!isCssEmpty(_ElmerColorMapping2.default[mapList[2]])) {
                            mapList[2] = _ElmerColorMapping2.default[mapList[2]];
                        }
                        dResult.value3 = /^#/.test(mapList[2]) ? hexToRgb(mapList[2]) : rgbToNums(mapList[2]);
                        if (mapList.length > 3) {
                            if (!isCssEmpty(_ElmerColorMapping2.default[mapList[3]])) {
                                mapList[3] = _ElmerColorMapping2.default[mapList[3]];
                            }
                            dResult.value4 = /^#/.test(mapList[3]) ? hexToRgb(mapList[3]) : rgbToNums(mapList[3]);
                        }
                    }
                }
            }
        }
    } else {
        if (_elmerCommon.StaticCommon.isString(value)) {
            // opacity 是一个特殊的属性，当value为空时值是1 transform: translateX() scale()
            if (key !== "opacity") {
                var mapValue = value.replace(/^\s*/, "").replace(/\s*$/, "").replace(/\s{2,}/, " ");
                var mapList = /^transform/i.test(key) ? mapValue.split(",") : mapValue.split(" ");
                for (var i = 0; i < mapList.length; i++) {
                    var tmpValue = mapList[i];
                    var index = i + 1;
                    if (!isCssEmpty(tmpValue)) {
                        if (/^[\-]{0,1}[0-9\.]*$/.test(tmpValue)) {
                            dResult["value" + index] = _elmerCommon.StaticCommon.isNumeric(tmpValue) && _elmerCommon.StaticCommon.isString(tmpValue) ? parseFloat(tmpValue) : tmpValue;
                            dResult["value" + index + "Unit"] = "";
                        } else if (/^[\-]{0,1}[0-9\.]{1,}([a-z]{1,}|%)$/.test(tmpValue)) {
                            var tmpMatch = tmpValue.match(/^([\-]{0,1}[0-9]{1,})([a-z]{1,}|%)$/);
                            if (tmpMatch) {
                                dResult["value" + index] = _elmerCommon.StaticCommon.isNumeric(tmpMatch[1]) && _elmerCommon.StaticCommon.isString(tmpMatch[1]) ? parseFloat(tmpMatch[1]) : tmpMatch[1];
                                dResult["value" + index + "Unit"] = tmpMatch[2];
                            }
                        }
                    } else {
                        if (key === "opacity") {
                            dResult["value" + index] = 1;
                            dResult["value" + index + "Unit"] = "";
                        }
                    }
                    tmpValue = null;
                    index = null;
                }
            } else {
                if (/^[0-9\.]{1,}$/.test(value)) {
                    dResult.value1 = parseFloat(value);
                } else {
                    dResult.value1 = 1;
                }
            }
        } else {
            dResult.value1 = value;
        }
    }
    resultData[key] = dResult;
};
var calcPropertyConfigData = exports.calcPropertyConfigData = function calcPropertyConfigData(configData) {
    var result = {};
    if (configData) {
        // tslint:disable-next-line: forin
        for (var key in configData) {
            var cssValue = configData[key];
            calcPropertyData(result, key, cssValue);
        }
    }
    return result;
};
var readWillChangeCssDefaultData = exports.readWillChangeCssDefaultData = function readWillChangeCssDefaultData(dom, from, to) {
    var resultData = {};
    var fromObj = from || {};
    var toObj = to || {};
    if (dom) {
        var allKeys = __spreadArrays(Object.keys(fromObj), Object.keys(toObj));
        var transformValue_1;
        allKeys.map(function (toKey) {
            if (/^transform/i.test(toKey)) {
                var transKey = toKey.replace(/^transform/i, "");
                transKey = transKey.substr(0, 1).toLowerCase() + transKey.substr(1);
                if (transformValue_1 === undefined || transformValue_1 === null) {
                    transformValue_1 = getTransformValue(dom);
                }
                if (!_elmerCommon.StaticCommon.isEmpty(transformValue_1)) {
                    var valueReg = new RegExp(transKey + "s*\\(([0-9a-z,%.]*)\\)s*", "i");
                    var valueMatch = transformValue_1.match(valueReg);
                    if (valueMatch) {
                        calcPropertyData(resultData, toKey, valueMatch[1]);
                    } else {
                        resultData[toKey] = {
                            unit: "",
                            value1: 0
                        };
                    }
                }
            } else {
                var value = dom.style.getPropertyValue(toKey);
                if (toKey === "width") {
                    if (dom.clientWidth > 0) {
                        value = dom.clientWidth.toString();
                    }
                } else if (toKey === "height") {
                    if (dom.clientHeight > 0) {
                        value = dom.clientHeight.toString();
                    }
                }
                calcPropertyData(resultData, toKey, value);
            }
        });
        allKeys = null;
    }
    return resultData;
};
var getCssValue = function getCssValue(cssKey, value, defaultUnit, valueUnit) {
    if (!isCssEmpty(value)) {
        if (!/color$/i.test(cssKey)) {
            if (isCssEmpty(valueUnit)) {
                if (!isCssEmpty(defaultUnit)) {
                    return value.toString() + defaultUnit;
                } else {
                    return value.toString();
                }
            } else {
                return value.toString() + valueUnit;
            }
        } else {
            if (_elmerCommon.StaticCommon.isArray(value)) {
                if (value.length === 3) {
                    return rgbToHex(value[0], value[1], value[2]);
                } else if (value.length === 4) {
                    return "rgba(" + value.join(",") + ")";
                } else {
                    return value.join(" ");
                }
            } else {
                return value;
            }
        }
    } else {
        return value;
    }
};
var convertAnimationDataToCssProperty = exports.convertAnimationDataToCssProperty = function convertAnimationDataToCssProperty(animationData) {
    var cssResult = {};
    if (animationData) {
        var transformValues = [];
        // tslint:disable-next-line: forin
        for (var cssKey in animationData) {
            var cssData = animationData[cssKey];
            var cssValue = [];
            var cssValue1 = getCssValue(cssKey, cssData.value1, cssData.unit, cssData.value1Unit);
            var cssValue2 = getCssValue(cssKey, cssData.value2, cssData.unit, cssData.value2Unit);
            var cssValue3 = getCssValue(cssKey, cssData.value3, cssData.unit, cssData.value3Unit);
            var cssValue4 = getCssValue(cssKey, cssData.value4, cssData.unit, cssData.value4Unit);
            !isCssEmpty(cssValue1) && cssValue.push(cssValue1);
            !isCssEmpty(cssValue2) && cssValue.push(cssValue2);
            !isCssEmpty(cssValue3) && cssValue.push(cssValue3);
            !isCssEmpty(cssValue4) && cssValue.push(cssValue4);
            if (!/^transform/i.test(cssKey)) {
                cssResult[cssKey] = cssValue.join(" ");
                if (cssKey !== "opacity" && /^[0-9\.]{1,}$/.test(cssResult[cssKey])) {
                    // 特殊单位的css，目前只发现opacity是不需要设置单位的
                    cssResult[cssKey] = cssResult[cssKey] + "px";
                }
            } else if (/^transform/i.test(cssKey)) {
                var cssKeyValue = cssKey.replace(/^transform/i, "");
                cssKeyValue = cssKeyValue.substr(0, 1).toLowerCase() + cssKeyValue.substr(1);
                transformValues.push(cssKeyValue + "(" + cssValue.join(",") + ")");
            }
        }
        if (transformValues.length > 0) {
            cssResult["transform"] = transformValues.join(" ");
            cssResult["webkitTransform"] = transformValues.join(" ");
            cssResult["mozTransform"] = transformValues.join(" ");
            cssResult["msTransform"] = transformValues.join(" ");
            cssResult["oTransform"] = transformValues.join(" ");
        }
    }
    return cssResult;
};
exports.default = {
    converAnimationProperty: convertAnimationDataToCssProperty,
    converOption: calcPropertyConfigData,
    gradient: gradient,
    hexToRgb: hexToRgb,
    readWillChangeCssDefaultData: readWillChangeCssDefaultData,
    rgbToHex: rgbToHex
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    // Metadata Proposal
    // https://rbuckton.github.io/reflect-metadata/
    (function (factory) {
        var root = (typeof global === "undefined" ? "undefined" : _typeof(global)) === "object" ? global : (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" ? self : _typeof(this) === "object" ? this : Function("return this;")();
        var exporter = makeExporter(Reflect);
        if (typeof root.Reflect === "undefined") {
            root.Reflect = Reflect;
        } else {
            exporter = makeExporter(root.Reflect, exporter);
        }
        factory(exporter);
        function makeExporter(target, previous) {
            return function (key, value) {
                if (typeof target[key] !== "function") {
                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });
                }
                if (previous) previous(key, value);
            };
        }
    })(function (exporter) {
        var hasOwn = Object.prototype.hasOwnProperty;
        // feature test for Symbol support
        var supportsSymbol = typeof Symbol === "function";
        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
        var downLevel = !supportsCreate && !supportsProto;
        var HashMap = {
            // create an object in dictionary mode (a.k.a. "slow" mode in v8)
            create: supportsCreate ? function () {
                return MakeDictionary(Object.create(null));
            } : supportsProto ? function () {
                return MakeDictionary({ __proto__: null });
            } : function () {
                return MakeDictionary({});
            },
            has: downLevel ? function (map, key) {
                return hasOwn.call(map, key);
            } : function (map, key) {
                return key in map;
            },
            get: downLevel ? function (map, key) {
                return hasOwn.call(map, key) ? map[key] : undefined;
            } : function (map, key) {
                return map[key];
            }
        };
        // Load global or shim versions of Map, Set, and WeakMap
        var functionPrototype = Object.getPrototypeOf(Function);
        var usePolyfill = (typeof process === "undefined" ? "undefined" : _typeof(process)) === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
        var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
        var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
        var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
        // [[Metadata]] internal slot
        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
        var Metadata = new _WeakMap();
        /**
         * Applies a set of decorators to a property of a target object.
         * @param decorators An array of decorators.
         * @param target The target object.
         * @param propertyKey (Optional) The property key to decorate.
         * @param attributes (Optional) The property descriptor for the target key.
         * @remarks Decorators are applied in reverse order.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Example = Reflect.decorate(decoratorsArray, Example);
         *
         *     // property (on constructor)
         *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Object.defineProperty(Example, "staticMethod",
         *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
         *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
         *
         *     // method (on prototype)
         *     Object.defineProperty(Example.prototype, "method",
         *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
         *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
         *
         */
        function decorate(decorators, target, propertyKey, attributes) {
            if (!IsUndefined(propertyKey)) {
                if (!IsArray(decorators)) throw new TypeError();
                if (!IsObject(target)) throw new TypeError();
                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes)) throw new TypeError();
                if (IsNull(attributes)) attributes = undefined;
                propertyKey = ToPropertyKey(propertyKey);
                return DecorateProperty(decorators, target, propertyKey, attributes);
            } else {
                if (!IsArray(decorators)) throw new TypeError();
                if (!IsConstructor(target)) throw new TypeError();
                return DecorateConstructor(decorators, target);
            }
        }
        exporter("decorate", decorate);
        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
        /**
         * A default metadata decorator factory that can be used on a class, class member, or parameter.
         * @param metadataKey The key for the metadata entry.
         * @param metadataValue The value for the metadata entry.
         * @returns A decorator function.
         * @remarks
         * If `metadataKey` is already defined for the target and target key, the
         * metadataValue for that key will be overwritten.
         * @example
         *
         *     // constructor
         *     @Reflect.metadata(key, value)
         *     class Example {
         *     }
         *
         *     // property (on constructor, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticProperty;
         *     }
         *
         *     // property (on prototype, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         property;
         *     }
         *
         *     // method (on constructor)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticMethod() { }
         *     }
         *
         *     // method (on prototype)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         method() { }
         *     }
         *
         */
        function metadata(metadataKey, metadataValue) {
            function decorator(target, propertyKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey)) throw new TypeError();
                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
            }
            return decorator;
        }
        exporter("metadata", metadata);
        /**
         * Define a unique metadata entry on the target.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param metadataValue A value that contains attached metadata.
         * @param target The target object on which to define metadata.
         * @param propertyKey (Optional) The property key for the target.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Reflect.defineMetadata("custom:annotation", options, Example);
         *
         *     // property (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
         *
         *     // method (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
         *
         *     // decorator factory as metadata-producing annotation.
         *     function MyAnnotation(options): Decorator {
         *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
         *     }
         *
         */
        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        exporter("defineMetadata", defineMetadata);
        /**
         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasMetadata", hasMetadata);
        /**
         * Gets a value indicating whether the target object has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasOwnMetadata", hasOwnMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetMetadata(metadataKey, target, propertyKey);
        }
        exporter("getMetadata", getMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("getOwnMetadata", getOwnMetadata);
        /**
         * Gets the metadata keys defined on the target object or its prototype chain.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "method");
         *
         */
        function getMetadataKeys(target, propertyKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryMetadataKeys(target, propertyKey);
        }
        exporter("getMetadataKeys", getMetadataKeys);
        /**
         * Gets the unique metadata keys defined on the target object.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
         *
         */
        function getOwnMetadataKeys(target, propertyKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryOwnMetadataKeys(target, propertyKey);
        }
        exporter("getOwnMetadataKeys", getOwnMetadataKeys);
        /**
         * Deletes the metadata entry from the target object with the provided key.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata entry was found and deleted; otherwise, false.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.deleteMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function deleteMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target)) throw new TypeError();
            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);
            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/false);
            if (IsUndefined(metadataMap)) return false;
            if (!metadataMap.delete(metadataKey)) return false;
            if (metadataMap.size > 0) return true;
            var targetMetadata = Metadata.get(target);
            targetMetadata.delete(propertyKey);
            if (targetMetadata.size > 0) return true;
            Metadata.delete(target);
            return true;
        }
        exporter("deleteMetadata", deleteMetadata);
        function DecorateConstructor(decorators, target) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsConstructor(decorated)) throw new TypeError();
                    target = decorated;
                }
            }
            return target;
        }
        function DecorateProperty(decorators, target, propertyKey, descriptor) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target, propertyKey, descriptor);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsObject(decorated)) throw new TypeError();
                    descriptor = decorated;
                }
            }
            return descriptor;
        }
        function GetOrCreateMetadataMap(O, P, Create) {
            var targetMetadata = Metadata.get(O);
            if (IsUndefined(targetMetadata)) {
                if (!Create) return undefined;
                targetMetadata = new _Map();
                Metadata.set(O, targetMetadata);
            }
            var metadataMap = targetMetadata.get(P);
            if (IsUndefined(metadataMap)) {
                if (!Create) return undefined;
                metadataMap = new _Map();
                targetMetadata.set(P, metadataMap);
            }
            return metadataMap;
        }
        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
        function OrdinaryHasMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn) return true;
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent)) return OrdinaryHasMetadata(MetadataKey, parent, P);
            return false;
        }
        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/false);
            if (IsUndefined(metadataMap)) return false;
            return ToBoolean(metadataMap.has(MetadataKey));
        }
        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
        function OrdinaryGetMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn) return OrdinaryGetOwnMetadata(MetadataKey, O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent)) return OrdinaryGetMetadata(MetadataKey, parent, P);
            return undefined;
        }
        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/false);
            if (IsUndefined(metadataMap)) return undefined;
            return metadataMap.get(MetadataKey);
        }
        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/true);
            metadataMap.set(MetadataKey, MetadataValue);
        }
        // 3.1.6.1 OrdinaryMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
        function OrdinaryMetadataKeys(O, P) {
            var ownKeys = OrdinaryOwnMetadataKeys(O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (parent === null) return ownKeys;
            var parentKeys = OrdinaryMetadataKeys(parent, P);
            if (parentKeys.length <= 0) return ownKeys;
            if (ownKeys.length <= 0) return parentKeys;
            var set = new _Set();
            var keys = [];
            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
                var key = ownKeys_1[_i];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
                var key = parentKeys_1[_a];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            return keys;
        }
        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
        function OrdinaryOwnMetadataKeys(O, P) {
            var keys = [];
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/false);
            if (IsUndefined(metadataMap)) return keys;
            var keysObj = metadataMap.keys();
            var iterator = GetIterator(keysObj);
            var k = 0;
            while (true) {
                var next = IteratorStep(iterator);
                if (!next) {
                    keys.length = k;
                    return keys;
                }
                var nextValue = IteratorValue(next);
                try {
                    keys[k] = nextValue;
                } catch (e) {
                    try {
                        IteratorClose(iterator);
                    } finally {
                        throw e;
                    }
                }
                k++;
            }
        }
        // 6 ECMAScript Data Typ0es and Values
        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
        function Type(x) {
            if (x === null) return 1 /* Null */;
            switch (typeof x === "undefined" ? "undefined" : _typeof(x)) {
                case "undefined":
                    return 0 /* Undefined */;
                case "boolean":
                    return 2 /* Boolean */;
                case "string":
                    return 3 /* String */;
                case "symbol":
                    return 4 /* Symbol */;
                case "number":
                    return 5 /* Number */;
                case "object":
                    return x === null ? 1 /* Null */ : 6 /* Object */;
                default:
                    return 6 /* Object */;
            }
        }
        // 6.1.1 The Undefined Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
        function IsUndefined(x) {
            return x === undefined;
        }
        // 6.1.2 The Null Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
        function IsNull(x) {
            return x === null;
        }
        // 6.1.5 The Symbol Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
        function IsSymbol(x) {
            return (typeof x === "undefined" ? "undefined" : _typeof(x)) === "symbol";
        }
        // 6.1.7 The Object Type
        // https://tc39.github.io/ecma262/#sec-object-type
        function IsObject(x) {
            return (typeof x === "undefined" ? "undefined" : _typeof(x)) === "object" ? x !== null : typeof x === "function";
        }
        // 7.1 Type Conversion
        // https://tc39.github.io/ecma262/#sec-type-conversion
        // 7.1.1 ToPrimitive(input [, PreferredType])
        // https://tc39.github.io/ecma262/#sec-toprimitive
        function ToPrimitive(input, PreferredType) {
            switch (Type(input)) {
                case 0 /* Undefined */:
                    return input;
                case 1 /* Null */:
                    return input;
                case 2 /* Boolean */:
                    return input;
                case 3 /* String */:
                    return input;
                case 4 /* Symbol */:
                    return input;
                case 5 /* Number */:
                    return input;
            }
            var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
            if (exoticToPrim !== undefined) {
                var result = exoticToPrim.call(input, hint);
                if (IsObject(result)) throw new TypeError();
                return result;
            }
            return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
        }
        // 7.1.1.1 OrdinaryToPrimitive(O, hint)
        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
        function OrdinaryToPrimitive(O, hint) {
            if (hint === "string") {
                var toString_1 = O.toString;
                if (IsCallable(toString_1)) {
                    var result = toString_1.call(O);
                    if (!IsObject(result)) return result;
                }
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result)) return result;
                }
            } else {
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result)) return result;
                }
                var toString_2 = O.toString;
                if (IsCallable(toString_2)) {
                    var result = toString_2.call(O);
                    if (!IsObject(result)) return result;
                }
            }
            throw new TypeError();
        }
        // 7.1.2 ToBoolean(argument)
        // https://tc39.github.io/ecma262/2016/#sec-toboolean
        function ToBoolean(argument) {
            return !!argument;
        }
        // 7.1.12 ToString(argument)
        // https://tc39.github.io/ecma262/#sec-tostring
        function ToString(argument) {
            return "" + argument;
        }
        // 7.1.14 ToPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-topropertykey
        function ToPropertyKey(argument) {
            var key = ToPrimitive(argument, 3 /* String */);
            if (IsSymbol(key)) return key;
            return ToString(key);
        }
        // 7.2 Testing and Comparison Operations
        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
        // 7.2.2 IsArray(argument)
        // https://tc39.github.io/ecma262/#sec-isarray
        function IsArray(argument) {
            return Array.isArray ? Array.isArray(argument) : argument instanceof Object ? argument instanceof Array : Object.prototype.toString.call(argument) === "[object Array]";
        }
        // 7.2.3 IsCallable(argument)
        // https://tc39.github.io/ecma262/#sec-iscallable
        function IsCallable(argument) {
            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
            return typeof argument === "function";
        }
        // 7.2.4 IsConstructor(argument)
        // https://tc39.github.io/ecma262/#sec-isconstructor
        function IsConstructor(argument) {
            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
            return typeof argument === "function";
        }
        // 7.2.7 IsPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-ispropertykey
        function IsPropertyKey(argument) {
            switch (Type(argument)) {
                case 3 /* String */:
                    return true;
                case 4 /* Symbol */:
                    return true;
                default:
                    return false;
            }
        }
        // 7.3 Operations on Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-objects
        // 7.3.9 GetMethod(V, P)
        // https://tc39.github.io/ecma262/#sec-getmethod
        function GetMethod(V, P) {
            var func = V[P];
            if (func === undefined || func === null) return undefined;
            if (!IsCallable(func)) throw new TypeError();
            return func;
        }
        // 7.4 Operations on Iterator Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
        function GetIterator(obj) {
            var method = GetMethod(obj, iteratorSymbol);
            if (!IsCallable(method)) throw new TypeError(); // from Call
            var iterator = method.call(obj);
            if (!IsObject(iterator)) throw new TypeError();
            return iterator;
        }
        // 7.4.4 IteratorValue(iterResult)
        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
        function IteratorValue(iterResult) {
            return iterResult.value;
        }
        // 7.4.5 IteratorStep(iterator)
        // https://tc39.github.io/ecma262/#sec-iteratorstep
        function IteratorStep(iterator) {
            var result = iterator.next();
            return result.done ? false : result;
        }
        // 7.4.6 IteratorClose(iterator, completion)
        // https://tc39.github.io/ecma262/#sec-iteratorclose
        function IteratorClose(iterator) {
            var f = iterator["return"];
            if (f) f.call(iterator);
        }
        // 9.1 Ordinary Object Internal Methods and Internal Slots
        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
        // 9.1.1.1 OrdinaryGetPrototypeOf(O)
        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
        function OrdinaryGetPrototypeOf(O) {
            var proto = Object.getPrototypeOf(O);
            if (typeof O !== "function" || O === functionPrototype) return proto;
            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
            // Try to determine the superclass constructor. Compatible implementations
            // must either set __proto__ on a subclass constructor to the superclass constructor,
            // or ensure each class has a valid `constructor` property on its prototype that
            // points back to the constructor.
            // If this is not the same as Function.[[Prototype]], then this is definately inherited.
            // This is the case when in ES6 or when using __proto__ in a compatible browser.
            if (proto !== functionPrototype) return proto;
            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
            var prototype = O.prototype;
            var prototypeProto = prototype && Object.getPrototypeOf(prototype);
            if (prototypeProto == null || prototypeProto === Object.prototype) return proto;
            // If the constructor was not a function, then we cannot determine the heritage.
            var constructor = prototypeProto.constructor;
            if (typeof constructor !== "function") return proto;
            // If we have some kind of self-reference, then we cannot determine the heritage.
            if (constructor === O) return proto;
            // we have a pretty good guess at the heritage.
            return constructor;
        }
        // naive Map shim
        function CreateMapPolyfill() {
            var cacheSentinel = {};
            var arraySentinel = [];
            var MapIterator = function () {
                function MapIterator(keys, values, selector) {
                    this._index = 0;
                    this._keys = keys;
                    this._values = values;
                    this._selector = selector;
                }
                MapIterator.prototype["@@iterator"] = function () {
                    return this;
                };
                MapIterator.prototype[iteratorSymbol] = function () {
                    return this;
                };
                MapIterator.prototype.next = function () {
                    var index = this._index;
                    if (index >= 0 && index < this._keys.length) {
                        var result = this._selector(this._keys[index], this._values[index]);
                        if (index + 1 >= this._keys.length) {
                            this._index = -1;
                            this._keys = arraySentinel;
                            this._values = arraySentinel;
                        } else {
                            this._index++;
                        }
                        return { value: result, done: false };
                    }
                    return { value: undefined, done: true };
                };
                MapIterator.prototype.throw = function (error) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    throw error;
                };
                MapIterator.prototype.return = function (value) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    return { value: value, done: true };
                };
                return MapIterator;
            }();
            return function () {
                function Map() {
                    this._keys = [];
                    this._values = [];
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                }
                Object.defineProperty(Map.prototype, "size", {
                    get: function get() {
                        return this._keys.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                Map.prototype.has = function (key) {
                    return this._find(key, /*insert*/false) >= 0;
                };
                Map.prototype.get = function (key) {
                    var index = this._find(key, /*insert*/false);
                    return index >= 0 ? this._values[index] : undefined;
                };
                Map.prototype.set = function (key, value) {
                    var index = this._find(key, /*insert*/true);
                    this._values[index] = value;
                    return this;
                };
                Map.prototype.delete = function (key) {
                    var index = this._find(key, /*insert*/false);
                    if (index >= 0) {
                        var size = this._keys.length;
                        for (var i = index + 1; i < size; i++) {
                            this._keys[i - 1] = this._keys[i];
                            this._values[i - 1] = this._values[i];
                        }
                        this._keys.length--;
                        this._values.length--;
                        if (key === this._cacheKey) {
                            this._cacheKey = cacheSentinel;
                            this._cacheIndex = -2;
                        }
                        return true;
                    }
                    return false;
                };
                Map.prototype.clear = function () {
                    this._keys.length = 0;
                    this._values.length = 0;
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                };
                Map.prototype.keys = function () {
                    return new MapIterator(this._keys, this._values, getKey);
                };
                Map.prototype.values = function () {
                    return new MapIterator(this._keys, this._values, getValue);
                };
                Map.prototype.entries = function () {
                    return new MapIterator(this._keys, this._values, getEntry);
                };
                Map.prototype["@@iterator"] = function () {
                    return this.entries();
                };
                Map.prototype[iteratorSymbol] = function () {
                    return this.entries();
                };
                Map.prototype._find = function (key, insert) {
                    if (this._cacheKey !== key) {
                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
                    }
                    if (this._cacheIndex < 0 && insert) {
                        this._cacheIndex = this._keys.length;
                        this._keys.push(key);
                        this._values.push(undefined);
                    }
                    return this._cacheIndex;
                };
                return Map;
            }();
            function getKey(key, _) {
                return key;
            }
            function getValue(_, value) {
                return value;
            }
            function getEntry(key, value) {
                return [key, value];
            }
        }
        // naive Set shim
        function CreateSetPolyfill() {
            return function () {
                function Set() {
                    this._map = new _Map();
                }
                Object.defineProperty(Set.prototype, "size", {
                    get: function get() {
                        return this._map.size;
                    },
                    enumerable: true,
                    configurable: true
                });
                Set.prototype.has = function (value) {
                    return this._map.has(value);
                };
                Set.prototype.add = function (value) {
                    return this._map.set(value, value), this;
                };
                Set.prototype.delete = function (value) {
                    return this._map.delete(value);
                };
                Set.prototype.clear = function () {
                    this._map.clear();
                };
                Set.prototype.keys = function () {
                    return this._map.keys();
                };
                Set.prototype.values = function () {
                    return this._map.values();
                };
                Set.prototype.entries = function () {
                    return this._map.entries();
                };
                Set.prototype["@@iterator"] = function () {
                    return this.keys();
                };
                Set.prototype[iteratorSymbol] = function () {
                    return this.keys();
                };
                return Set;
            }();
        }
        // naive WeakMap shim
        function CreateWeakMapPolyfill() {
            var UUID_SIZE = 16;
            var keys = HashMap.create();
            var rootKey = CreateUniqueKey();
            return function () {
                function WeakMap() {
                    this._key = CreateUniqueKey();
                }
                WeakMap.prototype.has = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/false);
                    return table !== undefined ? HashMap.has(table, this._key) : false;
                };
                WeakMap.prototype.get = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/false);
                    return table !== undefined ? HashMap.get(table, this._key) : undefined;
                };
                WeakMap.prototype.set = function (target, value) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/true);
                    table[this._key] = value;
                    return this;
                };
                WeakMap.prototype.delete = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/false);
                    return table !== undefined ? delete table[this._key] : false;
                };
                WeakMap.prototype.clear = function () {
                    // NOTE: not a real clear, just makes the previous data unreachable
                    this._key = CreateUniqueKey();
                };
                return WeakMap;
            }();
            function CreateUniqueKey() {
                var key;
                do {
                    key = "@@WeakMap@@" + CreateUUID();
                } while (HashMap.has(keys, key));
                keys[key] = true;
                return key;
            }
            function GetOrCreateWeakMapTable(target, create) {
                if (!hasOwn.call(target, rootKey)) {
                    if (!create) return undefined;
                    Object.defineProperty(target, rootKey, { value: HashMap.create() });
                }
                return target[rootKey];
            }
            function FillRandomBytes(buffer, size) {
                for (var i = 0; i < size; ++i) {
                    buffer[i] = Math.random() * 0xff | 0;
                }return buffer;
            }
            function GenRandomBytes(size) {
                if (typeof Uint8Array === "function") {
                    if (typeof crypto !== "undefined") return crypto.getRandomValues(new Uint8Array(size));
                    if (typeof msCrypto !== "undefined") return msCrypto.getRandomValues(new Uint8Array(size));
                    return FillRandomBytes(new Uint8Array(size), size);
                }
                return FillRandomBytes(new Array(size), size);
            }
            function CreateUUID() {
                var data = GenRandomBytes(UUID_SIZE);
                // mark as random - RFC 4122 § 4.4
                data[6] = data[6] & 0x4f | 0x40;
                data[8] = data[8] & 0xbf | 0x80;
                var result = "";
                for (var offset = 0; offset < UUID_SIZE; ++offset) {
                    var byte = data[offset];
                    if (offset === 4 || offset === 6 || offset === 8) result += "-";
                    if (byte < 16) result += "0";
                    result += byte.toString(16).toLowerCase();
                }
                return result;
            }
        }
        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
        function MakeDictionary(obj) {
            obj.__ = undefined;
            delete obj.__;
            return obj;
        }
    });
})(Reflect || (Reflect = {}));
//# sourceMappingURL=Reflect.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(53), __webpack_require__(54)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RenderMiddleware = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _inject = __webpack_require__(7);

var _ARenderMiddleware = __webpack_require__(23);

var _PluginInjectModel = __webpack_require__(59);

var _PluginPropsChecking = __webpack_require__(60);

var _PluginRedux = __webpack_require__(61);

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var RenderMiddleware = /** @class */function (_super) {
    __extends(RenderMiddleware, _super);
    function RenderMiddleware() {
        var _this = _super.call(this) || this;
        _this.plugins = [];
        _this.PluginFactorys = [];
        _this.PluginFactorys = [_PluginPropsChecking.PluginPropsChecking, _PluginRedux.PluginRedux, _PluginInjectModel.PluginInjectModel];
        _this.initPlugins();
        return _this;
    }
    RenderMiddleware.prototype.beforeInit = function (options) {
        this.callPluginMethod("beforeInit", options);
    };
    RenderMiddleware.prototype.init = function (options) {
        this.callPluginMethod("init", options);
    };
    RenderMiddleware.prototype.didMount = function (options) {
        this.callPluginMethod("didMount", options);
    };
    RenderMiddleware.prototype.beforeRender = function (options) {
        this.callPluginMethod("beforeRender", options);
    };
    RenderMiddleware.prototype.afterRender = function (options) {
        this.callPluginMethod("afterRender", options);
    };
    RenderMiddleware.prototype.beforeUpdate = function (options) {
        this.callPluginMethod("beforeUpdate", options);
    };
    RenderMiddleware.prototype.afterUpdate = function (options) {
        this.callPluginMethod("afterUpdate", options);
    };
    RenderMiddleware.prototype.destroy = function (options) {
        this.callPluginMethod("destroy", options);
    };
    RenderMiddleware.prototype.renderDidMount = function () {
        this.callPluginMethod("renderDidMount", null);
    };
    RenderMiddleware.prototype.willReceiveProps = function (options) {
        this.callPluginMethod("willReceiveProps", options);
    };
    RenderMiddleware.prototype.initPlugins = function () {
        var _this = this;
        this.PluginFactorys.map(function (Plugin) {
            _this.plugins.push((0, _inject.autoInit)(Plugin));
        });
    };
    RenderMiddleware.prototype.callPluginMethod = function (methodName, options) {
        var _a;
        this.plugins.map(function (plugin) {
            try {
                typeof plugin[methodName] === "function" && plugin[methodName](options);
            } catch (err) {
                // tslint:disable-next-line: no-console
                console.error(err);
            }
        });
        if (["init", "inject", "didMount", "didUpdate", "willReceiveProps", "destroy"].indexOf(methodName) >= 0) {
            if (typeof (options === null || options === void 0 ? void 0 : options.componentObj["$useEffect"]) === "function") {
                var destoryFn = options === null || options === void 0 ? void 0 : options.componentObj["$useEffect"](methodName, {
                    props: options === null || options === void 0 ? void 0 : options.props,
                    state: (_a = options === null || options === void 0 ? void 0 : options.componentObj) === null || _a === void 0 ? void 0 : _a.state
                });
                if (methodName === "destroy") {
                    typeof destoryFn === "function" && destoryFn();
                }
            }
        }
    };
    RenderMiddleware = __decorate([(0, _inject.injectable)("RenderMiddleware"), __metadata("design:paramtypes", [])], RenderMiddleware);
    return RenderMiddleware;
}(_ARenderMiddleware.ARenderMiddleware);
exports.RenderMiddleware = RenderMiddleware;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var ARenderMiddleware = /** @class */function () {
    function ARenderMiddleware() {}
    return ARenderMiddleware;
}();
exports.ARenderMiddleware = ARenderMiddleware;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RenderMiddlewarePlugin = undefined;

var _ARenderMiddleware = __webpack_require__(23);

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

// tslint:disable: no-empty
var RenderMiddlewarePlugin = /** @class */function (_super) {
    __extends(RenderMiddlewarePlugin, _super);
    function RenderMiddlewarePlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RenderMiddlewarePlugin.prototype.beforeInit = function (options) {};
    RenderMiddlewarePlugin.prototype.init = function (options) {};
    RenderMiddlewarePlugin.prototype.beforeRender = function (options) {};
    RenderMiddlewarePlugin.prototype.afterRender = function (options) {};
    RenderMiddlewarePlugin.prototype.beforeUpdate = function (options) {};
    RenderMiddlewarePlugin.prototype.afterUpdate = function (options) {};
    RenderMiddlewarePlugin.prototype.destroy = function (options) {};
    RenderMiddlewarePlugin.prototype.didMount = function (options) {};
    RenderMiddlewarePlugin.prototype.willReceiveProps = function (options) {};
    return RenderMiddlewarePlugin;
}(_ARenderMiddleware.ARenderMiddleware);
exports.RenderMiddlewarePlugin = RenderMiddlewarePlugin;
// tslint:enable: no-empty

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(62));
__export(__webpack_require__(67));
__export(__webpack_require__(68));
__export(__webpack_require__(26));
__export(__webpack_require__(13));
__export(__webpack_require__(69));

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var ReduxGlobalStateKeys_1 = __webpack_require__(9);
exports.createReducer = function (getGlobalState, defineGlobalState, nodeKey, reducer) {
    var defineReducerObject = {};
    if (!getGlobalState(ReduxGlobalStateKeys_1.REDUX_REDUCER_DEFINE_STATE_KEY)) {
        defineGlobalState(ReduxGlobalStateKeys_1.REDUX_REDUCER_DEFINE_STATE_KEY, defineReducerObject);
    } else {
        defineReducerObject = getGlobalState(ReduxGlobalStateKeys_1.REDUX_REDUCER_DEFINE_STATE_KEY);
    }
    defineReducerObject[nodeKey] = reducer;
};
/**
 * This function already use in reduxController, don't need user call it agin
 * @param constroller [ReduxController]
 */
exports.attachReducerToController = function (controller) {
    var reducerObj = controller.getGlobalState(ReduxGlobalStateKeys_1.REDUX_REDUCER_DEFINE_STATE_KEY) || {};
    if (reducerObj) {
        Object.keys(reducerObj).map(function (nodeKey) {
            controller.setValue(controller.reducers, nodeKey, reducerObj[nodeKey]);
        });
    }
    return reducerObj;
};
exports.defineStateOperateAction = function (controller, getGlobalState, defineGlobalState) {
    if (controller) {
        controller.getGlobalState = getGlobalState;
        controller.defineGlobalState = defineGlobalState;
    }
};
exports.defineReducer = function (controller, nodeKey, reducer) {
    exports.createReducer(controller.getGlobalState, controller.defineGlobalState, nodeKey, reducer);
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PropTypes = exports.propTypes = undefined;

var _paramChecker = __webpack_require__(80);

var _typeChecker = __webpack_require__(28);

// tslint:disable:variable-name
var string = (0, _typeChecker.createTypeChecker)(_typeChecker.EnumCheckerTypes.string);
var number = (0, _typeChecker.createTypeChecker)(_typeChecker.EnumCheckerTypes.number);
var array = (0, _typeChecker.createTypeChecker)(_typeChecker.EnumCheckerTypes.array);
var boolean = (0, _typeChecker.createTypeChecker)(_typeChecker.EnumCheckerTypes.boolean);
var object = (0, _typeChecker.createTypeChecker)(_typeChecker.EnumCheckerTypes.object);
var func = (0, _typeChecker.createTypeChecker)(_typeChecker.EnumCheckerTypes.func);
var any = (0, _typeChecker.createTypeChecker)(_typeChecker.EnumCheckerTypes.any);
var date = (0, _typeChecker.createTypeChecker)(_typeChecker.EnumCheckerTypes.date);
var bool = (0, _typeChecker.createTypeChecker)(_typeChecker.EnumCheckerTypes.bool);
var oneOf = function oneOf(types) {
    return (0, _paramChecker.createParamChecker)(_typeChecker.EnumCheckerTypes.oneOf, types);
};
var oneValueOf = function oneValueOf(enumValues) {
    return (0, _paramChecker.createParamChecker)(_typeChecker.EnumCheckerTypes.oneValueOf, enumValues);
};
var enumValueOf = function enumValueOf(enumValue) {
    return (0, _paramChecker.createParamChecker)(_typeChecker.EnumCheckerTypes.oneEnumValueOf, enumValue);
};
var propTypes = exports.propTypes = {
    any: any,
    array: array,
    bool: bool,
    boolean: boolean,
    date: date,
    enumValueOf: enumValueOf,
    func: func,
    number: number,
    object: object,
    oneOf: oneOf,
    oneValueOf: oneValueOf,
    string: string
};
var PropTypes = exports.PropTypes = propTypes;
// tslint:enable:variable-name

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createTypeChecker = exports.EnumCheckerTypes = undefined;

var _dataTypeValidators = __webpack_require__(29);

var EnumCheckerTypes = exports.EnumCheckerTypes = undefined;
(function (EnumCheckerTypes) {
    EnumCheckerTypes["string"] = "string";
    EnumCheckerTypes["number"] = "number";
    EnumCheckerTypes["array"] = "array";
    EnumCheckerTypes["any"] = "any";
    EnumCheckerTypes["boolean"] = "boolean";
    EnumCheckerTypes["bool"] = "bool";
    EnumCheckerTypes["date"] = "date";
    EnumCheckerTypes["func"] = "func";
    EnumCheckerTypes["object"] = "object";
    EnumCheckerTypes["oneOf"] = "oneOf";
    EnumCheckerTypes["oneValueOf"] = "oneValueOf";
    EnumCheckerTypes["oneEnumValueOf"] = "oneEnumValueOf";
})(EnumCheckerTypes || (exports.EnumCheckerTypes = EnumCheckerTypes = {}));
function createRequiredChecker(type, validate) {
    // tslint:disable-next-line:only-arrow-functions
    var factory = function factory(value, options) {
        return validate(value, options);
    };
    factory.isRequired = function (value, options) {
        if (value === undefined || value === null) {
            var errMsg = "属性值不能为undefined或null";
            options && typeof options.error === "function" && options.error(errMsg);
            return false;
        }
        return factory(value, options);
    }.bind({ factory: factory });
    factory.type = type;
    factory.isRequired.type = type;
    return factory;
}
function createDataTypeChecker(type) {
    function onError(msg, fn) {
        if (fn && typeof fn === "function") {
            fn(msg);
        } else {
            // tslint:disable-next-line:no-console
            console.error(msg);
        }
    }
    function dataTypeChecker(value, options) {
        var validate = null;
        var checkType = this.type;
        switch (checkType) {
            case EnumCheckerTypes.string:
                {
                    validate = _dataTypeValidators.stringValidator;
                    break;
                }
            case EnumCheckerTypes.number:
                {
                    validate = _dataTypeValidators.numberValidator;
                    break;
                }
            case EnumCheckerTypes.boolean:
                {
                    validate = _dataTypeValidators.booleanValidator;
                    break;
                }
            case EnumCheckerTypes.bool:
                {
                    validate = _dataTypeValidators.booleanValidator;
                    break;
                }
            case EnumCheckerTypes.array:
                {
                    validate = _dataTypeValidators.arrayValidator;
                    break;
                }
            case EnumCheckerTypes.object:
                {
                    validate = _dataTypeValidators.objectValidator;
                    break;
                }
            case EnumCheckerTypes.func:
                {
                    validate = _dataTypeValidators.funcValidator;
                    break;
                }
            case EnumCheckerTypes.any:
                {
                    validate = _dataTypeValidators.anyValidator;
                    break;
                }
            case EnumCheckerTypes.date:
                {
                    validate = _dataTypeValidators.dateValidator;
                    break;
                }
        }
        if (typeof validate === "function") {
            if (!validate(value, options) && value !== undefined && value !== null) {
                var lType = Object.prototype.toString.call(value);
                !options.silence && onError("\u53C2\u6570\u7C7B\u578B\u4E0D\u5339\u914D,\u5B9A\u4E49\u7C7B\u578B[" + checkType + "]\uFF0C\u4F20\u5165\u503C\u7C7B\u578B" + lType + "\u3002" + options, options ? options.error : null);
                return false;
            }
        } else {
            !options.silence && onError(checkType + "未定义validate方法。", options ? options.error : null);
            return false;
        }
        return true;
    }
    return createRequiredChecker(type, dataTypeChecker.bind({ type: type }));
}
var createTypeChecker = exports.createTypeChecker = createDataTypeChecker;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var getDataType = function getDataType(value) {
    return Object.prototype.toString.call(value);
};
var anyValidator = exports.anyValidator = function anyValidator() {
    return true;
};
var stringValidator = exports.stringValidator = function stringValidator(value, options) {
    return typeof value === "string";
};
var arrayValidator = exports.arrayValidator = function arrayValidator(value) {
    return getDataType(value) === "[object Array]";
};
var numberValidator = exports.numberValidator = function numberValidator(value) {
    return getDataType(value) === "[object Number]";
};
var booleanValidator = exports.booleanValidator = function booleanValidator(value) {
    return getDataType(value) === "[object Boolean]";
};
var objectValidator = exports.objectValidator = function objectValidator(value) {
    return getDataType(value) === "[object Object]";
};
var funcValidator = exports.funcValidator = function funcValidator(value) {
    return getDataType(value) === "[object Function]";
};
var dateValidator = exports.dateValidator = function dateValidator(value) {
    return getDataType(value) === "[object Date]";
};
var oneOfValidator = exports.oneOfValidator = function oneOfValidator(value, typeCheckers, options) {
    if (getDataType(typeCheckers) === "[object Array]") {
        // tslint:disable-next-line:forin
        for (var tmpKey = 0; tmpKey < typeCheckers.length; tmpKey++) {
            var tmpChecker = typeCheckers[tmpKey];
            if (tmpChecker(value, options)) {
                return true;
            }
        }
    }
    return false;
};
var oneValueOfValidator = exports.oneValueOfValidator = function oneValueOfValidator(value, checkEnumValues, options) {
    return checkEnumValues && checkEnumValues.length > 0 ? checkEnumValues.indexOf(value) >= 0 : false;
};
var oneEnumValueOfValidator = exports.oneEnumValueOfValidator = function oneEnumValueOfValidator(value, checkEnumObj) {
    if (getDataType(checkEnumObj) === "[object Object]") {
        for (var key in checkEnumObj) {
            if (checkEnumObj[key] === value) {
                return true;
            }
        }
    }
    return false;
};

/***/ }),
/* 30 */,
/* 31 */,
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _ElmerUI = __webpack_require__(33);

__webpack_require__(74);

__webpack_require__(83);

var ui = new _ElmerUI.ElmerUI();
ui.onReady(function () {
    var exampleApp = {
        title: "for new framework testting",
        version: "20201205",
        state: {
            count: 0,
            testData: [],
            visible: false
        },
        onClick: function onClick(evt) {
            evt.cancelBubble = true;
            this.setState({
                count: this.state.count + 1
            });
        },
        onPress: function onPress(evt) {
            console.log("onMouseDown", evt);
        },
        onVisibleClick: function onVisibleClick() {
            var myVisible = !this.state.visible;
            this.setState({
                visible: myVisible
            });
        },
        onInput: function onInput(evt) {
            console.log(evt);
        },
        onButtonClick: function onButtonClick() {
            var oldData = JSON.parse(JSON.stringify(exampleApp.state.testData));
            oldData.push({
                title: "demo" + oldData.length,
                value: oldData.length
            });
            this.setState({
                testData: oldData
            });
        },
        // tslint:disable-next-line: object-literal-sort-keys
        render: function render() {
            return "<eui-redux-provider>\n    <div>\n        <li>\n            <div et:click=\"onClick\">\n                <span data-value='app' data-label='for test'>ClickEventA{{version}}</span>\n            </div>\n        </li>\n        <li><span>B{{title}}</span></li>\n        <label id=\"testDom\" data-value=\"haha\" if=\"{{state.visible}}\">测试显示隐藏</label>\n        <li><span>E{{version}}</span></li>\n        <button et:click=\"onButtonClick\" id=\"keyTest\">Update State{{state.count}}</button>\n        <forEach data=\"state.testData\" item=\"demo\" index=\"mapKey\">\n            <input key=\"App_{{mapKey}}\" type=\"text\" value=\"{{demo.title}}\"/>\n        </forEach>\n        <button et:click=\"onVisibleClick\" style=\"display:block;\">{{state.visible ? '显示' : '隐藏'}}</button>\n        <textarea  et:input=\"onInput\" style=\"display:block;\">测试</textarea>\n        <div>\n            <eui-demo-app time=\"{{state.count}}\">\n                <div><button>Dingo</button></div>\n            </eui-demo-app>\n        </div>\n        <header>Hello world</header>\n        <div data-type=\"html\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"48px\" height=\"60px\" viewBox=\"0 0 24 30\" style=\"enable-background:new 0 0 50 50\" xml:space=\"preserve\">\n                <rect x=\"0\" y=\"9.22656\" width=\"4\" height=\"12.5469\" fill=\"#FF6700\">\n                    <animate attributeName=\"height\" attributeType=\"XML\" values=\"5;21;5\" begin=\"0s\" dur=\"0.6s\" repeatCount=\"indefinite\"></animate>\n                    <animate attributeName=\"y\" attributeType=\"XML\" values=\"13; 5; 13\" begin=\"0s\" dur=\"0.6s\" repeatCount=\"indefinite\"></animate>\n                </rect>\n                <rect x=\"10\" y=\"5.22656\" width=\"4\" height=\"20.5469\" fill=\"#FF6700\">\n                    <animate attributeName=\"height\" attributeType=\"XML\" values=\"5;21;5\" begin=\"0.15s\" dur=\"0.6s\" repeatCount=\"indefinite\"></animate>\n                    <animate attributeName=\"y\" attributeType=\"XML\" values=\"13; 5; 13\" begin=\"0.15s\" dur=\"0.6s\" repeatCount=\"indefinite\"></animate>\n                </rect>\n                <rect x=\"20\" y=\"8.77344\" width=\"4\" height=\"13.4531\" fill=\"#FF6700\">\n                    <animate attributeName=\"height\" attributeType=\"XML\" values=\"5;21;5\" begin=\"0.3s\" dur=\"0.6s\" repeatCount=\"indefinite\"></animate>\n                    <animate attributeName=\"y\" attributeType=\"XML\" values=\"13; 5; 13\" begin=\"0.3s\" dur=\"0.6s\" repeatCount=\"indefinite\"></animate>\n                </rect>\n            </svg>\n        </div>\n    </div>\n</eui-redux-provider>";
        }
    };
    console.time("DemoApp");
    console.timeLog("DemoApp", "start render");
    ui.render(document.getElementById("app"), exampleApp);
    console.timeEnd("DemoApp");
});

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ElmerUI = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _elmerCommon = __webpack_require__(0);

var _elmerVirtualDom = __webpack_require__(16);

var _elmerWorker = __webpack_require__(46);

var _Component = __webpack_require__(5);

var _ElmerDom = __webpack_require__(19);

var _ElmerEvent = __webpack_require__(57);

var _EventInWorker = __webpack_require__(58);

var _EventInWorker2 = _interopRequireDefault(_EventInWorker);

var _injectable = __webpack_require__(1);

var _RenderMiddleware = __webpack_require__(22);

__webpack_require__(70);

var _ElmerRender = __webpack_require__(71);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// tslint:disable-next-line: ordered-imports

var ElmerUI = /** @class */function (_super) {
    __extends(ElmerUI, _super);
    function ElmerUI() {
        var _this = _super.call(this) || this;
        _this.eventObj = new _ElmerEvent.ElmerEvent(_this.worker);
        _this.missionId = "__RenderMission__" + _this.guid();
        return _this;
    }
    ElmerUI.prototype.onReady = function (fn) {
        this.$.addEvent(window, "load", fn);
    };
    ElmerUI.prototype.render = function (target, rootApp, options) {
        var _this = this;
        // elmer
        var entryComponent = rootApp || {};
        var ignorePropKeys = ["selector", "template", "model", "service", "i18n", "connect", "setData", "setState", "render", "$after", "$onPropsChanged", "$afterVirtualRender", "$beforeVirtualRender", "$init", "$inject", "$before", "$resize", "$dispose"];
        var defaultProps = entryComponent.props || {};
        if (typeof entryComponent.$render !== "function" && typeof entryComponent.render !== "function") {
            entryComponent.$render = function () {
                return options ? options.htmlCode : "<span>Missing render lifecycle method in rootApp object.</span>";
            };
        }
        entryComponent.selector = "RootNode";
        this.extend(entryComponent, _Component.Component.prototype, true, ignorePropKeys);
        this.defineReadOnlyProperty(entryComponent, "props", defaultProps);
        var renderObj = new _ElmerRender.ElmerRender({
            children: [],
            component: entryComponent,
            componentFactory: null,
            container: target,
            event: this.eventObj,
            missionId: this.missionId,
            nodePath: "rootNode",
            path: [0],
            renderOptions: options,
            worker: this.worker
        });
        renderObj.render({
            firstRender: true
        }).then(function () {
            _this.middleware.renderDidMount();
        }).catch(function (err) {
            typeof entryComponent["$error"] === "function" && entryComponent["$error"](err);
        });
        return renderObj;
    };
    ElmerUI.prototype.dispose = function () {
        this.eventObj.dispose();
    };
    __decorate([(0, _injectable.autowired)(_ElmerDom.ElmerDOM), __metadata("design:type", _ElmerDom.ElmerDOM)], ElmerUI.prototype, "$", void 0);
    __decorate([(0, _injectable.autowired)(_elmerWorker.ElmerWorker, "ElmerWorker", {
        elmerEvent: new _EventInWorker2.default(),
        htmlParse: new _elmerVirtualDom.HtmlParse()
    }), __metadata("design:type", _elmerWorker.ElmerWorker)], ElmerUI.prototype, "worker", void 0);
    __decorate([(0, _injectable.autowired)(_RenderMiddleware.RenderMiddleware), __metadata("design:type", _RenderMiddleware.RenderMiddleware)], ElmerUI.prototype, "middleware", void 0);
    return ElmerUI;
}(_elmerCommon.Common);
exports.ElmerUI = ElmerUI;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var StaticCommon_1 = __webpack_require__(10);
var Common = /** @class */function () {
    function Common() {}
    Common.prototype.getType = function (val) {
        return Object.prototype.toString.call(val);
    };
    Common.prototype.isString = function (val) {
        return this.getType(val) === "[object String]";
    };
    Common.prototype.isObject = function (val) {
        return this.getType(val) === "[object Object]";
    };
    Common.prototype.isArray = function (val) {
        return this.getType(val) === "[object Array]";
    };
    Common.prototype.isNumeric = function (val) {
        return !isNaN(val);
    };
    Common.prototype.isDOM = function (val) {
        return (/^(\[object\s*)HTML([a-zA-Z]*)(Element\])$/.test(this.getType(val))
        );
    };
    Common.prototype.isSVGDOM = function (val) {
        return (/^\[object\sSVG([a-zA-Z]*)Element\]$/.test(this.getType(val))
        );
    };
    Common.prototype.isFunction = function (val) {
        return this.getType(val) === "[object Function]";
    };
    Common.prototype.isNodeList = function (val) {
        return this.getType(val) === "[object NodeList]";
    };
    Common.prototype.isRegExp = function (val) {
        return this.getType(val) === "[object RegExp]";
    };
    Common.prototype.isEmpty = function (val) {
        return val === undefined || val === null || this.isString(val) && val.length <= 0;
    };
    // tslint:disable-next-line:no-shadowed-variable
    Common.prototype.isEqual = function (a, b) {
        if (a === b) {
            return a !== 0 || 1 / a === 1 / b;
        }
        if (a == null || b == null) {
            return a === b;
        }
        var classNameA = this.getType(a),
            classNameB = this.getType(b);
        if (classNameA !== classNameB) {
            return false;
        } else {
            switch (classNameA) {
                case "[object RegExp]":
                case "[object String]":
                    return "" + a === "" + b;
                case "[object Number]":
                    if (+a !== +a) {
                        return +b !== +b;
                    }
                    return +a === 0 ? 1 / +a === 1 / b : +a === +b;
                case "[object Date]":
                case "[object Boolean]":
                    return +a === +b;
            }
            if (classNameA === "[object Object]") {
                var propsA = Object.getOwnPropertyNames(a),
                    propsB = Object.getOwnPropertyNames(b);
                if (propsA.length !== propsB.length) {
                    return false;
                } else {
                    for (var i = 0; i < propsA.length; i++) {
                        var propName = propsA[i];
                        if (a[propName] !== b[propName]) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            if (classNameA === "[object Array]") {
                return a.toString() === b.toString();
            }
        }
    };
    Common.prototype.sleepCall = function (fn, timeout, obj) {
        if (typeof fn === "function") {
            // let handler: number | null | undefined = null;
            var tim = timeout || 200;
            var sleep = function sleep() {
                if (obj) {
                    fn.call(obj);
                } else {
                    fn();
                }
                // handler !== null && clearTimeout(handler);
            };
            setTimeout(sleep, tim);
        }
    };
    Common.prototype.getValue = function (data, key, defaultValue) {
        return StaticCommon_1.StaticCommon.getValue(data, key, defaultValue);
    };
    /**
     * 给指定对象设置属性值
     * @param data 设置属性值对象
     * @param key 设置属性key,属性key有多层可使用.区分
     * @param value 设置属性值
     * @param fn 自定义设置值回调
     */
    Common.prototype.setValue = function (data, key, value, fn) {
        return StaticCommon_1.StaticCommon.setValue(data, key, value, fn);
    };
    /**
     * 获取随机ID
     */
    Common.prototype.getRandomID = function () {
        var now = new Date();
        var year = now.getFullYear().toString(),
            month = now.getMonth() + 1 < 10 ? "0" + (now.getMonth() + 1).toString() : (now.getMonth() + 1).toString(),
            date = now.getDate() < 10 ? "0" + now.getDate().toString() : now.getDate().toString(),
            hour = now.getHours() < 10 ? ["0", now.getHours()].join("") : now.getHours().toString(),
            minute = now.getMinutes() < 10 ? ["0", now.getMinutes()].join("") : now.getMinutes().toString(),
            second = now.getSeconds() < 10 ? ["0", now.getSeconds()].join("") : now.getSeconds().toString(),
            reSecond = now.getMilliseconds();
        var randValue = parseInt((Math.random() * 9999 + 1000).toString(), 10);
        return [year, month, date, hour, minute, second, reSecond, randValue].join("");
    };
    /**
     * 字符串有连接符-将自动转换成已首字母大写
     * @param val 转换文本
     * @param firstUpperCase 是否大写
     */
    Common.prototype.toHumpStr = function (val, firstUpperCase) {
        if (!this.isEmpty(val)) {
            var vStr = val.replace(/(^\-)|(\-$)/, "");
            var vArr = vStr.split("-");
            for (var i = 0; i < vArr.length; i++) {
                if (i === 0 && firstUpperCase || i > 0) {
                    vArr[i] = vArr[i].substr(0, 1).toUpperCase() + vArr[i].substr(1);
                }
            }
            return vArr.join("");
        } else {
            return val;
        }
    };
    Common.prototype.humpToStr = function (val) {
        if (!this.isEmpty(val)) {
            var vStr = val.substr(0, 1).toLowerCase() + val.substr(1);
            var rStr = vStr.replace(/([A-Z])/g, function ($1) {
                return "-" + $1.toLowerCase();
            });
            return rStr;
        }
        return val;
    };
    Common.prototype.extend = function (desc, src, setReadOnly, ignoreKeys) {
        if (!setReadOnly) {
            if (this.isObject(desc) && this.isObject(src)) {
                if (Object.assign) {
                    Object.assign(desc, src);
                } else {
                    // tslint:disable-next-line:forin
                    for (var key in src) {
                        if (!ignoreKeys || ignoreKeys.indexOf(key) < 0) {
                            desc[key] = src[key];
                        }
                    }
                }
            }
        } else {
            if (this.isObject(desc) && this.isObject(src)) {
                // tslint:disable-next-line:forin
                for (var key in src) {
                    if (!ignoreKeys || ignoreKeys.indexOf(key) < 0) {
                        // 已经存在的属性需要使用delete删除，防止redine error问题
                        if (desc.hasOwnProperty(key)) {
                            delete desc[key];
                        }
                        this.defineReadOnlyProperty(desc, key, src[key]);
                    }
                }
            }
        }
        return desc;
    };
    Common.prototype.merge = function (obj1, obj2) {
        var result = {};
        if (obj1 && !obj2) {
            result = obj1;
        } else if (!obj1 && obj2) {
            result = obj2;
        } else if (obj1 && obj2) {
            if (this.isObject(obj1)) {
                // tslint:disable-next-line:forin
                for (var key in obj1) {
                    result[key] = obj1[key];
                }
            }
            if (this.isObject(obj2)) {
                for (var sKey in obj2) {
                    if (!result.hasOwnProperty(sKey)) {
                        result[sKey] = obj2[sKey];
                    }
                }
            }
        }
        return result;
    };
    /**
     * 将字符串转转换成对应的数据类型，遇到true|false转换成bool类型，遇到数字文本转换成数字类型数据
     * @param data 要转换的数据
     */
    Common.prototype.val = function (data) {
        if (this.isString(data)) {
            if (!isNaN(data)) {
                return data.indexOf(".") >= 0 ? parseFloat(data) : parseInt(data, 10);
            } else {
                return (/^(true|false)$/.test(data) ? Boolean(data) : data
                );
            }
        } else {
            return data;
        }
    };
    Common.prototype.defineReadOnlyProperty = function (obj, propertyKey, propertyValue) {
        (function (paramObj, paramPropertyKey, paramPropertyValue) {
            paramObj && Object.defineProperty(paramObj, paramPropertyKey, {
                configurable: true,
                enumerable: true,
                value: paramPropertyValue,
                writable: false
            });
        })(obj, propertyKey, propertyValue);
    };
    Common.prototype.launchFullscreen = function (element) {
        if (element.requestFullscreen) {
            // tslint:disable-next-line: no-floating-promises
            element.requestFullscreen();
        } else if (element["mozRequestFullScreen"]) {
            element["mozRequestFullScreen"]();
        } else if (element["webkitRequestFullscreen"]) {
            element["webkitRequestFullscreen"]();
        } else if (element["msRequestFullscreen"]) {
            element["msRequestFullscreen"]();
        }
    };
    Common.prototype.exitFullscreen = function () {
        if (document.exitFullscreen) {
            // tslint:disable-next-line: no-floating-promises
            document.exitFullscreen();
        } else if (document["mozCancelFullScreen"]) {
            document["mozCancelFullScreen"]();
        } else if (document["webkitExitFullscreen"]) {
            document["webkitExitFullscreen"]();
        }
    };
    Common.prototype.isFullScreen = function () {
        return document["isFullScreen"] || document["mozIsFullScreen"] || document["webkitIsFullScreen"];
    };
    Common.prototype.guid = function () {
        var S4 = function S4() {
            // tslint:disable-next-line: no-bitwise
            return ((1 + Math.random()) * 0x10000 | 0).toString(16).substr(1);
        };
        return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4();
    };
    Common.prototype.getUri = function () {
        return StaticCommon_1.StaticCommon.getUri();
    };
    Common.prototype.getQuery = function (key) {
        return StaticCommon_1.StaticCommon.getQuery(key);
    };
    return Common;
}();
exports.Common = Common;
//# sourceMappingURL=Common.js.map

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var Canvas = /** @class */function () {
    function Canvas() {
        this.doRemoveAnimationList = [];
        // tslint:disable-next-line: variable-name
        var _this = this;
        // tslint:disable: only-arrow-functions
        this.requestAnimationFrame = window.requestAnimationFrame || window["webkitRequestAnimationFrame"] || window["mozRequestAnimationFrame"] || function (callback) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16.7 - (currTime - _this.lastTime));
            var id = window.setTimeout(function () {
                callback(currTime + timeToCall);
            }, timeToCall);
            _this.lastTime = currTime + timeToCall;
            return id;
        };
        this.cancelAnimationFrame = window.cancelAnimationFrame || window["webkitCancelAnimationFrame"] || window["mozCancelAnimationFrame"] || function (id) {
            clearTimeout(id);
        };
        // tslint:enable: only-arrow-functions
    }
    Canvas.prototype.startAnimation = function (callBack, targetObj) {
        var self = this;
        // tslint:disable-next-line: only-arrow-functions
        return function (fn, obj) {
            var handler;
            // tslint:disable-next-line: only-arrow-functions
            var animation = function animation() {
                var mIndex = self.doRemoveAnimationList.indexOf(handler);
                if (mIndex < 0) {
                    fn.apply(obj, arguments);
                    return self.requestAnimationFrame.call(window, animation);
                } else {
                    self.doRemoveAnimationList.splice(mIndex, 1);
                }
                mIndex = null;
            };
            handler = self.requestAnimationFrame.call(window, animation);
            return handler;
        }(callBack, targetObj);
    };
    Canvas.prototype.stopAnimation = function (handler) {
        this.cancelAnimationFrame.call(window, handler);
        this.doRemoveAnimationList.push(handler);
    };
    return Canvas;
}();
exports.Canvas = Canvas;
//# sourceMappingURL=Canvas.js.map

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// tslint:disable: jsdoc-format
/**
 * currentTime : 当前时间
 * beginValue  : 开始值
 * changeValue : 变化值
 * duration    : 动画过程时间
**/
// tslint:enable: jsdoc-format

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: object-literal-sort-keys no-parameter-reassignment
exports.MathAnimationApi = {
    /**
     * 匀速变化
     * @param currentTime [number] 当前时间
     * @param beginning [number] 开始变化的值
     * @param changeValue [number] 变化的值
     * @param duration [number] 动画总的时间
     * @returns number
     */
    Linear: function Linear(currentTime, beginValue, changeValue, duration) {
        return changeValue * currentTime / duration + beginValue;
    },
    /**
     * 二次平方缓动
     */
    Quad: {
        /**
         * 二次平方缓动easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            currentTime /= duration;
            return changeValue * Math.pow(currentTime, 2) + beginValue;
        },
        /**
         * 二次平方缓动easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            currentTime /= duration;
            return -changeValue * currentTime * (currentTime - 2) + beginValue;
        },
        /**
         * 二次平方缓动easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            if (currentTime / 2 < 1) {
                return changeValue / 2 * Math.pow(currentTime, 2) + beginValue;
            } else {
                currentTime = currentTime - 1;
                return -changeValue / 2 * (currentTime * (currentTime - 2) - 1) + beginValue;
            }
        }
    },
    /**
     * 三次方缓动效
     */
    Cubic: {
        /**
         * 三次方缓动easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            return changeValue * Math.pow(currentTime, 3) + beginValue;
        },
        /**
         * 三次方缓动easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration - 1;
            return changeValue * (Math.pow(currentTime, 3) + 1) + beginValue;
        },
        /**
         * 三次方缓动easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            if (currentTime / 2 < 1) {
                return changeValue / 2 * Math.pow(currentTime, 3) + beginValue;
            } else {
                currentTime = currentTime - 2;
                return changeValue / 2 * (Math.pow(currentTime, 3) + 2) + beginValue;
            }
        }
    },
    /**
     * 四次方缓动效果
     */
    Quart: {
        /**
         * 四次方缓动easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            return changeValue * Math.pow(currentTime, 4) + beginValue;
        },
        /**
         * 四次方缓动easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration - 1;
            return -changeValue * (Math.pow(currentTime, 4) - 1) + beginValue;
        },
        /**
         * 四次方缓动easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            if (currentTime / 2 < 1) {
                return changeValue / 2 * Math.pow(currentTime, 4) + beginValue;
            } else {
                currentTime -= 2;
                return -changeValue / 2 * (Math.pow(currentTime, 4) - 2) + beginValue;
            }
        }
    },
    /**
     * 五次方缓动效果
     */
    Quint: {
        /**
         * 四次方缓动easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            currentTime /= duration;
            return changeValue * Math.pow(currentTime, 5) + beginValue;
        },
        /**
         * 四次方缓动easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration - 1;
            return changeValue * (Math.pow(currentTime, 5) + 1) + beginValue;
        },
        /**
         * 四次方缓动easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            if (currentTime / 2 < 1) {
                return changeValue / 2 * Math.pow(currentTime, 5) + beginValue;
            } else {
                currentTime -= 2;
                return changeValue / 2 * (Math.pow(currentTime, 5) + 2) + beginValue;
            }
        }
    },
    /**
     * 正弦缓动效果
     */
    Sine: {
        /**
         * 正弦缓动效果easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            return -changeValue * Math.cos(currentTime / duration * (Math.PI / 2)) + changeValue + beginValue;
        },
        /**
         * 正弦缓动效果easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            return changeValue * Math.sin(currentTime / duration * (Math.PI / 2)) + beginValue;
        },
        /**
         * 正弦缓动效果easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            return -changeValue / 2 * (Math.cos(Math.PI * currentTime / duration) - 1) + beginValue;
        }
    },
    /**
     * 指数缓动效果
     */
    Expo: {
        /**
         * 指数缓动效果easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            return currentTime === 0 ? beginValue : changeValue * Math.pow(2, 10 * (currentTime / duration - 1)) + beginValue;
        },
        /**
         * 指数缓动效果easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            return currentTime === duration ? beginValue + changeValue : changeValue * (-Math.pow(2, -10 * currentTime / duration) + 1) + beginValue;
        },
        /**
         * 指数缓动效果easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            if (currentTime === 0) {
                return beginValue;
            }
            if (currentTime === duration) {
                return beginValue + changeValue;
            }
            currentTime /= duration;
            if (currentTime / 2 < 1) {
                return changeValue / 2 * Math.pow(2, 10 * (currentTime - 1)) + beginValue;
            } else {
                currentTime -= 1;
                return changeValue / 2 * (-Math.pow(2, -10 * currentTime) + 2) + beginValue;
            }
        }
    },
    /**
     * 圆形缓动效果
     */
    Circle: {
        /**
         * 圆形缓动效果easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            return -changeValue * (Math.sqrt(1 - Math.pow(currentTime, 2)) - 1) + beginValue;
        },
        /**
         * 圆形缓动效果easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration - 1;
            return changeValue * Math.sqrt(1 - Math.pow(currentTime, 2)) + beginValue;
        },
        /**
         * 圆形缓动效果easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            if (currentTime / 2 < 1) {
                return -changeValue / 2 * (Math.sqrt(1 - Math.pow(currentTime, 2)) - 1) + beginValue;
            } else {
                currentTime -= 2;
                return changeValue / 2 + (Math.sqrt(1 - Math.pow(currentTime, 2)) + 1) + beginValue;
            }
        }
    },
    /**
     * 指衰减正弦曲线缓动函数
     */
    Elastic: {
        /**
         * 指衰减正弦曲线缓动easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @param a [number] undefined
         * @param p [number] undefined
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration, a, p) {
            var s;
            if (currentTime === 0) {
                return beginValue;
            }
            currentTime /= duration;
            if (currentTime === 1) {
                return beginValue + changeValue;
            }
            if (typeof p === "undefined") {
                p = duration * 0.3;
            }
            if (!a || a < Math.abs(changeValue)) {
                s = p / 4;
                a = changeValue;
            } else {
                s = p / (2 * Math.PI) * Math.asin(changeValue / a);
            }
            return -(a * Math.pow(2, 10 * (currentTime -= 1)) * Math.sin((currentTime * duration - s) * (2 * Math.PI) / p)) + beginValue;
        },
        /**
         * 指衰减正弦曲线缓动减速easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @param a [number] undefined
         * @param p [number] undefined
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration, a, p) {
            var s;
            if (currentTime === 0) {
                return beginValue;
            }
            currentTime /= duration;
            if (currentTime === 1) {
                return beginValue + changeValue;
            }
            if (typeof p === "undefined") {
                p = duration * .3;
            }
            if (!a || a < Math.abs(changeValue)) {
                a = changeValue;
                s = p / 4;
            } else {
                s = p / (2 * Math.PI) * Math.asin(changeValue / a);
            }
            return a * Math.pow(2, -10 * currentTime) * Math.sin((currentTime * duration - s) * (2 * Math.PI) / p) + changeValue + beginValue;
        },
        /**
         * 指衰减正弦曲线缓动函先加速后减速easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @param a [number] undefined
         * @param p [number] undefined
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration, a, p) {
            var s;
            if (currentTime === 0) {
                return beginValue;
            }
            currentTime /= duration / 2;
            if (currentTime === 2) {
                return beginValue + changeValue;
            }
            if (typeof p === "undefined") {
                p = duration * (0.3 * 1.5);
            }
            if (!a || a < Math.abs(changeValue)) {
                a = changeValue;
                s = p / 4;
            } else {
                s = p / (2 * Math.PI) * Math.asin(changeValue / a);
            }
            if (currentTime < 1) {
                return -0.5 * (a * Math.pow(2, 10 * (currentTime -= 1)) * Math.sin((currentTime * duration - s) * (2 * Math.PI) / p)) + beginValue;
            }
            return a * Math.pow(2, -10 * (currentTime -= 1)) * Math.sin((currentTime * duration - s) * (2 * Math.PI) / p) * .5 + changeValue + beginValue;
        }
    },
    /**
     * 超过范围的三次方的缓动函数
     */
    Back: {
        /**
         * 超过范围的三次方的缓动函数easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @param s [number] undefined
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration, s) {
            if (typeof s === "undefined") {
                s = 1.70158;
            }
            return changeValue * (currentTime /= duration) * currentTime * ((s + 1) * currentTime - s) + beginValue;
        },
        /**
         * 超过范围的三次方的缓动函数easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @param s [number] undefined
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration, s) {
            if (typeof s === "undefined") {
                s = 1.70158;
            }
            return changeValue * ((currentTime = currentTime / duration - 1) * currentTime * ((s + 1) * currentTime + s) + 1) + beginValue;
        },
        /**
         * 超过范围的三次方的缓动函数easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @param s [number] undefined
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration, s) {
            if (typeof s === "undefined") {
                s = 1.70158;
            }
            currentTime /= duration / 2;
            if (currentTime < 1) {
                return changeValue / 2 * (currentTime * currentTime * (((s *= 1.525) + 1) * currentTime - s)) + beginValue;
            }
            return changeValue / 2 * ((currentTime -= 2) * currentTime * (((s *= 1.525) + 1) * currentTime + s) + 2) + beginValue;
        }
    },
    /**
     * 指数衰减的反弹曲线缓动函数
     */
    Bounce: {
        /**
         * 指数衰减的反弹曲线缓动函数easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            return changeValue - exports.MathAnimationApi.Bounce.easeOut(duration - currentTime, 0, changeValue, duration) + beginValue;
        },
        /**
         * 指数衰减的反弹曲线缓动函数easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            currentTime /= duration;
            if (currentTime < 1 / 2.75) {
                return changeValue * (7.5625 * currentTime * currentTime) + beginValue;
            } else if (currentTime < 2 / 2.75) {
                return changeValue * (7.5625 * (currentTime -= 1.5 / 2.75) * currentTime + .75) + beginValue;
            } else if (currentTime < 2.5 / 2.75) {
                return changeValue * (7.5625 * (currentTime -= 2.25 / 2.75) * currentTime + .9375) + beginValue;
            } else {
                return changeValue * (7.5625 * (currentTime -= 2.625 / 2.75) * currentTime + .984375) + beginValue;
            }
        },
        /**
         * 指数衰减的反弹曲线缓动函数easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            if (currentTime < duration / 2) {
                return exports.MathAnimationApi.Bounce.easeIn(currentTime * 2, 0, changeValue, duration) * .5 + beginValue;
            } else {
                return exports.MathAnimationApi.Bounce.easeOut(currentTime * 2 - duration, 0, changeValue, duration) * 0.5 + changeValue * 0.5 + beginValue;
            }
        }
    }
};
// tslint:enable: object-literal-sort-keys no-parameter-reassignment
//# sourceMappingURL=MathAnimationApi.js.map

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function sent() {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) {
            try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
        }if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var StaticCommon_1 = __webpack_require__(10);
var callYieldFunc = function callYieldFunc(callbackObj) {
    var result, keys, index, mLen, key, callback, lastKey, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                result = {};
                if (!callbackObj) return [3 /*break*/, 5];
                keys = Object.keys(callbackObj);
                if (!(keys.length > 0)) return [3 /*break*/, 5];
                index = 0, mLen = keys.length;
                _c.label = 1;
            case 1:
                if (!(index < mLen)) return [3 /*break*/, 5];
                key = keys[index];
                callback = callbackObj[key];
                if (!(typeof callback === "function")) return [3 /*break*/, 3];
                lastKey = keys[index - 1];
                _a = result;
                _b = key;
                return [4 /*yield*/, callback(result[lastKey])];
            case 2:
                _a[_b] = _c.sent();
                return [3 /*break*/, 4];
            case 3:
                result[key] = {
                    statusCode: "QueueCall_601",
                    // tslint:disable-next-line: object-literal-sort-keys
                    message: "The " + key + "'s fn attribute is not a function"
                };
                _c.label = 4;
            case 4:
                index++;
                return [3 /*break*/, 1];
            case 5:
                return [2 /*return*/, result];
        }
    });
};
exports.queueCallRaceAll = function (paramList, fn, option) {
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                if (paramList && paramList.length > 0) {
                    var allStatus_1 = {};
                    var allResult_1 = {};
                    var checkAllStatus_1 = function checkAllStatus_1() {
                        var hasError = false;
                        // tslint:disable-next-line: forin
                        for (var key in allStatus_1) {
                            if (allStatus_1[key] === "PENDING") {
                                return;
                            }
                            if (allStatus_1[key] === "ERROR") {
                                hasError = true;
                                break;
                            }
                        }
                        if (hasError) {
                            reject(allResult_1);
                        } else {
                            resolve(allResult_1);
                        }
                    };
                    paramList.map(function (item, index) {
                        var taskID = "queueCall" + index;
                        allStatus_1["queueCall" + index] = "PENDING";
                        (function (param, taskId) {
                            var callback = typeof param.fn === "function" ? param.fn : fn;
                            if (typeof callback === "function") {
                                // tslint:disable-next-line: no-inferred-empty-object-type
                                var callbackResult = callback({
                                    id: param.id,
                                    lastKey: null,
                                    lastResult: null,
                                    param: param.params,
                                    result: allResult_1
                                }, param.params);
                                if (StaticCommon_1.StaticCommon.isPromise(callbackResult)) {
                                    callbackResult.then(function (resp) {
                                        allResult_1[param.id] = resp;
                                        allStatus_1[taskID] = "OK";
                                        checkAllStatus_1();
                                    }).catch(function (error) {
                                        allResult_1[param.id] = {
                                            statusCode: "Fail",
                                            // tslint:disable-next-line: object-literal-sort-keys
                                            exception: error,
                                            message: error.message || error.statusText || "Unknow error"
                                        };
                                        allStatus_1[taskID] = "ERROR";
                                        checkAllStatus_1();
                                    });
                                } else {
                                    allResult_1[param.id] = callbackResult;
                                    allStatus_1[taskID] = "OK";
                                    checkAllStatus_1();
                                }
                            } else {
                                allResult_1[param.id] = {
                                    statusCode: "Fail",
                                    // tslint:disable-next-line: object-literal-sort-keys
                                    message: "the fn callback is not a function"
                                };
                                checkAllStatus_1();
                            }
                        })(item, taskID);
                    });
                } else {
                    resolve();
                }
            })];
        });
    });
};
/**
 * 按队列调用异步函数或普通函数
 * @param paramList {TypeQueueCallParam[]} 队列参数
 * @param fn 循环调用的方法，如果params.fn 没有设置将会调用fn参数
 */
exports.queueCallFunc = function (paramList, fn, option) {
    return __awaiter(void 0, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                var doActionData = {};
                var Result = {};
                var keyArr = [];
                var yieldResult = null;
                var doNext = function doNext(key, lastKey) {
                    return function () {
                        var yResult = yieldResult.next(Result[lastKey]);
                        if (!yResult.done) {
                            if (yResult.value && typeof yResult.value.toString === "function" && yResult.value.toString() === "[object Promise]") {
                                yResult.value.then(function (resp) {
                                    Result[key] = resp;
                                    goNext(key);
                                }).catch(function (err) {
                                    if (!option || !option.throwException) {
                                        Result[key] = {
                                            statusCode: "QueueCall_602",
                                            // tslint:disable-next-line: object-literal-sort-keys
                                            excpetion: err
                                        };
                                        goNext(key);
                                    } else if (option && option.throwException) {
                                        reject({
                                            exception: err,
                                            message: err.message,
                                            statusCode: "QueueCall_603"
                                        });
                                    }
                                });
                            } else {
                                Result[key] = yResult.value;
                                goNext(key);
                            }
                        } else {
                            resolve(Result);
                        }
                        return yResult;
                    };
                };
                var goNext = function goNext(key) {
                    var index = keyArr.indexOf(key);
                    var nextKey = keyArr[index + 1];
                    doNext(nextKey, key)();
                };
                if (StaticCommon_1.StaticCommon.isArray(paramList) && paramList.length > 0) {
                    paramList.map(function (tParam, index) {
                        var lastKey = index > 0 && paramList[index - 1] ? paramList[index - 1].id : undefined;
                        keyArr.push(tParam.id);
                        doActionData[tParam.id] = function (options, lKey) {
                            return function (lstResult) {
                                var lstKey = lKey;
                                var paramValue = options.params;
                                var handler = options.owner || _this;
                                var operateCallback = typeof options.fn === "function" ? options.fn : fn;
                                // tslint:disable-next-line: variable-name
                                var _option = {
                                    id: options.id,
                                    lastKey: lstKey,
                                    lastResult: lstResult,
                                    params: options.params,
                                    result: Result
                                };
                                if (StaticCommon_1.StaticCommon.isArray(paramValue)) {
                                    paramValue.unshift(_option);
                                    return operateCallback.apply(handler, paramValue);
                                } else {
                                    return operateCallback.call(handler, _option, paramValue);
                                }
                            };
                        }(tParam, lastKey);
                        lastKey = null;
                    });
                    yieldResult = callYieldFunc(doActionData);
                    doNext(paramList[0].id, undefined)();
                } else {
                    resolve({});
                }
            })];
        });
    });
};
//# sourceMappingURL=QueueCallFun.js.map

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var elmer_common_1 = __webpack_require__(0);
var HtmlParse = /** @class */function (_super) {
    __extends(HtmlParse, _super);
    function HtmlParse() {
        var _this = _super.call(this) || this;
        _this.autoCloseTagList = [/^input$/i, /^br$/i, /^hr$/i, /^img$/i, /^meta$/i, /^\!DOCTYPE$/i];
        _this.rootNodes = {};
        return _this;
    }
    HtmlParse.prototype.mergeArray = function (array1, array2) {
        var resultData = [];
        if (array1 && array1.length > 0) {
            array1.map(function (item) {
                resultData.push(item);
            });
        }
        if (array2 && array2.length > 0) {
            array2.map(function (item) {
                resultData.push(item);
            });
        }
        return resultData;
    };
    HtmlParse.prototype.parse = function (htmlCode, selector) {
        var result = {
            children: [],
            data: {},
            events: {},
            path: [],
            props: {},
            status: "APPEND",
            tagName: selector || "VirtualRoot"
        };
        var nodeId = this.getRandomID();
        this.rootNodes[nodeId] = result;
        this.parseNode(htmlCode, result, nodeId, selector);
        delete this.rootNodes[nodeId];
        return result;
    };
    /**
     * 根据节点路径查找Node节点
     * @param rootNode IVirtualElement 根路径ID
     * @param path Array<number> node路径
     */
    HtmlParse.prototype.getNodeByPath = function (rootNode, path) {
        if (rootNode) {
            var checkNode = rootNode;
            var checkIndex = 0;
            var checkIndexValue = path[checkIndex];
            while (checkNode && checkNode.children[checkIndexValue]) {
                checkNode = checkNode.children[checkIndexValue];
                checkIndex += 1;
                checkIndexValue = path[checkIndex];
            }
            if (checkIndex === path.length) {
                return checkNode;
            }
        }
        return null;
    };
    /**
     * 解析dom节点
     * @param htmlCode 解析代码
     * @param parentNode 父元素
     * @param rootNodeKey 保存数据ID
     */
    HtmlParse.prototype.parseNode = function (htmlCode, parentNode, rootNodeKey, componentName) {
        if (!this.isEmpty(htmlCode)) {
            // 将代码前后空格去掉，在做判断，此时可判读开始的代码段是文本还是dom节点，文本内容保留空格，dom节点去除换行符
            var checkCode = htmlCode.replace(/^([\r\n]*)/, " ");
            checkCode = checkCode.replace(/^\s*/, "");
            if (!this.isEmpty(checkCode)) {
                if (/^\</.test(checkCode)) {
                    if (/^(\<{2,})/.test(checkCode)) {
                        throw new Error("html代码错误有重复的标识符号：<");
                    } else if (/^\-\-\>/.test(checkCode)) {
                        throw new Error("注释标签错误，不允许以结束标签开始。");
                    } else {
                        if (/^\<\!--/.test(checkCode)) {
                            var commentNode = this.parseComment(checkCode, parentNode);
                            var leftCode = "";
                            parentNode.children.push(commentNode);
                            leftCode = checkCode.replace(commentNode.innerHTML, "").replace(/^\<\!--/, "").replace(/^\-\-\>/, "");
                            this.parseNode(leftCode, parentNode, rootNodeKey, componentName);
                        } else {
                            this.parseNextNode(checkCode, parentNode, rootNodeKey, componentName);
                        }
                    }
                } else {
                    // 解析到文本节点，取出文本，剩余代码文本继续解析
                    var lStart = htmlCode.indexOf("<");
                    var txt = lStart > 0 ? htmlCode.substr(0, lStart) : "";
                    var leftHtmlCode = htmlCode.substr(lStart);
                    parentNode.children.push({
                        children: [],
                        events: {},
                        innerHTML: txt,
                        isClose: true,
                        path: this.mergeArray(parentNode.path, [parentNode.children.length]),
                        props: {},
                        status: "APPEND",
                        tagName: "text"
                    });
                    !this.isEmpty(leftHtmlCode) && this.parseNode(leftHtmlCode, parentNode, rootNodeKey, componentName);
                    lStart = null;
                    txt = null;
                    leftHtmlCode = null;
                }
            }
            checkCode = null;
        }
    };
    /**
     * 解析注释标签，注释标签不能嵌套
     * @param htmlCode 要解析的代码
     * @param parentNode 父元素
     */
    HtmlParse.prototype.parseComment = function (htmlCode, parentNode) {
        var endTagIndex = htmlCode.indexOf("-->");
        var result = {
            children: [],
            data: {},
            events: {},
            innerHTML: "",
            isClose: true,
            path: this.mergeArray(parentNode.path, [parentNode.children.length]),
            props: {},
            status: "APPEND",
            tagName: "<!--"
        };
        if (endTagIndex > 0) {
            var commentCode = htmlCode.substr(0, endTagIndex + 3);
            if (commentCode.substr(4).indexOf("<!--") > 0) {
                throw new Error("注释标签不允许嵌套");
            }
            if (!this.isEmpty(commentCode)) {
                commentCode = commentCode.replace(/^\<\!--/, "").replace(/\-\-\>$/, "");
            }
            result.innerHTML = commentCode;
            commentCode = null;
        }
        endTagIndex = null;
        return result;
    };
    /**
     * 解析下一个dom节点
     * @param htmlCode string 解析代码文本
     * @param parentNode IVirtualElement 父节点
     * @param rootNodeKey string 根节点ID
     */
    HtmlParse.prototype.parseNextNode = function (htmlCode, parentNode, rootNodeKey, componentName) {
        var tagReg = /^\<([a-z0-9\_\-]*)\s/i;
        var tagNoAttrReg = /^\<([a-z0-9\_\-]*)(([\/]{0,1}\>)|\>)/i;
        if (tagReg.test(htmlCode) || tagNoAttrReg.test(htmlCode)) {
            var tagMatch = htmlCode.match(tagReg);
            if (tagMatch) {
                var tagName = tagMatch[1];
                var code = htmlCode.replace(tagReg, "");
                var autoIndex = code.indexOf("/>");
                var closeIndex = code.indexOf(">");
                var attrCode = autoIndex > 0 && autoIndex < closeIndex ? code.substr(0, autoIndex) : code.substr(0, closeIndex);
                var mLeftCode = autoIndex > 0 && autoIndex < closeIndex ? code.substr(autoIndex) : code.substr(closeIndex);
                attrCode = attrCode.replace(/\r\n/g, " ");
                code = attrCode + mLeftCode;
                var attrsResult = this.readAttrs(code);
                var leftCode = attrsResult.htmlCode;
                var isAutoClose = this.checkAutoClose(leftCode, tagName);
                var newNode = {
                    children: [],
                    data: {},
                    events: attrsResult.events,
                    innerHTML: "",
                    isClose: isAutoClose,
                    path: this.mergeArray(parentNode.path, [parentNode.children.length]),
                    props: attrsResult.attrs,
                    status: "APPEND",
                    tagName: tagName
                };
                leftCode = leftCode.replace(/^\>/, "").replace(/^\/\>/, "").replace(/^(\r\n)*/, "");
                parentNode.children.push(newNode);
                if (isAutoClose) {
                    this.parseNode(leftCode, parentNode, rootNodeKey, componentName);
                } else {
                    this.parseNode(leftCode, newNode, rootNodeKey, componentName);
                }
                tagName = null;
                code = null;
                attrsResult = null;
                autoIndex = null;
                closeIndex = null;
                isAutoClose = null;
                newNode = null;
                mLeftCode = null;
            } else {
                // 没有属性的标签，示例： <ul />,<img/>
                var noAttrMatch = htmlCode.match(tagNoAttrReg);
                if (noAttrMatch) {
                    var tagName = noAttrMatch[1];
                    var leftCode = htmlCode.replace("<" + tagName, "");
                    var isAutoClose = this.checkAutoClose(leftCode, tagName);
                    var newNode = {
                        children: [],
                        data: {},
                        events: {},
                        innerHTML: "",
                        isClose: isAutoClose,
                        path: this.mergeArray(parentNode.path, [parentNode.children.length]),
                        props: {},
                        status: "APPEND",
                        tagName: tagName
                    };
                    leftCode = leftCode.replace(/^\>/, "").replace(/^\/\>/, "").replace(/^(\r\n)*/, "");
                    parentNode.children.push(newNode);
                    if (isAutoClose) {
                        this.parseNode(leftCode, parentNode, rootNodeKey, componentName);
                    } else {
                        this.parseNode(leftCode, newNode, rootNodeKey, componentName);
                    }
                    tagName = null;
                    leftCode = null;
                    isAutoClose = null;
                    newNode = null;
                }
                noAttrMatch = null;
            }
        } else {
            var endTagReg = /^\<\/\s*([a-z0-9\_\-]*)\s*\>/i;
            var endTagMatch = htmlCode.match(endTagReg);
            if (endTagMatch) {
                var tagName = endTagMatch[1];
                var leftCode = htmlCode.replace(endTagReg, "");
                if (this.checkEndTag(tagName, leftCode, parentNode)) {
                    var parentNodePath = JSON.parse(JSON.stringify(parentNode.path));
                    var nextParentNode = void 0;
                    parentNodePath.splice(parentNodePath.length - 1, 1);
                    nextParentNode = this.getNodeByPath(this.rootNodes[rootNodeKey], parentNodePath);
                    this.parseNode(leftCode, nextParentNode, rootNodeKey, componentName);
                    parentNode.isClose = true;
                    nextParentNode = null;
                    parentNodePath = null;
                }
                tagName = null;
                leftCode = null;
            } else {
                if (/^\s*\<\!DOCTYPE/.test(htmlCode)) {
                    var leftIndex = htmlCode.indexOf(">");
                    var leftCode = leftIndex > 0 ? htmlCode.substr(leftIndex + 1) : "";
                    var newNode = {
                        children: [],
                        data: {},
                        events: {},
                        innerHTML: "",
                        isClose: true,
                        path: this.mergeArray(parentNode.path, [parentNode.children.length]),
                        props: {},
                        status: "APPEND",
                        tagName: "!DOCTYPE"
                    };
                    parentNode.children.push(newNode);
                    this.parseNode(leftCode, parentNode, rootNodeKey, componentName);
                    leftIndex = null;
                    leftCode = null;
                    newNode = null;
                } else {
                    throw new Error("Html代码错误无效的开始标签" + htmlCode);
                }
            }
        }
    };
    /**
     * 检查标签是否结束
     * @param tagName 标签名
     * @param htmlCode 解析代码
     * @param parentNode 父元素
     */
    HtmlParse.prototype.checkEndTag = function (tagName, htmlCode, parentNode) {
        var _this = this;
        if (parentNode.tagName === tagName) {
            var innerHTML_1 = "";
            parentNode.isClose = true;
            parentNode.children.map(function (tmpItem) {
                if (!_this.isEmpty(tmpItem.tagName)) {
                    var attrHtml = "";
                    var attrArr = [];
                    if (tmpItem.props) {
                        // tslint:disable-next-line:forin
                        for (var key in tmpItem.props) {
                            var attrValue = tmpItem.props[key];
                            attrValue = attrValue.replace(/\"/g, "\"");
                            attrArr.push(key + "=\"" + attrValue + "\"");
                        }
                    }
                    attrHtml = attrArr.join(" ");
                    if (tmpItem.tagName !== "text") {
                        innerHTML_1 += "<" + tmpItem.tagName + " " + attrHtml + ">" + tmpItem.innerHTML + "</" + tmpItem.tagName + ">";
                    } else {
                        innerHTML_1 += tmpItem.innerHTML;
                    }
                    attrArr = null;
                } else {
                    innerHTML_1 += tmpItem.innerHTML;
                }
            });
            parentNode.innerHTML = innerHTML_1;
            return true;
        }
        return false;
    };
    /**
     * 解析属性
     * @param htmlCode 解析代码
     * @param valChar 属性值标识符号
     * @returns ReadAttrValue 属性值内容
     */
    HtmlParse.prototype.readAttrValue = function (htmlCode, valChar) {
        var result = {
            htmlCode: htmlCode,
            value: ""
        };
        var checkCode = htmlCode;
        checkCode = valChar === undefined || valChar === null ? htmlCode.replace(/^\s*/, "") : htmlCode;
        if (checkCode.startsWith("'")) {
            // 已单引号包含值
            checkCode = checkCode.substr(1);
            var splitIndex = checkCode.indexOf("\\'");
            var charIndex = checkCode.indexOf("'");
            if (splitIndex < charIndex && splitIndex >= 0) {
                // 单引号内容包含转义的单引号\'
                result.value = checkCode.substr(0, splitIndex);
                checkCode = checkCode.substr(splitIndex + 2);
                var exResult = !checkCode.startsWith("'") ? this.readAttrValue(checkCode, "'") : {
                    htmlCode: checkCode,
                    value: ""
                };
                result.value += "\\'" + exResult.value;
                result.htmlCode = exResult.htmlCode;
                exResult = null;
            } else {
                if (charIndex > 0) {
                    result.value = checkCode.substr(0, charIndex);
                    result.htmlCode = checkCode.substr(charIndex + 1);
                } else {
                    result.value = "";
                    result.htmlCode = checkCode.substr(1);
                }
            }
            splitIndex = null;
            charIndex = null;
        } else if (checkCode.startsWith('"')) {
            checkCode = checkCode.substr(1);
            var splitIndex = checkCode.indexOf('\\"');
            var charIndex = checkCode.indexOf('"');
            if (splitIndex < charIndex && splitIndex >= 0) {
                // 双引号内容包含转义的双引号\"
                result.value = checkCode.substr(0, splitIndex);
                checkCode = checkCode.substr(splitIndex + 2);
                var exResult = !checkCode.startsWith('"') ? this.readAttrValue(checkCode, '"') : {
                    htmlCode: checkCode,
                    value: ""
                };
                result.value += '\\"' + exResult.value;
                result.htmlCode = exResult.htmlCode;
                exResult = null;
            } else {
                if (charIndex > 0) {
                    result.value = checkCode.substr(0, charIndex);
                    result.htmlCode = checkCode.substr(charIndex + 1);
                } else {
                    result.value = "";
                    result.htmlCode = checkCode.substr(1);
                }
            }
            splitIndex = null;
            charIndex = null;
        } else {
            if (valChar === "'") {
                var splitIndex = checkCode.indexOf("\\'");
                var charIndex = checkCode.indexOf("'");
                if (splitIndex < charIndex && splitIndex >= 0) {
                    result.value = checkCode.substr(0, splitIndex);
                    checkCode = checkCode.substr(splitIndex + 2);
                    var exResult = !checkCode.startsWith("'") ? this.readAttrValue(checkCode, "'") : {
                        htmlCode: checkCode,
                        value: ""
                    };
                    result.value += "\\'" + exResult.value;
                    result.htmlCode = exResult.htmlCode;
                    exResult = null;
                } else {
                    if (charIndex > 0) {
                        result.value = checkCode.substr(0, charIndex);
                        result.htmlCode = checkCode.substr(charIndex + 1);
                    } else {
                        result.value = "";
                        result.htmlCode = checkCode.substr(1);
                    }
                }
            } else if (valChar === '"') {
                var splitIndex = checkCode.indexOf('\\"');
                var charIndex = checkCode.indexOf('"');
                if (splitIndex < charIndex && splitIndex >= 0) {
                    // 双引号内容包含转义的双引号\"
                    result.value = checkCode.substr(0, splitIndex);
                    checkCode = checkCode.substr(splitIndex + 2);
                    var exResult = !checkCode.startsWith('"') ? this.readAttrValue(checkCode, '"') : {
                        htmlCode: checkCode,
                        value: ""
                    };
                    result.value += '\\"' + exResult.value;
                    result.htmlCode = exResult.htmlCode;
                    exResult = null;
                } else {
                    if (charIndex > 0) {
                        result.value = checkCode.substr(0, charIndex);
                        result.htmlCode = checkCode.substr(charIndex + 1);
                    } else {
                        result.value = "";
                        result.htmlCode = checkCode.substr(1);
                    }
                }
                splitIndex = null;
                charIndex = null;
            }
        }
        return result;
    };
    /**
     * 读取标签属性
     * @param htmlCode string 解析代码文本
     * @return ReadAttrResult 返回属性内容
     */
    HtmlParse.prototype.readAttrs = function (htmlCode) {
        var attrKeyReg = /^([a-z0-9\-_\.\:]{1,})\s*=/i;
        var extAttrKeyReg = /^\.\.\.([[a-z0-9\-_\.]*)(\s|\r\n)/i;
        var onlyAttrKeyReg = /^([a-z0-9\-_\.\:]{1,})(\s|\r\n)/i;
        var checkCode = htmlCode;
        var result = {
            attrs: {},
            events: {},
            htmlCode: ""
        };
        checkCode = checkCode.replace(/^[\r\n\s]*/, "");
        while (attrKeyReg.test(checkCode) || extAttrKeyReg.test(checkCode) || onlyAttrKeyReg.test(checkCode)) {
            if (attrKeyReg.test(checkCode)) {
                var attrMatch = checkCode.match(attrKeyReg);
                var attrKey = attrMatch[1];
                var attrValueResult = void 0;
                checkCode = checkCode.replace(attrKeyReg, "").replace(/^\s*/, "");
                attrValueResult = this.readAttrValue(checkCode);
                result.attrs[attrKey] = attrValueResult.value;
                checkCode = attrValueResult.htmlCode;
                checkCode = checkCode.replace(/^[\r\n\s]*/, "");
                attrMatch = null;
                attrKey = null;
            } else if (extAttrKeyReg.test(checkCode)) {
                var extAttrMatch = checkCode.match(extAttrKeyReg);
                result.attrs["..."] = extAttrMatch[1];
                checkCode = checkCode.replace(extAttrKeyReg, "").replace(/^[\r\n\s]*/, "");
                extAttrMatch = null;
            } else if (onlyAttrKeyReg.test(checkCode)) {
                var onlyAttrKeyMatch = checkCode.match(onlyAttrKeyReg);
                result.attrs[onlyAttrKeyMatch[1]] = onlyAttrKeyMatch[1];
                checkCode = checkCode.replace(onlyAttrKeyReg, "").replace(/^[\r\n\s]*/, "");
                onlyAttrKeyMatch = null;
            }
        }
        result.htmlCode = checkCode;
        attrKeyReg = null;
        extAttrKeyReg = null;
        onlyAttrKeyReg = null;
        return result;
    };
    /**
     * 检查标签是否关闭,匹配关闭节点
     * @param htmlCode string 检查代码
     * @param tagName string 标签名称
     */
    HtmlParse.prototype.checkAutoClose = function (htmlCode, tagName) {
        for (var _i = 0, _a = this.autoCloseTagList; _i < _a.length; _i++) {
            var reg = _a[_i];
            if (reg.test(tagName)) {
                return true;
            }
        }
        return (/^\s*\/\>/.test(htmlCode)
        );
    };
    HtmlParse.className = "HtmlParse";
    return HtmlParse;
}(elmer_common_1.Common);
exports.HtmlParse = HtmlParse;
//# sourceMappingURL=HtmlParse.js.map

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualElementOperate = {
    APPEND: "APPEND",
    DELETE: "DELETE",
    MOVE: "MOVE",
    MOVEUPDATE: "MOVEUPDATE",
    NORMAL: "NORMAL",
    UPDATE: "UPDATE"
};
//# sourceMappingURL=IVirtualElement.js.map

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = undefined && undefined.__spreadArrays || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
        s += arguments[i].length;
    }for (var r = Array(s), k = 0, i = 0; i < il; i++) {
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
            r[k] = a[j];
        }
    }return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var elmer_common_1 = __webpack_require__(0);
var RenderingSyntax_1 = __webpack_require__(41);
var VirtualRenderDiff_1 = __webpack_require__(17);
/**
 * v2.0.0
 * 新版本VirtualRender合并渲染和diff运算，减少虚拟dom的遍历提升速度
 */
var VirtualRender = /** @class */function (_super) {
    __extends(VirtualRender, _super);
    function VirtualRender(virtualDom) {
        var _this = _super.call(this) || this;
        _this.virtualDom = virtualDom;
        _this.plugin = [];
        _this.events = {};
        _this.plugin.push(new RenderingSyntax_1.SyntaxText());
        _this.plugin.push(new RenderingSyntax_1.SyntaxEvent());
        _this.plugin.push(new RenderingSyntax_1.SyntaxEM());
        _this.virtualDiff = new VirtualRenderDiff_1.VirtualRenderDiff();
        return _this;
    }
    VirtualRender.prototype.bind = function (sessionId, type, callback) {
        var evtId = "virtualRenderEvent_" + this.guid();
        if (!this.events[sessionId]) {
            this.events[sessionId] = {};
        }
        if (!this.events[sessionId][type]) {
            this.events[sessionId][type] = {};
        }
        this.events[sessionId][type][evtId] = callback;
        return evtId;
    };
    VirtualRender.prototype.unBind = function (sessionId, type, eventId) {
        if (this.events[sessionId]) {
            if (this.events[sessionId][type]) {
                delete this.events[sessionId][type][eventId];
                if (Object.keys(this.events[sessionId][type]).length <= 0) {
                    delete this.events[sessionId][type];
                }
            }
            if (Object.keys(this.events[sessionId]).length <= 0) {
                delete this.events[sessionId];
            }
        }
    };
    VirtualRender.prototype.setVirtualElement = function (virtualDom) {
        this.virtualDom = virtualDom;
    };
    /**
     * 渲染虚拟dom，并做diff运算标记dom状态
     * @param domData 新dom树
     * @param oldDomData 旧dom树
     * @param component 渲染component对象
     */
    VirtualRender.prototype.render = function (domData, oldDomData, component, options) {
        var renderDom = JSON.parse(JSON.stringify(domData));
        var beforeEventName = "onBeforeRender";
        if (options && !this.isEmpty(options.sessionId)) {
            var eventObjKey = options.sessionId + "." + beforeEventName;
            var eventObj = this.getValue(this.events, eventObjKey);
            if (eventObj) {
                for (var _i = 0, _a = Object.keys(eventObj); _i < _a.length; _i++) {
                    var evtId = _a[_i];
                    var eventCallback = eventObj[evtId];
                    if (typeof eventCallback === "function") {
                        var event_1 = {
                            cancelBubble: false,
                            vdom: renderDom
                        };
                        eventCallback(event_1);
                        if (event_1.cancelBubble) {
                            break;
                        }
                    }
                }
            }
        }
        renderDom.path = options ? options.rootPath || [] : []; // 设置根节点路径
        options && options.children && this.replaceContent(renderDom, options.children);
        this.forEach({
            component: component,
            doDiff: oldDomData && oldDomData.children.length > 0,
            domData: renderDom,
            oldDomData: oldDomData,
            optionsData: null,
            rootPath: options ? options.rootPath || [] : [],
            isUserComponent: oldDomData ? !this.isEmpty(oldDomData.virtualID) : false
        });
        return renderDom;
    };
    /**
     * 渲染自定义组件在父组件定义的子组件内容
     * context不能和content[A-Z\-\_][A-Za-z0-9]{1,}共同使用,只能选择其一做配置
     * @param checkItem 检测组件
     * @param children 父组件定义的子组件内容
     */
    VirtualRender.prototype.replaceContent = function (checkItem, children) {
        // 当前component接收到children的时候才需要执行此方法，为减少循环提升性能
        if (children && children.length > 0) {
            var contextWrapperReg = /^context([A-Z\-\_][0-9a-zA-Z]{1,})$/;
            for (var i = 0; i < checkItem.children.length; i++) {
                var uItem = checkItem.children[i];
                if (uItem.status !== "DELETE") {
                    // --- 检测Item是否包含Content元素，检测到，替换为children
                    if (/\<context\s*>\s*\S*\<\/context\s*\>/i.test(uItem.innerHTML) || /\<context\s*\/\>/i.test(uItem.innerHTML) || uItem.tagName === "context" || /\<content\s*>\s*\S*\<\/content\s*\>/i.test(uItem.innerHTML) || /\<content\s*\/\>/i.test(uItem.innerHTML) || uItem.tagName === "content" || /\<context[A-Z\-\_][0-9a-zA-Z]{1,}\s*\/\>/.test(uItem.innerHTML) || /\<context[A-Z\-\_][0-9a-zA-Z]{1,}\s*\>\s*\S*\<\/context[A-Z\-\_][0-9a-zA-Z]{1,}\s*\>/.test(uItem.innerHTML) || contextWrapperReg.test(uItem.tagName)) {
                        // 检测到当前dom是content元素或者包含content元素，
                        // 其他dom结构不用再做，
                        if (uItem.tagName.toLowerCase() === "content" || uItem.tagName.toLowerCase() === "context") {
                            var isContextKey = false;
                            var renderKeyReg = /([A-Z\-\_][0-9a-zA-Z]{1,})$/;
                            for (var j = 0, mLen = children.length; j < mLen; j++) {
                                var renderKeyMatch = children[j].tagName.match(renderKeyReg);
                                if (renderKeyMatch) {
                                    var contextRegKey = "ChildrenWrapper" + renderKeyMatch[1];
                                    if (contextRegKey === children[j].tagName) {
                                        isContextKey = true;
                                        break;
                                    }
                                    renderKeyMatch = null;
                                }
                                children[j].isContent = true;
                            }
                            renderKeyReg = null;
                            if (!isContextKey) {
                                var sessionId = this.virtualDom.init(checkItem);
                                this.virtualDom.replaceAt(sessionId, children, i);
                                this.virtualDom.clear(sessionId);
                                break;
                            }
                        } else {
                            var contextMatch = uItem.tagName.match(contextWrapperReg);
                            if (contextMatch) {
                                var contextKey = "ChildrenWrapper" + contextMatch[1];
                                for (var j = 0, mLen = children.length; j < mLen; j++) {
                                    if (contextKey === children[j].tagName) {
                                        for (var z = 0, zLen = children[j].children.length; z < zLen; z++) {
                                            children[j].children[z].isContent = true;
                                        }
                                        var sessionId = this.virtualDom.init(checkItem);
                                        this.virtualDom.replaceAt(sessionId, children[j].children, i);
                                        this.virtualDom.clear(sessionId);
                                        break;
                                    }
                                }
                            } else {
                                // 执行下一层搜索
                                this.replaceContent(checkItem.children[i], children);
                            }
                        }
                    }
                }
            }
        }
    };
    VirtualRender.prototype.forEach = function (event) {
        var _a, _b;
        var optionalData = __assign(__assign({}, event.domData.data), event.optionsData || {});
        var deleteElements = [];
        // 当前虚拟dom是用户自定义组件时不需要对子元素做diff运算
        // 有子元素是要传到自定义组件里面的diff运算去做，当前层级组件内不用做diff
        // virtualID只有在旧dom才会出现，旧dom节点是经过渲染流程以后的数据
        var isUserComponent = !event.isUserComponent ? event.oldDomData ? !this.isEmpty(event.oldDomData.virtualID) : false : true;
        var hasForEach = false;
        var hasRenderChange = false;
        var hasRenderInnerHTML = "";
        var forLen = event.domData.children.length;
        var lastMatchIndex = 0;
        // tslint:disable-next-line: forin
        for (var kIndex = 0; kIndex < forLen; kIndex++) {
            var dom = event.domData.children[kIndex];
            if (!/^\s*script\s*$/i.test(dom.tagName)) {
                if (!this.isEmpty(dom.props["em:for"]) && dom.tagName !== "forEach") {
                    // 进入for循环
                    var forDoms = this.repeatRender(dom, event.component, optionalData);
                    if (forDoms.length > 0) {
                        (_a = event.domData.children).splice.apply(_a, __spreadArrays([kIndex, 1], forDoms));
                        dom = event.domData.children[kIndex];
                        forLen += forDoms.length - 1;
                        hasForEach = true;
                    } else {
                        delete event.domData.children[kIndex].props["em:for"];
                        event.domData.children[kIndex].status = "DELETE";
                    }
                }
                if (dom.tagName === "forEach") {
                    // 进入forEach循环
                    var forEachDoms = this.forEachRender(dom, event.component, optionalData);
                    if (forEachDoms.length > 0) {
                        (_b = event.domData.children).splice.apply(_b, __spreadArrays([kIndex, 1], forEachDoms));
                        dom = event.domData.children[kIndex];
                        forLen += forEachDoms.length - 1;
                        hasForEach = true;
                    } else {
                        event.domData.children[kIndex].status = "DELETE";
                    }
                    hasForEach = true;
                }
                dom.path = __spreadArrays(event.domData.path, [kIndex]); // 更新path数据
                // 先对属性数据绑定，事件绑定，逻辑判断渲染到虚拟dom树
                if (this.renderAttribute(dom, event.component, __assign(__assign({}, optionalData), dom.data || {}))) {
                    // 有绑定内容渲染，更新innerHTML
                    hasRenderChange = true;
                }
                // console.log(dom.tagName, dom.innerHTML);
                var diffResult = !isUserComponent ? this.virtualDiff.diff({
                    dom: dom,
                    domIndex: kIndex,
                    help: event.component.help,
                    lastMatchIndex: lastMatchIndex,
                    oldParentDom: event.oldDomData,
                    isLastNode: kIndex === forLen - 1
                }) : {
                    matchIndex: 0,
                    matchDom: null
                };
                lastMatchIndex = diffResult.matchIndex;
                // --------进行下一层级的渲染和diff运算
                if (dom.children.length > 0) {
                    var myEvent = {
                        component: event.component,
                        doDiff: event.doDiff,
                        domData: dom,
                        oldDomData: diffResult.matchDom,
                        optionsData: optionalData,
                        updateParentPath: hasForEach,
                        rootPath: event.rootPath,
                        isUserComponent: isUserComponent
                    };
                    var myResult = this.forEach(myEvent);
                    if (myResult.hasRenderChange) {
                        // 数据有变化更新innerHTML
                        dom.innerHTML = myResult.innerHTML;
                        hasRenderChange = true;
                    }
                }
                var curAttrHtmlCode = dom.attrCode || "";
                hasRenderInnerHTML += !this.isEmpty(hasRenderInnerHTML) ? "\r\n" : "";
                hasRenderInnerHTML += /^text$/i.test(dom.tagName) ? dom.innerHTML : "<" + dom.tagName + " " + curAttrHtmlCode + ">" + dom.innerHTML + "</" + dom.tagName + ">";
            } else {
                dom.status = "DELETE";
                dom.children = [];
                dom.innerHTML = "Script tags are not allowed in HTML code";
                dom.tagName = "text";
                throw new Error("Script tags are not allowed in HTML code.[" + event.component.selector + "]");
            }
        }
        // 将没有做过对比的旧节点找出来并标记为删除状态
        // 如果节点属于自定义组件子节点不标记删除状态，由于子节点没有做diff运算，所有子节点都没有标记为diff状态
        if (!isUserComponent && event.oldDomData && event.oldDomData.children.length > 0) {
            event.oldDomData.children.map(function (tmpDom) {
                // tmpDom.tagAttrs && console.log(tmpDom.tagName, tmpDom.tagAttrs.checked);
                if (!tmpDom.isDiff) {
                    tmpDom.status = "DELETE";
                    deleteElements.push(tmpDom);
                }
            });
        }
        event.domData.deleteElements = deleteElements;
        return {
            hasRenderChange: hasRenderChange,
            innerHTML: hasRenderInnerHTML
        };
    };
    /**
     * 渲染dom属性，如果有绑定值则返回true,通知上一级渲染有改动，如果没有绑定数据被渲染到dom，则会被标记为Static状态，在做diff时不需要进行比较
     * @param dom 渲染属性
     * @param component 渲染组件对象
     * @param optionalData 组件绑定动态数据
     */
    VirtualRender.prototype.renderAttribute = function (dom, component, optionalData) {
        var hasChange = false;
        if (dom.tagName !== "text") {
            if (dom.props) {
                var attributes = [];
                var dataSet = {};
                // tslint:disable-next-line: forin
                for (var attrKey in dom.props) {
                    var attrValue = dom.props[attrKey];
                    var newAttrKey = attrKey;
                    var isEvent = false; // just for current attribute
                    for (var _i = 0, _a = this.plugin; _i < _a.length; _i++) {
                        var plugin = _a[_i];
                        var renderEvent = {
                            attrKey: attrKey,
                            break: false,
                            component: component,
                            data: optionalData,
                            target: dom.props[attrKey]
                        };
                        var renderResult = plugin.render(renderEvent);
                        if (renderResult.hasChange) {
                            attrValue = renderResult.result;
                            hasChange = true;
                            if (!this.isEmpty(renderResult.attrKey)) {
                                newAttrKey = renderResult.attrKey;
                            }
                        }
                        if (renderResult.isEvent) {
                            isEvent = true;
                        }
                        if (renderEvent.break) {
                            break;
                        }
                    }
                    if (!isEvent) {
                        if (hasChange) {
                            // 检测到有数据绑定才需要更新属性值
                            if (newAttrKey === "if") {
                                // if属性已经被作为是否渲染的标识，不在往外抛出属性
                                if (attrValue) {
                                    dom.status = "APPEND";
                                } else {
                                    dom.status = "DELETE";
                                }
                            } else {
                                dom.props[newAttrKey] = attrValue;
                            }
                            if (newAttrKey !== attrKey || newAttrKey === "if") {
                                delete dom.props[attrKey];
                            }
                        }
                        if (/^data\-/.test(newAttrKey)) {
                            dataSet[newAttrKey.replace(/^data\-/, "")] = attrValue;
                        }
                        var toCodeAttrValue = undefined === attrValue ? "undefined" : null === attrValue ? "null" : attrValue.toString();
                        !/^if$/.test(newAttrKey) && attributes.push(newAttrKey + "=" + JSON.stringify(toCodeAttrValue));
                    } else {
                        var eventName = newAttrKey.replace(/^et\:/i, "");
                        if (typeof attrValue === "function") {
                            dom.events[eventName] = attrValue.bind(component);
                        }
                        delete dom.props[attrKey];
                    }
                }
                dom.dataSet = dataSet;
                // tslint:disable-next-line: curly
                dom.attrCode = attributes.join(" "); // 临时存储innerHTML，读取值以后即可删除
            }
        } else {
            var result = dom.innerHTML;
            for (var _b = 0, _c = this.plugin; _b < _c.length; _b++) {
                var plugin = _c[_b];
                var renderEvent = {
                    attrKey: null,
                    break: false,
                    component: component,
                    data: optionalData,
                    target: result
                };
                var renderResult = plugin.render(renderEvent);
                if (renderResult.hasChange) {
                    hasChange = true;
                    result = renderResult.result;
                }
                if (renderEvent.break) {
                    break;
                }
            }
            dom.innerHTML = result;
        }
        return hasChange;
    };
    /**
     * 旧语法循环渲染列表
     * @param dom 渲染dom
     * @param component 渲染组件对象
     */
    VirtualRender.prototype.repeatRender = function (dom, component, optionsData) {
        var repeatFormula = (dom.props["em:for"] || "").replace(/^\s*/, "").replace(/\s$/, "");
        var forReg = /^let\s{1,}([a-z0-9]{1,})\s{1,}in\s{1,}([a-z0-9\.\_\-]{1,})$/i;
        var forMatch = repeatFormula.match(forReg);
        var resultDoms = [];
        if (forMatch) {
            var itemKey = forMatch[1];
            var dataKey = forMatch[2].replace(/^this\./i, "");
            var repeatData = this.getValue(optionsData, dataKey) || this.getValue(component, dataKey);
            if (repeatData) {
                var sessionId = this.virtualDom.init(dom);
                // tslint:disable-next-line: forin
                for (var forKey in repeatData) {
                    var newDom = this.virtualDom.clone(sessionId);
                    var newItemData = JSON.parse(JSON.stringify(repeatData[forKey]));
                    newDom.props = __assign({}, dom.props);
                    delete newDom.props["em:for"];
                    newItemData.key = forKey;
                    newDom.data = __assign(__assign({}, newDom.data), optionsData);
                    newDom.data[itemKey] = newItemData;
                    newDom.data["index"] = forKey;
                    resultDoms.push(newDom);
                }
                this.virtualDom.clear(sessionId);
            }
        }
        return resultDoms;
    };
    /**
     * 支持新列表渲染标签forEach
     * @param dom forEach子标签只允许有一个
     * @param component 渲染组件对象
     * @param optionsData 组件间传递数据
     */
    VirtualRender.prototype.forEachRender = function (dom, component, optionsData) {
        var dataKey = (dom.props["data"] || "").replace(/^\s*\{\{/, "").replace(/\}\}\s*$/, "").replace(/^\s*/, "").replace(/\s$/, "").replace(/^this\./i, "");
        var resultDoms = [];
        var itemKey = dom.props["item"];
        var indexKey = dom.props["index"];
        var repeatData = this.getValue(optionsData, dataKey) || this.getValue(component, dataKey);
        if (repeatData) {
            var childrenLen_1 = 0;
            var repeateDom_1 = null;
            dom.children.map(function (checkDom) {
                if (checkDom.tagName === "text" && checkDom.innerHTML.replace(/[\r\n\s]*/g, "").length > 0) {
                    childrenLen_1 += 1;
                    repeateDom_1 = checkDom;
                } else {
                    if (checkDom.tagName !== "text") {
                        childrenLen_1 += 1;
                        repeateDom_1 = checkDom;
                    }
                }
            });
            if (childrenLen_1 !== 1) {
                throw new Error("forEach标签下的一级子标签只能有一个标签,并且不能为空.");
            }
            if (this.isEmpty(repeateDom_1.props.key)) {
                throw new Error("forEach标签下的子标签必须要设置key属性");
            }
            var sessionId = this.virtualDom.init(repeateDom_1);
            // tslint:disable-next-line: forin
            for (var forKey in repeatData) {
                var newDom = this.virtualDom.clone(sessionId);
                var newItemData = JSON.parse(JSON.stringify(repeatData[forKey]));
                newDom.data = __assign(__assign({}, newDom.data), optionsData);
                newDom.props = __assign({}, repeateDom_1.props);
                newDom.props.key = newDom.props.key + forKey;
                newDom.data[itemKey] = newItemData;
                newDom.data[indexKey] = forKey;
                resultDoms.push(newDom);
            }
            this.virtualDom.clear(sessionId);
        }
        return resultDoms;
    };
    VirtualRender.className = "VirtualRender";
    return VirtualRender;
}(elmer_common_1.Common);
exports.VirtualRender = VirtualRender;
//# sourceMappingURL=VirtualRender.js.map

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(42));
__export(__webpack_require__(6));
__export(__webpack_require__(43));
__export(__webpack_require__(44));
//# sourceMappingURL=index.js.map

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var ASyntax_1 = __webpack_require__(6);
var SyntaxText = /** @class */function (_super) {
    __extends(SyntaxText, _super);
    function SyntaxText() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SyntaxText.prototype.render = function (event) {
        var _this = this;
        if (!/^et\:/i.test(event.attrKey) && !/em\:/.test(event.attrKey) && this.isString(event.target)) {
            var reg = /\{\{([^\\}]{1,})\}\}/g;
            var callbackReg_1 = /\{\{\s*([a-z0-9_.]{1,})\(([^\\}]{1,})\)\s*\}\}/i;
            var defaultReg_1 = /^\{\{([\s\S]*)\|([\s\S]*)\}\}$/;
            var lambdaReg_1 = /\{\{([\s\S^\{^\}]{1,})\?([\s\S^\{^\}]{1,})\:([\s\S^\{^\}]{1,})\}\}/;
            var logicReg_1 = /\s(eq|neq|seq|sneq|lt|gt|lteq|gteq|&&|\|\||\+|\-|\*|\/|\%)\s/;
            var cTxt_1 = event.target.replace(/^\s*/, "").replace(/\s$/, "");
            var keyMatch = cTxt_1.match(reg);
            var codeText_1 = event.target;
            var hasChange_1 = false;
            if (keyMatch) {
                keyMatch.map(function (tmpValue) {
                    var isLogicChecking = logicReg_1.test(tmpValue);
                    // 普通数据绑定
                    if (/^\{\{\s*[a-z0-9\.\_]{1,}\s*\}\}$/i.test(tmpValue) && !isLogicChecking) {
                        // 普通数据绑定
                        var bindKey = tmpValue.replace(/^\{\{/, "").replace(/\}\}$/, "");
                        var optionValue = _this.getValue(event.data, bindKey);
                        var bindValue = undefined === optionValue || null === optionValue ? _this.getValue(event.component, bindKey) : optionValue;
                        if (!_this.isFunction(bindValue)) {
                            codeText_1 = cTxt_1 !== tmpValue ? codeText_1.replace(tmpValue, bindValue) : bindValue;
                        } else {
                            codeText_1 = codeText_1.replace(tmpValue, bindValue());
                        }
                        hasChange_1 = true;
                    } else if (callbackReg_1.test(tmpValue)) {
                        // 方法调用绑定数据
                        var callbackMatch = tmpValue.match(callbackReg_1);
                        if (callbackMatch) {
                            var callbackId = callbackMatch[1].replace(/^this\./, "");
                            var params = callbackMatch[2];
                            var varArr = params.split(",");
                            var action = _this.getValue(event.component, callbackId);
                            var rStr = "undefined";
                            if (typeof action === "function") {
                                if (varArr && varArr.length > 0) {
                                    var callbackParams_1 = [];
                                    varArr.map(function (tmpItem) {
                                        var varKey = tmpItem.replace(/^\s*/, "").replace(/\s*$/, "");
                                        if (/^"/.test(varKey) && /"$/.test(varKey) || /^'/.test(varKey) && /'$/.test(varKey)) {
                                            // 当前参数为字符类型数据
                                            callbackParams_1.push(varKey);
                                        } else {
                                            // 当前参数是变量从component读取数据
                                            var pV = _this.getValue(event.component, varKey);
                                            callbackParams_1.push(pV);
                                        }
                                    });
                                    rStr = action.apply(event.component, callbackParams_1);
                                } else {
                                    rStr = action.call(event.component);
                                }
                            }
                            codeText_1 = cTxt_1 !== tmpValue ? codeText_1.replace(tmpValue, rStr) : rStr;
                            hasChange_1 = true;
                        }
                    } else if (defaultReg_1.test(tmpValue) && !isLogicChecking) {
                        var df = tmpValue.match(defaultReg_1);
                        var dVData = /^'/.test(df[2]) && /'$/.test(df[2]) ? df[2].replace(/^'/, "").replace(/'$/, "") : // 单引号标识的字符串
                        /^"/.test(df[2]) && /"$/.test(df[2]) ? df[2].replace(/^"/, "").replace(/"$/, "") : // 双引号标识的字符串
                        _this.isNumeric(df[2]) ? df[2].indexOf(".") >= 0 ? parseFloat(df[2]) : parseInt(df[2], 10) : // 数字类型的数据
                        /(true|false)/i.test(df[2]) ? /^true$/.test(df[2]) : _this.getValue(event.component, df[2]); // true/false， 类型数据
                        var dV = _this.getValue(event.component, df[1]) || dVData;
                        codeText_1 = cTxt_1 !== tmpValue ? codeText_1.replace(tmpValue, dV) : dV;
                        hasChange_1 = true;
                    } else if (lambdaReg_1.test(tmpValue)) {
                        // Lambda表达式绑定
                        var lbdM = tmpValue.match(lambdaReg_1);
                        var condition = _this.runLimitScript(lbdM[1], event.component, event.data);
                        var lamdbValue = void 0;
                        if (condition) {
                            lamdbValue = _this.runLimitScript(lbdM[2], event.component, event.data);
                        } else {
                            lamdbValue = _this.runLimitScript(lbdM[3], event.component, event.data);
                        }
                        codeText_1 = cTxt_1 !== tmpValue ? codeText_1.replace(tmpValue, lamdbValue) : lamdbValue;
                        hasChange_1 = true;
                    } else if (isLogicChecking) {
                        var runScript = tmpValue.replace(/^\{\{/, "").replace(/\}\}$/, "");
                        var logicV = _this.runLimitScript(runScript, event.component, event.data);
                        codeText_1 = cTxt_1 !== tmpValue ? codeText_1.replace(tmpValue, logicV) : logicV;
                        hasChange_1 = true;
                    }
                });
            }
            event.break = hasChange_1;
            return {
                attrKey: event.attrKey,
                hasChange: hasChange_1,
                result: codeText_1
            };
        } else {
            return {
                attrKey: null,
                hasChange: false,
                result: null
            };
        }
    };
    return SyntaxText;
}(ASyntax_1.ASyntax);
exports.SyntaxText = SyntaxText;
//# sourceMappingURL=SyntaxText.js.map

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var ASyntax_1 = __webpack_require__(6);
var SyntaxEvent = /** @class */function (_super) {
    __extends(SyntaxEvent, _super);
    function SyntaxEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SyntaxEvent.prototype.render = function (event) {
        if (/^et\:/i.test(event.attrKey)) {
            var action = this.getValue(event.component, event.target);
            event.break = true;
            return {
                attrKey: event.attrKey.replace(/^et\:/i, ""),
                hasChange: typeof action === "function",
                isEvent: true,
                result: action
            };
        } else {
            return {
                attrKey: null,
                hasChange: false,
                result: null
            };
        }
    };
    return SyntaxEvent;
}(ASyntax_1.ASyntax);
exports.SyntaxEvent = SyntaxEvent;
//# sourceMappingURL=SyntaxEvent.js.map

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var ASyntax_1 = __webpack_require__(6);
var SyntaxEM = /** @class */function (_super) {
    __extends(SyntaxEM, _super);
    function SyntaxEM() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SyntaxEM.prototype.render = function (event) {
        if (/^em\:/i.test(event.attrKey)) {
            var emValue = this.runLimitScript(event.target, event.component, event.data);
            event.break = true;
            return {
                attrKey: event.attrKey.replace(/^em\:/i, ""),
                hasChange: true,
                result: emValue
            };
        } else {
            return {
                attrKey: null,
                hasChange: false,
                result: null
            };
        }
    };
    return SyntaxEM;
}(ASyntax_1.ASyntax);
exports.SyntaxEM = SyntaxEM;
//# sourceMappingURL=SyntaxEM.js.map

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var elmer_common_1 = __webpack_require__(0);
var VirtualNode = /** @class */function (_super) {
    __extends(VirtualNode, _super);
    function VirtualNode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.nodes = {};
        return _this;
    }
    VirtualNode.prototype.init = function (vdom) {
        var vId = "virualNode_" + this.guid();
        this.nodes[vId] = vdom;
        return vId;
    };
    VirtualNode.prototype.clear = function (sessionId) {
        delete this.nodes[sessionId];
    };
    /**
     * 创建一个新的虚拟节点
     * @param tagName 节点名字
     * @param props 属性【可选参数】
     * @param children 子节点【可选参数】
     */
    VirtualNode.prototype.create = function (tagName, props, children) {
        var result = {
            children: children || [],
            data: {},
            events: [],
            path: [],
            props: props || {},
            status: "APPEND",
            tagAttrs: {},
            tagName: tagName
        };
        return result;
    };
    VirtualNode.prototype.getNode = function (sessionId) {
        return this.nodes[sessionId];
    };
    VirtualNode.prototype.append = function (sessionId, insertChild) {
        var vdom = this.nodes[sessionId];
        if (insertChild && vdom.children) {
            var pIndex = vdom.children.length;
            insertChild.path = JSON.parse(JSON.stringify(vdom.path));
            vdom.children.push(insertChild);
            this.updatePath(insertChild, vdom.path, pIndex);
        } else if (insertChild && !vdom.children) {
            vdom.children = [insertChild];
        }
    };
    VirtualNode.prototype.appendAt = function (sessionId, insertChild, index) {
        var _this = this;
        var vdom = this.nodes[sessionId];
        if (insertChild) {
            if (!this.isArray(insertChild)) {
                vdom.children.splice(index, 0, insertChild);
                this.updatePath(insertChild, vdom.path, index);
            } else {
                var insertVE = insertChild;
                insertVE.map(function (tmpItem, myIndex) {
                    var insertIndex = index + myIndex;
                    vdom.children.splice(insertIndex, 0, tmpItem);
                    _this.updatePath(tmpItem, vdom.path, insertIndex);
                });
                insertVE = null;
            }
        }
    };
    VirtualNode.prototype.replaceAt = function (sessionId, replaceChild, index) {
        var replaceList = !this.isArray(replaceChild) ? [replaceChild] : replaceChild;
        if (replaceChild && replaceList.length > 0) {
            var vdom = this.nodes[sessionId];
            var newChildren_1 = [];
            vdom.children[index] = null;
            for (var i = 0; i < vdom.children.length; i++) {
                if (i === index) {
                    replaceList.map(function (item) {
                        newChildren_1.push(item);
                    });
                } else {
                    newChildren_1.push(vdom.children[i]);
                }
            }
            vdom.children = newChildren_1;
            if (replaceList.length > 1) {
                for (var i = index; i < vdom.children.length; i++) {
                    this.updatePath(vdom.children[i], vdom.path, i);
                }
            }
            this.updateInnerHTML(vdom);
        }
    };
    VirtualNode.prototype.remove = function (sessionId, removeChild) {
        var vdom = this.nodes[sessionId];
        var rmIndex = vdom.children.indexOf(removeChild);
        if (rmIndex >= 0 && rmIndex < vdom.children.length) {
            vdom.children.splice(rmIndex, 1);
        }
        if (rmIndex - 1 < vdom.children.length && rmIndex - 1 >= 0) {
            for (var i = rmIndex - 1; i < vdom.children.length; i++) {
                this.updatePath(vdom.children[i], vdom.path, i);
            }
        }
    };
    VirtualNode.prototype.removeAt = function (sessionId, index) {
        var vdom = this.nodes[sessionId];
        vdom.children[index] = null;
        vdom.children.splice(index, 1);
        // update those dom's path, those dom's position has been changed after this operation
        if (index - 1 < vdom.children.length && index - 1 >= 0) {
            for (var i = index - 1; i < vdom.children.length; i++) {
                this.updatePath(vdom.children[i], vdom.path, i);
            }
        }
        this.updateInnerHTML(vdom);
    };
    VirtualNode.prototype.parent = function (sessionId, findDom) {
        var path = JSON.parse(JSON.stringify(findDom.path));
        path.splice(path.length - 1, 1);
        return this.getElementByPath(sessionId, path);
    };
    VirtualNode.prototype.getElementByPath = function (sessionId, path) {
        if (this.isArray(path) && path.length > 0) {
            var tmpDom = this.nodes[sessionId];
            var findDom = true;
            for (var i = 0; i < path.length; i++) {
                var tmpPoistion = path[i];
                tmpDom = tmpDom.children[tmpPoistion];
                if (!tmpDom) {
                    findDom = false;
                    break;
                }
            }
            return findDom ? tmpDom : null;
        }
    };
    /**
    * 获取前一个节点
    */
    VirtualNode.prototype.getPrev = function (session, refDom) {
        if (refDom) {
            var parent_1 = this.parent(session, refDom);
            var index = refDom.path[refDom.path.length - 1];
            if (parent_1 && index - 1 >= 0 && index - 1 < parent_1.children.length) {
                for (var i = index - 1; i >= 0; i--) {
                    var tmpChild = parent_1.children[i];
                    if (tmpChild.status !== "DELETE") {
                        return tmpChild;
                    }
                }
            }
        }
        return null;
    };
    VirtualNode.prototype.getNext = function (session, refDom) {
        if (refDom) {
            var parent_2 = this.parent(session, refDom);
            var index = refDom.path[refDom.path.length - 1] + 1;
            if (index >= 0 && index < parent_2.children.length) {
                return parent_2.children[index];
            }
        }
        return null;
    };
    /**
    * 复制自身节点元素
    */
    VirtualNode.prototype.clone = function (sessionId) {
        var cloneData = this.getNode(sessionId);
        var cloneProps = cloneData.props;
        cloneData.props = {};
        var newItem = JSON.parse(JSON.stringify(cloneData));
        newItem.innerHTML = cloneData.innerHTML;
        newItem.path = JSON.parse(JSON.stringify(cloneData.path));
        newItem.props = cloneProps;
        newItem.events = cloneData.events;
        newItem.dom = cloneData.dom;
        newItem.data = cloneData.data;
        return newItem;
    };
    VirtualNode.prototype.changeStatus = function (vdom, status) {
        var _this = this;
        vdom.status = status;
        if (vdom.children && vdom.children.length > 0) {
            vdom.children.map(function (subItem) {
                _this.changeStatus(subItem, status);
            });
        }
    };
    VirtualNode.prototype.updateInnerHTML = function (vdom) {
        if (vdom.children && vdom.children.length > 0) {
            var code_1 = "";
            vdom.children.map(function (vItem) {
                code_1 += "<" + vItem.tagName + " " + vItem.attrCode + ">" + vItem.innerHTML + "</" + vItem.tagName + ">\r\n";
            });
            vdom.innerHTML = code_1;
        }
    };
    VirtualNode.prototype.updatePath = function (targetElement, parentPath, position) {
        var _this = this;
        var newPath = JSON.parse(JSON.stringify(parentPath));
        newPath.push(position);
        targetElement.path = newPath;
        targetElement.children.map(function (tmpItem, index) {
            _this.updatePath(tmpItem, newPath, index);
        });
        newPath = null;
    };
    VirtualNode.className = "VirtualNode";
    return VirtualNode;
}(elmer_common_1.Common);
exports.VirtualNode = VirtualNode;
//# sourceMappingURL=VirtualNode.js.map

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
var StaticFunc_1 = __webpack_require__(18);
__export(__webpack_require__(47));
__export(__webpack_require__(49));
exports.objectToWorkerCodeFn = StaticFunc_1.objectToWorkerCode;
exports.objectToWorkerDataFn = StaticFunc_1.objectToWorkerData;
exports.workerDataToObjectFn = StaticFunc_1.workerDataToObject;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var elmer_common_1 = __webpack_require__(0);
var ElmerWorkerCore_1 = __webpack_require__(48);
var StaticFunc_1 = __webpack_require__(18);
var ElmerWorker = function (_super) {
    __extends(ElmerWorker, _super);
    function ElmerWorker(props) {
        var _this = _super.call(this) || this;
        _this.props = props;
        _this.listener = {};
        _this.promiseData = {};
        _this.createWorker();
        _this.bindEvent();
        return _this;
    }
    ElmerWorker.prototype.callMethod = function (methodName) {
        var _this = this;
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        return new Promise(function (resolve, reject) {
            var id = _this.getRandomID();
            _this.sendMsg({
                data: params,
                id: id,
                method: methodName,
                type: "CallMethod"
            });
            _this.promiseData[id] = {
                reject: reject,
                resolve: resolve
            };
        });
    };
    ElmerWorker.prototype.callObjMethod = function (objKey, methodName) {
        var _this = this;
        var params = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            params[_i - 2] = arguments[_i];
        }
        return new Promise(function (resolve, reject) {
            var id = _this.getRandomID();
            _this.sendMsg({
                data: params,
                id: id,
                method: methodName,
                obj: objKey,
                type: "CallObjMethod"
            });
            _this.promiseData[id] = {
                reject: reject,
                resolve: resolve
            };
        });
    };
    ElmerWorker.prototype.addFunc = function (globalName, fn) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var id = _this.getRandomID();
            _this.sendMsg({
                data: StaticFunc_1.funcToStr(fn),
                globalName: globalName,
                id: id,
                type: "InitFunction"
            });
            _this.promiseData[id] = {
                reject: reject,
                resolve: resolve
            };
        });
    };
    ElmerWorker.prototype.addObject = function (globalName, obj) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var id = _this.getRandomID();
            _this.sendMsg({
                data: StaticFunc_1.objectToWorkerData(obj),
                globalName: globalName,
                id: id,
                type: "InitObject"
            });
            _this.promiseData[id] = {
                reject: reject,
                resolve: resolve
            };
        });
    };
    ElmerWorker.prototype.dispose = function () {
        this.worker.terminate();
        this.worker = null;
    };
    ElmerWorker.prototype.on = function (eventName, callBack) {
        this.listener[eventName] = callBack;
    };
    ElmerWorker.prototype.getInitPropsCode = function () {
        var result = "";
        if (this.props) {
            for (var key in this.props) {
                var tmpValue = this.props[key];
                if (this.isObject(tmpValue)) {
                    result += "var " + key + " = " + StaticFunc_1.objectToWorkerCode(this.props[key], key) + "\r\n";
                } else if (this.isNumeric(tmpValue)) {
                    result += "var " + key + " = " + tmpValue + ";\r\n";
                } else if (this.isFunction(tmpValue)) {
                    tmpValue = tmpValue.toString();
                    result += "var " + key + " = " + tmpValue + ";\r\n";
                } else if (this.isArray(tmpValue) || this.isString(tmpValue)) {
                    tmpValue = JSON.stringify(tmpValue);
                    result += "var " + key + " = " + tmpValue + ";\r\n";
                } else if (this.isRegExp(tmpValue)) {
                    tmpValue = tmpValue.source;
                    result += "var " + key + " = " + tmpValue + ";\r\n";
                } else {
                    throw new Error("不支持的数据类型");
                }
            }
        }
        return result;
    };
    ElmerWorker.prototype.createWorker = function () {
        var myBlob = new Blob([this.initBlobCode()]);
        this.worker = new Worker(window.URL.createObjectURL(myBlob));
    };
    ElmerWorker.prototype.bindEvent = function () {
        this.worker.addEventListener("message", this.message.bind(this));
        this.worker.addEventListener("error", this.error.bind(this));
    };
    ElmerWorker.prototype.error = function (err) {
        if (typeof this.listener.message === "function") {
            var eventData = {
                cancel: false,
                message: err.message,
                srcEvent: err
            };
            this.listener.message(eventData);
            if (eventData.cancel) {
                return;
            }
        }
    };
    ElmerWorker.prototype.message = function (event) {
        var data = event.data;
        var id = data.id;
        if (typeof this.listener.message === "function") {
            var eventData = {
                cancel: false,
                data: event.data,
                srcEvent: event
            };
            this.listener.message(eventData);
            if (eventData.cancel) {
                return;
            }
        }
        if (data.type === "CallMethod" || data.type === "CallObjMethod") {
            if (this.promiseData[id]) {
                var methodResponse = data;
                if (methodResponse.statusCode === 200) {
                    this.promiseData[id].resolve(methodResponse);
                } else {
                    this.promiseData[id].reject(methodResponse);
                }
                delete this.promiseData[id];
            } else {
                typeof this.listener.callMethodResponse === "function" && this.listener.callMethodResponse({
                    cancel: false,
                    data: data,
                    srcEvent: event
                });
            }
        } else if (data.type === "InitObject" || data.type === "InitFunction") {
            if (this.promiseData[id]) {
                var initResponse = data;
                if (initResponse.statusCode === 200) {
                    this.promiseData[id].resolve(initResponse);
                } else {
                    this.promiseData[id].reject(initResponse);
                }
                delete this.promiseData[id];
            } else {
                typeof this.listener.initResponse === "function" && this.listener.initResponse({
                    cancel: false,
                    data: data,
                    srcEvent: event
                });
            }
        }
    };
    ElmerWorker.prototype.sendMsg = function (msg) {
        this.worker.postMessage(msg);
    };
    ElmerWorker.prototype.initBlobCode = function () {
        var strToFuncCode = StaticFunc_1.strToFunc.toString();
        var coreCode = StaticFunc_1.objectToWorkerCode(new ElmerWorkerCore_1.ElmerWorkerCore(), "ElmerWorkerCore");
        var staticCode = StaticFunc_1.classToWorkerCode(elmer_common_1.StaticCommon);
        var code = [];
        code.push("var strToFunc = " + strToFuncCode);
        code.push("var __spreadArrays = " + StaticFunc_1.funcToStr(StaticFunc_1.__spreadArrays));
        code.push("var workerDataToObject = " + StaticFunc_1.funcToStr(StaticFunc_1.workerDataToObject));
        code.push("var utils = " + staticCode);
        code.push("var elmer = " + coreCode);
        code.push(this.getInitPropsCode());
        code.push("onmessage = " + StaticFunc_1.funcToStr(StaticFunc_1.onmessage));
        return code.join("\r\n");
    };
    return ElmerWorker;
}(elmer_common_1.Common);
exports.ElmerWorker = ElmerWorker;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var ElmerWorkerCore = function () {
    function ElmerWorkerCore() {}
    ElmerWorkerCore.prototype.sendMsg = function (msg) {
        self["postMessage"](msg);
    };
    return ElmerWorkerCore;
}();
exports.ElmerWorkerCore = ElmerWorkerCore;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ElmerAnimation = undefined;

var _elmerCommon = __webpack_require__(0);

var _ElmerAnimationProperty = __webpack_require__(20);

var _ElmerAnimationProperty2 = _interopRequireDefault(_ElmerAnimationProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ElmerAnimation = /** @class */function () {
    function ElmerAnimation(options) {
        this.options = options;
        this.animationData = [];
        this.cavAnimation = new _elmerCommon.Canvas();
        this.calcFrameAttribute();
        this.start();
    }
    ElmerAnimation.prototype.start = function () {
        if (this.options) {
            typeof this.options.onBegin === "function" && this.options.onBegin();
            this.beginTime = new Date().getTime();
            this.handler = this.cavAnimation.startAnimation(this.animationCallBack, this);
        }
    };
    ElmerAnimation.prototype.stop = function () {
        this.cavAnimation.stopAnimation(this.handler);
        this.options && typeof this.options.onEnd === "function" && this.options.onEnd();
        this.dispose();
    };
    ElmerAnimation.prototype.calcFrameAttribute = function () {
        var data = this.options.data || [];
        var animationData = [];
        data.map(function (item) {
            animationData.push({
                beginTime: item.beginTime,
                defaultData: _ElmerAnimationProperty2.default.readWillChangeCssDefaultData(item.dom, item.from, item.to),
                dom: item.dom,
                duration: item.duration,
                fromData: _ElmerAnimationProperty2.default.converOption(item.from),
                onBegin: item.onStart,
                onEnd: item.onFinish,
                optionA: item.optionA,
                optionP: item.optionP,
                optionS: item.optionS,
                toData: _ElmerAnimationProperty2.default.converOption(item.to),
                type: item.type
            });
        });
        this.animationData = animationData;
    };
    ElmerAnimation.prototype.dispose = function () {
        if (this.animationData && this.animationData.length > 0) {
            this.animationData.map(function (tmpItem) {
                typeof tmpItem.onEnd === "function" && tmpItem.onEnd({
                    default: tmpItem.defaultData,
                    from: tmpItem.fromData,
                    to: tmpItem.toData
                });
            });
        }
        this.animationData = null;
        this.cavAnimation = null;
        this.options = null;
        this.timeAnimationCallBack = null;
        delete this.animationData;
        delete this.cavAnimation;
        delete this.options;
        delete this.timeAnimationCallBack;
    };
    ElmerAnimation.prototype.getTimeAnimationCallBack = function (animationType) {
        var resultCallBack = null;
        switch (animationType) {
            case "Linear":
                resultCallBack = _elmerCommon.MathAnimationApi.Linear;
                break;
            case "BackEaseIn":
                resultCallBack = _elmerCommon.MathAnimationApi.Back.easeIn;
                break;
            case "BackEaseInOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Back.easeInOut;
                break;
            case "BackEaseOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Back.easeOut;
                break;
            case "BounceEaseIn":
                resultCallBack = _elmerCommon.MathAnimationApi.Bounce.easeIn;
                break;
            case "BounceEaseInOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Bounce.easeInOut;
                break;
            case "BounceEaseOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Bounce.easeOut;
                break;
            case "CircleEaseIn":
                resultCallBack = _elmerCommon.MathAnimationApi.Circle.easeIn;
                break;
            case "CircleEaseInOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Circle.easeInOut;
                break;
            case "CircleEaseOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Circle.easeOut;
                break;
            case "CubicEaseIn":
                resultCallBack = _elmerCommon.MathAnimationApi.Cubic.easeIn;
                break;
            case "CubicEaseInOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Cubic.easeInOut;
                break;
            case "CubicEaseOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Cubic.easeOut;
                break;
            case "ElasticEaseIn":
                resultCallBack = _elmerCommon.MathAnimationApi.Elastic.easeIn;
                break;
            case "ElasticEaseInOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Elastic.easeInOut;
                break;
            case "ElasticEaseOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Elastic.easeOut;
                break;
            case "ExpoEaseIn":
                resultCallBack = _elmerCommon.MathAnimationApi.Expo.easeIn;
                break;
            case "ExpoEaseInOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Expo.easeInOut;
                break;
            case "ExpoEaseOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Expo.easeOut;
                break;
            case "QuadEaseIn":
                resultCallBack = _elmerCommon.MathAnimationApi.Quad.easeIn;
                break;
            case "QuadEaseInOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Quad.easeInOut;
                break;
            case "QuadEaseOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Quad.easeOut;
                break;
            case "QuartEaseIn":
                resultCallBack = _elmerCommon.MathAnimationApi.Quart.easeIn;
                break;
            case "QuartEaseInOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Quart.easeInOut;
                break;
            case "QuartEaseOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Quart.easeOut;
                break;
            case "QuintEaseIn":
                resultCallBack = _elmerCommon.MathAnimationApi.Quint.easeIn;
                break;
            case "QuintEaseInOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Quint.easeInOut;
                break;
            case "QuintEaseOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Quint.easeOut;
                break;
            case "SineEaseIn":
                resultCallBack = _elmerCommon.MathAnimationApi.Sine.easeIn;
                break;
            case "SineEaseInOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Sine.easeInOut;
                break;
            case "SineEaseOut":
                resultCallBack = _elmerCommon.MathAnimationApi.Sine.easeOut;
                break;
        }
        return resultCallBack;
    };
    ElmerAnimation.prototype.animationCallBack = function () {
        var _this = this;
        var curTime = new Date().getTime();
        var offset = curTime - this.beginTime;
        if (!this.options) {
            this.stop();
        } else {
            if (offset > this.options.duration) {
                this.stop();
            } else {
                this.animationData.map(function (itemData, keyIndex) {
                    var itemBeginTime = itemData.beginTime || 0;
                    if (itemBeginTime <= offset && offset <= itemBeginTime + itemData.duration) {
                        if (!itemData.isBegin) {
                            itemData.isBegin = true;
                            typeof itemData.onBegin === "function" && itemData.onBegin(itemData);
                        }
                        var updateCssProperty = _this.calcUpdateProperty(offset, itemData);
                        typeof _this.options.onChange === "function" && _this.options.onChange({
                            data: updateCssProperty,
                            dom: itemData.dom,
                            value: _ElmerAnimationProperty2.default.converAnimationProperty(updateCssProperty)
                        });
                    } else {
                        if (offset > itemBeginTime + itemData.duration) {
                            typeof itemData.onEnd === "function" && itemData.onEnd({
                                default: itemData.defaultData,
                                from: itemData.fromData,
                                to: itemData.toData
                            });
                            delete _this.animationData[keyIndex];
                        }
                    }
                });
            }
        }
        curTime = null;
        offset = null;
    };
    ElmerAnimation.prototype.calcUpdateProperty = function (time, data) {
        var _this = this;
        var timeAnimationCallBack = this.getTimeAnimationCallBack(data.type);
        var updateProperty = {};
        if (typeof timeAnimationCallBack === "function") {
            Object.keys(data.toData).map(function (cssKey) {
                var defaultValue = data.defaultData[cssKey];
                var beginValue = data.fromData[cssKey] || defaultValue;
                var toValue = data.toData[cssKey];
                var toValueData = [];
                var beginValueData = [];
                var updateValue = {};
                toValueData.push(toValue.value1);
                toValueData.push(toValue.value2);
                toValueData.push(toValue.value3);
                toValueData.push(toValue.value4);
                beginValueData.push(beginValue.value1);
                beginValueData.push(beginValue.value2);
                beginValueData.push(beginValue.value3);
                beginValueData.push(beginValue.value4);
                toValueData.map(function (tmpValue, index) {
                    var dataIndex = index + 1;
                    var dataKey = "value" + dataIndex;
                    if (!(0, _ElmerAnimationProperty.isCssEmpty)(tmpValue)) {
                        var beginValueNum_1 = 0;
                        if (_elmerCommon.StaticCommon.isArray(tmpValue)) {
                            var tmpSplitValues_1 = [];
                            tmpValue.map(function (tmpSplitData, subIndex) {
                                beginValueNum_1 = beginValueData[index][subIndex] || 0;
                                tmpSplitValues_1.push(_this.calcTimeAnimationResult(time, data.type, timeAnimationCallBack, {
                                    beginValue: beginValueNum_1,
                                    changeValue: tmpSplitData - beginValueNum_1,
                                    currentTime: time,
                                    duration: data.duration,
                                    optionA: data.optionA,
                                    optionP: data.optionP,
                                    optionS: data.optionS
                                }));
                            });
                            updateValue[dataKey] = tmpSplitValues_1;
                        } else {
                            beginValueNum_1 = beginValueData[index] || 0;
                            updateValue[dataKey] = _this.calcTimeAnimationResult(time, data.type, timeAnimationCallBack, {
                                beginValue: beginValueNum_1,
                                changeValue: tmpValue - beginValueNum_1,
                                currentTime: time,
                                duration: data.duration,
                                optionA: data.optionA,
                                optionP: data.optionP,
                                optionS: data.optionS
                            });
                        }
                        updateValue["value" + dataIndex + "Unit"] = toValue["value" + dataIndex + "Unit"];
                    }
                });
                updateProperty[cssKey] = updateValue;
            });
        }
        timeAnimationCallBack = null;
        return updateProperty;
    };
    ElmerAnimation.prototype.calcTimeAnimationResult = function (time, type, timeAnimationCallBack, options) {
        var result = 0;
        if (typeof options.beginValue === "number" && typeof options.changeValue === "number" && typeof options.duration === "number") {
            if (["ElasticEaseIn", "ElasticEaseInOut", "ElasticEaseOut", "BackEaseIn", "BackEaseInOut", "BackEaseOut"].indexOf(type) < 0) {
                result = timeAnimationCallBack(time, options.beginValue, options.changeValue, options.duration);
            } else {
                if (["ElasticEaseIn", "ElasticEaseInOut", "ElasticEaseOut"].indexOf(type) >= 0) {
                    result = timeAnimationCallBack(time, options.beginValue, options.changeValue, options.duration, options.optionA, options.optionP);
                } else if (["BackEaseIn", "BackEaseInOut", "BackEaseOut"].indexOf(type) >= 0) {
                    result = timeAnimationCallBack(time, options.beginValue, options.changeValue, options.duration, options.optionS);
                }
            }
        } else {
            result = undefined;
        }
        return result;
    };
    return ElmerAnimation;
}();
exports.ElmerAnimation = ElmerAnimation;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
// tslint:disable: object-literal-sort-keys
exports.default = {
    maroon: "#800000",
    darkred: "#8B0000",
    brown: "#A52A2A",
    firebrick: "#B22222",
    crimson: "#DC143C",
    red: "#FF0000",
    mediumvioletred: "#C71585",
    palevioletred: "#D87093",
    deeppink: "#FF1493",
    fuchsia: "#FF00FF",
    magenta: "#FF00FF",
    hotpink: "#FF69B4",
    pink: "#FFC0CB",
    lightpink: "#FFB6C1",
    mistyrose: "#FFE4E1",
    lavenderblush: "#FFF0F5",
    indigo: "#4B0082",
    purple: "#800080",
    darkmagenta: "#8B008B",
    darkorchid: "#9932CC",
    blueviolet: "#8A2BE2",
    darkviolet: "#9400D3",
    slateblue: "#6A5ACD",
    mediumpurple: "#9370DB",
    mediumslateblue: "#7B68EE",
    mediumorchid: "#BA55D3",
    violet: "#EE82EE",
    plum: "#DDA0DD",
    thistle: "#D8BFD8",
    lavender: "#E6E6FA",
    saddlebrown: "#8B4513",
    sienna: "#A0522D",
    chocolate: "#D2691E",
    indianred: "#CD5C5C",
    rosybrown: "#BC8F8F",
    lightcorol: "#F08080",
    salmon: "#FA8072",
    lightsalmon: "#FFA07A",
    orangered: "#FF4500",
    tomato: "#FF6347",
    coral: "#FF7F50",
    darkorange: "#FF8C00",
    sandybrown: "#F4A460",
    peru: "#CD853F",
    tan: "#D2B48C",
    burlywood: "#DEB887",
    wheat: "#F5DEB3",
    moccasin: "#FFE4B5",
    navajowhite: "#FFDEAD",
    peachpuff: "#FFDAB9",
    bisque: "#FFE4C4",
    antuquewhite: "#FAEBD7",
    papayawhip: "#FFEFD5",
    cornsilk: "#FFF8DC",
    oldlace: "#FDF5E6",
    linen: "#FAF0E6",
    seashell: "#FFF5EE",
    snow: "#FFFAFA",
    floralwhite: "#FFFAF0",
    ivory: "#FFFFF0",
    mintcream: "#F5FFFA",
    darkgoldenrod: "#B8860B",
    goldenrod: "#DAA520",
    gold: "#FFD700",
    yellow: "#FFFF00",
    darkkhaki: "#BDB76B",
    khaki: "#F0E68C",
    palegoldenrod: "#EEE8AA",
    beige: "#F5F5DC",
    lemonchiffon: "#FFFACD",
    lightgoldenrodyellow: "#FAFAD2",
    lightyellow: "#FFFFE0",
    darkslategray: "#2F4F4F",
    darkolivegreen: "#556B2F",
    olive: "#808000",
    darkgreen: "#006400",
    forestgreen: "#228B22",
    seagreen: "#2E8B57",
    green: "#008080",
    teal: "#008080",
    lightseagreen: "#20B2AA",
    madiumaquamarine: "#66CDAA",
    mediumseagreen: "#3CB371",
    darkseagreen: "#8FBC8F",
    yellowgreen: "#9ACD32",
    limegreen: "#32CD32",
    lime: "#00FF00",
    chartreuse: "#7FFF00",
    lawngreen: "#7CFC00",
    greenyellow: "#ADFF2F",
    mediumspringgreen: "#00FA9A",
    springgreen: "#00FF7F",
    lightgreen: "#90EE90",
    palegreen: "#98F898",
    aquamarine: "#7FFFD4",
    honeydew: "#F0FFF0",
    midnightblue: "#191970",
    navy: "#000080",
    darkblue: "#00008B",
    darkslateblue: "#483D8B",
    mediumblue: "#0000CD",
    royalblue: "#4169E1",
    dodgerblue: "#1E90FF",
    cornflowerblue: "#6495ED",
    deepskyblue: "#00BFFF",
    lightskyblue: "#87CEFA",
    lightsteelblue: "#B0C4DE",
    lightblue: "#ADD8E6",
    steelblue: "#4682B4",
    darkcyan: "#008B8B",
    cadetblue: "#5F9EA0",
    darkturquoise: "#00CED1",
    mediumturquoise: "#48D1CC",
    turquoise: "#40E0D0",
    skyblue: "#87CECB",
    powderblue: "#B0E0E6",
    paleturquoise: "#AFEEEE",
    lightcyan: "#E0FFFF",
    azure: "#F0FFFF",
    aliceblue: "#F0F8FF",
    cyan: "#00FFFF",
    aqua: "#00FFFF",
    black: "#000000",
    dimgray: "#696969",
    gray: "#808080",
    slategray: "#708090",
    lightslategray: "#778899",
    dakgray: "#A9A9A9",
    silver: "#C0C0C0",
    lightgray: "#D3D3D3",
    gainsboro: "#DCDCDC",
    whitesmoke: "#F5F5F5",
    ghostwhite: "#F8F8FF",
    white: "#FFFFFF"
};
// tslint:endable: object-literal-sort-keys

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var EventNames = exports.EventNames = ["abort", "activate", "beforeactivate", "beforecopy", "beforecut", "beforedeactivate", "beforepaste", "blur", "canplay", "canplaythrough", "change", "click", "contextmenu", "copy", "cuechange", "cut", "dblclick", "deactivate", "drag", "dragend", "dragenter", "dragleave", "dragover", "dragstart", "drop", "durationchange", "emptied", "ended", "error", "focus", "input", "invalid", "keydown", "keypress", "keyup", "load", "loadeddata", "loadedmetadata", "loadstart", "mousedown", "mouseenter", "mouseleave", "mousemove", "mouseout", "mouseover", "mouseup", "mousewheel", "MSContentZoom", "MSManipulationStateChanged", "paste", "pause", "play", "playing", "progress", "ratechange", "reset", "scroll", "seeked", "seeking", "select", "selectstart", "stalled", "submit", "suspend", "timeupdate", "volumechange", "waiting", "ariarequest", "command", "gotpointercapture", "lostpointercapture", "MSGestureChange", "MSGestureDoubleTap", "MSGestureEnd", "MSGestureHold", "MSGestureStart", "MSGestureTap", "MSGotPointerCapture", "MSInertiaStart", "MSLostPointerCapture", "MSPointerCancel", "MSPointerDown", "MSPointerEnter", "MSPointerLeave", "MSPointerMove", "MSPointerOut", "MSPointerOver", "MSPointerUp", "touchcancel", "touchend", "touchmove", "touchstart", "webkitfullscreenchange", "webkitfullscreenerror", "pointercancel", "pointerdown", "pointerenter", "pointerleave", "pointermove", "pointerout", "pointerover", "pointerup", "wheel", "animationend", "animationEnd", "webkitAnimationEnd", "mozAnimationEnd", "msAnimationEnd", "oAnimationEnd", "transitionend", "transitionEnd", "webkitTransitionEnd", "mozTransitionEnd", "msTransitionEnd", "oTransitionEnd"];

/***/ }),
/* 53 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),
/* 54 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ElmerDomEvent = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _elmerCommon = __webpack_require__(0);

var _injectable = __webpack_require__(1);

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var ElmerDomEvent = /** @class */function (_super) {
    __extends(ElmerDomEvent, _super);
    function ElmerDomEvent() {
        return _super.call(this) || this;
    }
    ElmerDomEvent.prototype.setConfig = function (dom, eventHandle) {
        this.eventDom = dom;
        this.callBack = eventHandle;
    };
    ElmerDomEvent.prototype.handleEvent = function () {
        if (this.isFunction(this.callBack)) {
            var args = [].slice.call(arguments);
            args.push(this.eventDom);
            this.callBack.apply(this.eventDom, args);
        }
    };
    ElmerDomEvent = __decorate([(0, _injectable.injectable)("ElmerDomEvent"), __metadata("design:paramtypes", [])], ElmerDomEvent);
    return ElmerDomEvent;
}(_elmerCommon.Common);
exports.ElmerDomEvent = ElmerDomEvent;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ElmerDomQuery = undefined;

var _elmerCommon = __webpack_require__(0);

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var ElmerDomQuery = /** @class */function (_super) {
    __extends(ElmerDomQuery, _super);
    function ElmerDomQuery() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ElmerDomQuery.prototype.getSelectors = function (selector) {
        var _this = this;
        var regs = [];
        if (!this.isEmpty(selector)) {
            var rgs = selector.split(",");
            rgs.map(function (tmpRegStr) {
                regs.push(_this.getSelector(tmpRegStr));
            });
        }
        return regs;
    };
    ElmerDomQuery.prototype.getSelector = function (querySelector) {
        var result = {};
        var queryStr = querySelector.replace(/^\s*/, "").replace(/\s*$/, "");
        var prefReg = /^(\>|\+)([a-z0-9\-_\.#\[\]\s=\>\+\:]*)$/i;
        var prefMatch = queryStr.match(prefReg);
        var leftCode = "";
        var nodeQueryStr = queryStr;
        var nodeMode = "";
        if (prefMatch) {
            // 特殊mode
            nodeQueryStr = prefMatch[2];
            nodeMode = prefMatch[1];
        }
        var queryNodeResult = this.getSelectorNode(nodeQueryStr);
        if (queryNodeResult) {
            result.mode = nodeMode;
            result.type = queryNodeResult.type;
            result.value = queryNodeResult.value;
            leftCode = queryNodeResult.leftCode || "";
        }
        leftCode = leftCode.replace(/^\s*/, "").replace(/\s*$/, "");
        if (!this.isEmpty(leftCode) && leftCode.length > 0) {
            result.child = this.getSelector(leftCode);
        }
        return result;
    };
    ElmerDomQuery.prototype.getSelectorNode = function (queryStr) {
        var prefReg = /^([\.#])([a-z0-9][a-z0-9\-_\.#\[\]\s=\>\+\:]*)$/i;
        var prefMatch = queryStr.match(prefReg);
        var result = {};
        var nodeReg = /^([a-z0-9][a-z0-9\-_\[\]=\.\:]*)([\s\>\+])/i;
        var nodeEndReg = /^([a-z0-9][a-z0-9\-_\[\]=\.\:]*)\s*$/i;
        var nodeValueStr = queryStr;
        var pref = "";
        if (prefMatch) {
            pref = prefMatch[1];
            nodeValueStr = prefMatch[2];
        }
        var nodeMatch = nodeValueStr.match(nodeReg);
        result.type = pref;
        if (nodeMatch) {
            result.value = nodeMatch[1];
            result.leftCode = nodeValueStr.replace(nodeReg, "$2");
        } else {
            var endNodeMatch = nodeValueStr.match(nodeEndReg);
            if (endNodeMatch) {
                result.value = endNodeMatch[0];
            }
        }
        return result;
    };
    return ElmerDomQuery;
}(_elmerCommon.Common);
exports.ElmerDomQuery = ElmerDomQuery;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ElmerEvent = undefined;

var _elmerCommon = __webpack_require__(0);

var ElmerEvent = /** @class */function () {
    function ElmerEvent(worker) {
        this.eventListeners = {};
        this.nodeMap = {};
        this.worker = worker;
    }
    /**
     * mount node to the event object
     * @param path node path
     */
    ElmerEvent.prototype.nodeRegister = function (nodePath, path) {
        var pathReg = /\.([a-z0-9\-\_]{1,})$/i;
        var pMatch = nodePath.match(pathReg);
        var parentPath = pMatch ? nodePath.replace(pathReg, "") : null;
        var currentPath = pMatch ? pMatch[1] : nodePath;
        if (!_elmerCommon.StaticCommon.isEmpty(parentPath)) {
            var parentPathKey = parentPath.replace(/\./g, ".nodes.");
            var pNode = _elmerCommon.StaticCommon.getValue(this.nodeMap, parentPathKey);
            pNode.nodes[currentPath] = {
                events: {},
                nodes: {},
                parent: "",
                path: path
            };
        } else {
            this.nodeMap[currentPath] = {
                events: {},
                nodes: {},
                parent: "",
                path: path
            };
        }
    };
    /**
     * 渲染之前调用此方法清除旧的事件监听，渲染的时候将新事件监听重新绑定
     * 删除节点的时候通过回调从最底层节点开始删除
     * @param path nodePath
     * @param deleteNodeMap 是否删除虚拟节点
     */
    ElmerEvent.prototype.nodeUnRegister = function (path, deleteNodeMap) {
        var _this = this;
        var eventNodePath = path.replace(/\./g, ".nodes.");
        var parentNode = eventNodePath.replace(/\.[a-z0-9\-\_]{1,}$/i, "");
        var nodePath = eventNodePath.match(/\.([a-z0-9\-\_]{1,})$/i);
        var nodeObj = _elmerCommon.StaticCommon.getValue(this.nodeMap, parentNode);
        if (nodeObj) {
            if (nodeObj.events) {
                Object.keys(nodeObj.events).map(function (evtName) {
                    var handleData = _this.eventListeners[evtName];
                    var eventData = nodeObj.events[evtName];
                    if (handleData && eventData.paths) {
                        var events = handleData.events;
                        for (var _i = 0, _a = eventData.paths; _i < _a.length; _i++) {
                            var evtData = _a[_i];
                            delete events[evtData.eventId];
                        }
                        if (Object.keys(events).length <= 0) {
                            _this.removeEventListen(evtName, handleData.handler);
                        }
                        eventData.listeners = {};
                        eventData.eventPathId = [];
                        eventData.paths = [];
                    }
                });
            }
            if (parentNode !== path) {
                deleteNodeMap && nodePath && delete nodeObj[nodePath[1]];
            } else {
                if (deleteNodeMap) {
                    this.nodeMap[path] = {
                        events: {},
                        nodes: {},
                        parent: ""
                    };
                }
            }
        }
    };
    /**
     * 注册事件监听
     * @param options 注册事件监听参数
     */
    ElmerEvent.prototype.subscribe = function (options) {
        var path = options.path,
            eventName = options.eventName,
            callback = options.callback,
            vNodePath = options.vNodePath;
        var evtId = "evt_" + _elmerCommon.StaticCommon.guid();
        var pathStr = path.join(",");
        var eventNodePath = vNodePath.replace(/\./g, ".nodes.");
        var eventNode = _elmerCommon.StaticCommon.getValue(this.nodeMap, eventNodePath);
        if (!_elmerCommon.StaticCommon.isEmpty(eventName)) {
            if (!eventNode) {
                this.nodeRegister(vNodePath, path);
                eventNode = _elmerCommon.StaticCommon.getValue(this.nodeMap, eventNodePath);
            }
            // console.log(eventNode, vNodePath);return;
            var evtObj = eventNode.events[eventName];
            if (!evtObj) {
                var eventHandler = this.createEventHandler();
                eventNode.events[eventName] = {
                    eventPathId: [],
                    listeners: {},
                    paths: []
                };
                evtObj = eventNode.events[eventName];
                if (!this.eventListeners[eventName]) {
                    this.eventListeners[eventName] = {
                        events: {},
                        handler: eventHandler
                    };
                    this.addEventListener(eventName, eventHandler);
                }
            }
            if (evtObj.eventPathId.indexOf(pathStr) < 0) {
                // 当前path不存在事件监听列表中才能加入列表
                evtObj.eventPathId.push(pathStr);
                evtObj.listeners[evtId] = callback;
                evtObj.paths.push({
                    eventId: evtId,
                    path: path
                });
                this.eventListeners[eventName].events[evtId] = {
                    nodePath: vNodePath
                };
            }
        }
        return evtId;
    };
    ElmerEvent.prototype.unsubscribe = function (eventName, eventId) {
        // remove event listen
        if (this.eventListeners[eventName]) {
            var eventData = this.eventListeners[eventName];
            var events = eventData.events;
            var eventHandleData = events[eventId];
            if (eventHandleData) {
                var vNodePath = eventHandleData.nodePath;
                var eventNodePath = vNodePath.replace(/\./g, ".nodes.");
                var eventNodeMap = _elmerCommon.StaticCommon.getValue(this.nodeMap, eventNodePath);
                if (eventNodeMap) {
                    var eventNodeData = eventNodeMap.events[eventName];
                    var newPath = [];
                    var newPathData = [];
                    for (var i = 0; i < eventNodeData.paths.length; i++) {
                        if (eventNodeData.paths[i].eventId !== eventId) {
                            newPath.push(eventNodeData.paths[i].path.join(","));
                            newPathData.push(eventNodeData.paths[i]);
                        }
                    }
                    eventNodeData.eventPathId = newPath;
                    eventNodeData.paths = newPathData;
                }
                delete eventData.events[eventId];
                if (Object.keys(eventData.events).length <= 0) {
                    this.removeEventListen(eventName, eventData.handler);
                }
            }
        }
    };
    ElmerEvent.prototype.dispose = function () {
        var _this = this;
        Object.keys(this.eventListeners).map(function (eventName) {
            var evtObj = _this.eventListeners[eventName];
            Object.keys(evtObj).map(function (evtId) {
                _this.removeEvent(document.body, eventName, evtObj[evtId].callback);
            });
            delete _this.eventListeners[eventName];
        });
        this.eventListeners = {};
    };
    ElmerEvent.prototype.callEventAction = function (evt, eventName, path, vNodePath) {
        var _this = this;
        var eventNodePath = vNodePath.replace(/\./g, ".nodes.");
        var eventNode = _elmerCommon.StaticCommon.getValue(this.nodeMap, eventNodePath);
        if (eventNode && eventNode.events) {
            var eventData_1 = null;
            // tslint:disable-next-line: forin
            for (var evtName in eventNode.events) {
                if (evtName === eventName) {
                    eventData_1 = eventNode.events[evtName];
                    break;
                }
            }
            // 当前节点没有事件handler,往上一级执行，一直到最上层元素，或则有事件触发cancelBubble事件属性
            if (!eventData_1) {
                var parentNode = vNodePath.replace(/\.[a-z0-9\-\_]{1,}$/i, "");
                !_elmerCommon.StaticCommon.isEmpty(parentNode) && parentNode !== vNodePath && this.callEventAction(evt, eventName, eventNode.path, parentNode);
            } else {
                this.worker.callObjMethod("elmerEvent", "sortEventId", eventData_1.paths, path).then(function (resp) {
                    if (/^200$/.test(resp.statusCode)) {
                        var respData = resp.data || {};
                        var evtIds = respData.allPathData || [];
                        var width = window.innerWidth,
                            height = window.innerHeight,
                            outWidth = window.outerWidth,
                            outHeight = window.outerHeight;
                        var evtParams = [];
                        var curPath = respData.path;
                        var isCancelBubble = false;
                        for (var _i = 0, evtIds_1 = evtIds; _i < evtIds_1.length; _i++) {
                            var evtMap = evtIds_1[_i];
                            var bubbleEvent = {
                                cancelBubble: false,
                                nativeEvent: evt,
                                windowRect: {
                                    height: height,
                                    outHeight: outHeight,
                                    outWidth: outWidth,
                                    width: width
                                }
                            };
                            if (eventName !== "resize") {
                                if (evtMap.path && evtMap.path.length <= curPath.length) {
                                    var forEvtIDS = evtMap.path.join(",");
                                    var compareIDS = curPath.slice(0, evtMap.path.length).join(",");
                                    if (forEvtIDS === compareIDS) {
                                        var evtCallback = eventData_1.listeners[evtMap.eventId];
                                        evtCallback(bubbleEvent, evtParams);
                                        if (bubbleEvent.cancelBubble) {
                                            isCancelBubble = true;
                                            break;
                                        }
                                    }
                                }
                            } else {
                                var evtCallback = eventData_1.listeners[evtMap.eventId];
                                evtCallback(bubbleEvent, evtParams);
                            }
                        }
                        if (!isCancelBubble) {
                            var parentNode = vNodePath.replace(/\.[a-z0-9\-\_]{1,}$/i, "");
                            !_elmerCommon.StaticCommon.isEmpty(parentNode) && parentNode !== vNodePath && _this.callEventAction(evt, eventName, eventNode.path, parentNode);
                        }
                    } else {
                        throw new Error("\u6267\u884C\u4E8B\u4EF6\u56DE\u8C03\u51FA\u73B0\u9519\u8BEF:" + resp.message);
                    }
                }).catch(function (error) {
                    error["from"] = "virtual event module";
                    throw error;
                });
            }
        }
    };
    ElmerEvent.prototype.createEventHandler = function () {
        var _this = this;
        return function (evt) {
            var target = evt.target;
            var path = target.path;
            var vNodePath = target.vNodePath;
            var eventName = evt.type;
            if (!_elmerCommon.StaticCommon.isEmpty(path) && !_elmerCommon.StaticCommon.isEmpty(vNodePath)) {
                _this.callEventAction(evt, eventName, path, vNodePath);
            }
        };
    };
    ElmerEvent.prototype.addEventListener = function (eventName, eventCallback) {
        if (eventName !== "resize") {
            this.addEvent(document.body, eventName, eventCallback);
            if (eventName === "animationEnd") {
                this.addEvent(document.body, "webkitAnimationEnd", eventCallback);
                this.addEvent(document.body, "mozAnimationEnd", eventCallback);
                this.addEvent(document.body, "msAnimationEnd", eventCallback);
                this.addEvent(document.body, "oAnimationEnd", eventCallback);
            } else if (eventName === "transitionEnd") {
                this.addEvent(document.body, "webkitTransitionEnd", eventCallback);
                this.addEvent(document.body, "mozTransitionEnd", eventCallback);
                this.addEvent(document.body, "msTransitionEnd", eventCallback);
                this.addEvent(document.body, "oTransitionEnd", eventCallback);
            }
        } else {
            this.addEvent(window, eventName, eventCallback);
        }
    };
    ElmerEvent.prototype.removeEventListen = function (eventName, callback) {
        if (eventName !== "resize") {
            this.removeEvent(document.body, eventName, callback);
            if (eventName === "animationEnd") {
                this.removeEvent(document.body, "webkitAnimationEnd", callback);
                this.removeEvent(document.body, "mozAnimationEnd", callback);
                this.removeEvent(document.body, "msAnimationEnd", callback);
                this.removeEvent(document.body, "oAnimationEnd", callback);
            } else if (eventName === "transitionEnd") {
                this.removeEvent(document.body, "webkitTransitionEnd", callback);
                this.removeEvent(document.body, "mozTransitionEnd", callback);
                this.removeEvent(document.body, "msTransitionEnd", callback);
                this.removeEvent(document.body, "oTransitionEnd", callback);
            }
        } else {
            this.removeEvent(window, "resize", callback);
        }
    };
    ElmerEvent.prototype.addEvent = function (dom, eventName, callback) {
        if (dom.addEventListener) {
            dom.addEventListener(eventName, callback, {
                passive: true
            });
        } else if (dom.attachEvent) {
            dom.attachEvent("on" + eventName, callback);
        }
    };
    ElmerEvent.prototype.removeEvent = function (dom, eventName, callback) {
        if (dom.removeEventListener) {
            dom.removeEventListener(eventName, callback);
        } else if (dom.detachEvent) {
            dom.detachEvent("on" + eventName, callback);
        }
    };
    return ElmerEvent;
}();
exports.ElmerEvent = ElmerEvent;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var EventInWorker = /** @class */function () {
    function EventInWorker() {}
    EventInWorker.prototype.sortEventId = function (mapData, eventPath) {
        if (self["utils"].isArray(mapData)) {
            for (var i = 0; i < mapData.length; i++) {
                var checkItem = mapData[i];
                for (var j = i; j < mapData.length; j++) {
                    var mapItem = mapData[j];
                    if (this.isNextPath(checkItem.path, mapItem.path)) {
                        mapData[i] = mapItem;
                        mapData[j] = checkItem;
                    }
                }
            }
            return {
                allPathData: mapData,
                path: eventPath
            };
        } else {
            return {
                allPathData: mapData,
                path: eventPath
            };
        }
    };
    EventInWorker.prototype.isNextPath = function (path1, path2) {
        if (path1.length !== path2.length) {
            return path1.length > path2.length ? false : true;
        } else {
            for (var i = 0; i < path1.length; i++) {
                if (path1[i] !== path2[i]) {
                    return path1[i] > path2[i];
                }
            }
        }
    };
    return EventInWorker;
}();
exports.default = EventInWorker;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginInjectModel = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _elmerCommon = __webpack_require__(0);

var _createClassFactory = __webpack_require__(11);

var _injectable = __webpack_require__(1);

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var PluginInjectModel = /** @class */function (_super) {
    __extends(PluginInjectModel, _super);
    function PluginInjectModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PluginInjectModel.prototype.init = function (options) {
        var injectModel = options.Component.prototype.injectModel;
        var injectService = options.Component.prototype.injectService;
        this.inject(options.componentObj, injectModel, "model");
        this.inject(options.componentObj, injectService, "service", true);
    };
    /**
     *
     * @param target 将模块注入到指定对象上
     * @param models 注入模块
     * @param propertyKey 绑定的属性名称，不设置使用model中的key
     * @param isAutowired 是否使用全局对象
     */
    PluginInjectModel.prototype.inject = function (target, models, propertyKey, isAutowired) {
        var _this = this;
        if (typeof propertyKey === "string" && propertyKey.length > 0) {
            if (!target[propertyKey]) {
                target[propertyKey] = {};
            }
        }
        if (target && models && Object.keys(models).length > 0) {
            Object.keys(models).map(function (tmpKey) {
                if (!_this.isEmpty(tmpKey)) {
                    var tmpFactory = models[tmpKey];
                    if (typeof tmpFactory === "function") {
                        var tmpObj = !isAutowired ? new tmpFactory(target) : (0, _createClassFactory.createClassFactory)(tmpFactory);
                        if (!_this.isEmpty(propertyKey)) {
                            target[propertyKey][tmpKey] = tmpObj;
                        } else {
                            target[tmpKey] = tmpObj;
                        }
                    } else {
                        // tslint:disable-next-line:no-console
                        console.log(target.className, models);
                        throw new Error(tmpKey + "注入对象不是function");
                    }
                } else {
                    throw new Error("注入模块必须设置propertyKey");
                }
            });
        }
    };
    PluginInjectModel = __decorate([(0, _injectable.injectable)("PluginInjectModel")], PluginInjectModel);
    return PluginInjectModel;
}(_elmerCommon.Common);
exports.PluginInjectModel = PluginInjectModel;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginPropsChecking = undefined;

var _elmerCommon = __webpack_require__(0);

var _RenderMiddlewarePlugin = __webpack_require__(24);

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var PluginPropsChecking = /** @class */function (_super) {
    __extends(PluginPropsChecking, _super);
    function PluginPropsChecking() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PluginPropsChecking.prototype.init = function (options) {
        this.checkPropTypes(options.componentObj, options.Component);
    };
    PluginPropsChecking.prototype.checkPropTypes = function (targetComponent, ComponentClass) {
        var propTypes = ComponentClass["propType"] || {};
        var propKeys = Object.keys(propTypes) || [];
        if (propKeys.length > 0) {
            this.checkPropTypesCallBack(targetComponent, propTypes);
        }
    };
    PluginPropsChecking.prototype.checkPropTypesCallBack = function (target, checkRules) {
        var _this = this;
        Object.keys(checkRules).map(function (tmpKey) {
            var checkRuleData = checkRules[tmpKey];
            if (_elmerCommon.StaticCommon.isFunction(checkRuleData)) {
                _this.doCheckPropType(target, tmpKey, checkRuleData);
            } else if (_elmerCommon.StaticCommon.isObject(checkRuleData)) {
                var checkData = checkRuleData;
                if (_elmerCommon.StaticCommon.isFunction(checkData.rule)) {
                    _this.doCheckPropType(target, tmpKey, checkData.rule);
                }
                // 定义propertyKey 自动mapping值到组件定义属性上
                if (!_elmerCommon.StaticCommon.isEmpty(checkData.propertyKey)) {
                    target[checkData.propertyKey] = target.props[tmpKey];
                }
                // 定义stateKey自动mapping值到state属性上
                if (!_elmerCommon.StaticCommon.isEmpty(checkData.stateKey)) {
                    target.state[checkData.stateKey] = target.props[tmpKey];
                }
                checkData = null;
            }
            checkRuleData = null;
        });
    };
    /**
     * 做prop数据类型检查
     * @param target any 检查component
     * @param propertyKey prop属性关键词
     * @param checkCallBack 数据类型检查规则
     */
    PluginPropsChecking.prototype.doCheckPropType = function (target, propertyKey, checkCallBack) {
        var propValue = target.props[propertyKey];
        _elmerCommon.StaticCommon.isFunction(checkCallBack) && checkCallBack(propValue, {
            error: function error(msg, type) {
                var tagName = target.humpToStr(target["selector"]);
                var sMsg = "组件【" + tagName + "】属性【" + propertyKey + "】设置错误：" + msg;
                // tslint:disable-next-line:no-console
                console.error(sMsg, type);
            },
            propertyName: propertyKey,
            propertyValue: propValue
        });
    };
    return PluginPropsChecking;
}(_RenderMiddlewarePlugin.RenderMiddlewarePlugin);
exports.PluginPropsChecking = PluginPropsChecking;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginRedux = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _elmerCommon = __webpack_require__(0);

var _elmerRedux = __webpack_require__(25);

var _globalUtil = __webpack_require__(3);

var _injectable = __webpack_require__(1);

var _RenderMiddlewarePlugin = __webpack_require__(24);

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var PluginRedux = /** @class */function (_super) {
    __extends(PluginRedux, _super);
    function PluginRedux() {
        var _this = _super.call(this) || this;
        _this.reduxController.checkInitStateData(_globalUtil.getGlobalState, _globalUtil.defineGlobalState);
        _this.reduxController.setNotifyCallback(["$onPropsChanged", "$willReceiveProps"]);
        return _this;
    }
    /**
     * 初始化Component结束事件，再次将被实例化对象挂载到redux
     * 并获取初始化状态数据
     * @param options - 生命周期函数事件参数
     */
    PluginRedux.prototype.init = function (options) {
        // 创建component执行一次
        var reduxParam = options.Component.prototype.connect;
        if (reduxParam && (reduxParam.mapStateToProps || reduxParam.mapDispatchToProps)) {
            this.reduxController.checkInitComponents(options.componentObj, options.Component.prototype.selector, options.nodeData);
        }
    };
    PluginRedux.prototype.destroy = function (options) {
        // 从reduxController把已经释放的组件移除引用
        if (options.componentObj) {
            this.reduxController.removeComponent(options.componentObj.selector, options.nodeData);
        }
    };
    PluginRedux.prototype.beforeUpdate = function (options) {
        // 先加载redux中的数据，在进行propsType检查，这样可以使用redux中的数据
        var reduxProps = this.reduxController.getStateByConnectSelector(options.Component.prototype.selector);
        var dispatchValue = this.reduxController.getDispatchByConnectSelector(options.Component.prototype.selector);
        _elmerCommon.StaticCommon.isObject(reduxProps) && _elmerCommon.StaticCommon.extend(options.props, reduxProps, true);
        _elmerCommon.StaticCommon.isObject(dispatchValue) && _elmerCommon.StaticCommon.extend(options.props, dispatchValue, true);
        this.setDefaultValue(options.props, options.Component.propType);
    };
    /**
     * 在创建Component前检查是否有做connect动作，将reducer回调挂入redux监听列表
     * @param options - 执行事件参数
     */
    PluginRedux.prototype.beforeInit = function (options) {
        var _this = this;
        var reduxParam = options.Component.prototype.connect;
        if (reduxParam) {
            if (reduxParam.reducers && reduxParam.reducers.length > 0) {
                reduxParam.reducers.map(function (tmpReducer) {
                    if (typeof tmpReducer.callback === "function") {
                        (0, _elmerRedux.defineReducer)(_this.reduxController, tmpReducer.name, tmpReducer.callback);
                    } else {
                        // tslint:disable-next-line: no-console
                        console.error("Redux's reducer callback should be an function");
                    }
                });
                if (!this.reduxController.reducers) {
                    this.reduxController.reducers = {};
                }
                (0, _elmerRedux.attachReducerToController)(this.reduxController);
            }
            if (reduxParam.mapStateToProps || reduxParam.mapDispatchToProps) {
                // model,service,或自定义模块未定义selector会导致redux.connect失效，默认初始化一个参数
                if (_elmerCommon.StaticCommon.isEmpty(options.Component.prototype.selector)) {
                    _elmerCommon.StaticCommon.defineReadOnlyProperty(options.Component.prototype, "selector", _elmerCommon.StaticCommon.guid().replace(/\-/g, ""));
                }
                // 在初始化Component的时候在做connect操作，防止没有使用的组件但是定义了connect,在declareComponent的时候增加不必要的redux watch
                this.reduxController.connect(options.Component.prototype.selector, reduxParam.mapStateToProps, reduxParam.mapDispatchToProps);
                // 执行init_state, 当前动作会触发所有的reducer,后续应限制执行的reducers
                this.reduxController.dispatch({
                    type: "__INIT_STATE__"
                });
                var stateValue = this.reduxController.getStateByConnectSelector(options.Component.prototype.selector);
                var dispatchValue = this.reduxController.getDispatchByConnectSelector(options.Component.prototype.selector);
                stateValue && _elmerCommon.StaticCommon.extend(options.props, stateValue, true);
                dispatchValue && _elmerCommon.StaticCommon.extend(options.props, dispatchValue, true);
            }
        }
        this.setDefaultValue(options.props, options.Component.propType); // 在创建组件object之前对props做默认值检查
    };
    PluginRedux.prototype.setDefaultValue = function (props, checkRules) {
        if (_elmerCommon.StaticCommon.isObject(props) && _elmerCommon.StaticCommon.isObject(checkRules)) {
            // const propsKey = Object.keys(props);
            Object.keys(checkRules).map(function (propKey) {
                if (_elmerCommon.StaticCommon.isObject(checkRules[propKey])) {
                    var tmpCheckRule = checkRules[propKey];
                    if (_elmerCommon.StaticCommon.isEmpty(props[propKey])) {
                        if (tmpCheckRule.defaultValue !== undefined) {
                            delete props[propKey];
                            _elmerCommon.StaticCommon.defineReadOnlyProperty(props, propKey, tmpCheckRule.defaultValue);
                        }
                    }
                    if (typeof tmpCheckRule.rule === "function" && tmpCheckRule.rule["type"] === "number") {
                        if (!isNaN(props[propKey]) && _elmerCommon.StaticCommon.isString(props[propKey])) {
                            var curValue = /\./.test(props[propKey]) ? parseFloat(props[propKey]) : parseInt(props[propKey], 10);
                            delete props[propKey];
                            _elmerCommon.StaticCommon.defineReadOnlyProperty(props, propKey, curValue);
                        }
                    }
                }
            });
        }
    };
    __decorate([(0, _injectable.autowired)(_elmerRedux.ReduxController, "ReduxController"), __metadata("design:type", _elmerRedux.ReduxController)], PluginRedux.prototype, "reduxController", void 0);
    PluginRedux = __decorate([(0, _injectable.injectable)("PluginRedux"), __metadata("design:paramtypes", [])], PluginRedux);
    return PluginRedux;
}(_RenderMiddlewarePlugin.RenderMiddlewarePlugin);
exports.PluginRedux = PluginRedux;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var elmer_common_1 = __webpack_require__(8);
exports.defineContext = function (target, options) {
    var cOptions = {
        saveAttrKey: "contextStore"
    };
    elmer_common_1.StaticCommon.extend(cOptions, options);
    if (!elmer_common_1.StaticCommon.isEmpty(cOptions.contextData) && !elmer_common_1.StaticCommon.isEmpty(cOptions.saveAttrKey)) {
        // define context store to target
        var oldData = target[cOptions.saveAttrKey] || {};
        var defineData = cOptions.contextData;
        for (var key in defineData) {
            if (!oldData[key]) {
                elmer_common_1.StaticCommon.defineReadOnlyProperty(oldData, key, defineData[key]);
            } else {
                // tslint:disable-next-line: no-console
                console.error("Define context error, the property " + key + " was existing on target object.");
                break;
            }
        }
        if (!target[cOptions.saveAttrKey]) {
            elmer_common_1.StaticCommon.defineReadOnlyProperty(target, cOptions.saveAttrKey, oldData);
        }
        return oldData;
    } else {
        // tslint:disable-next-line: no-console
        console.error("saveAttrkey and contextData can not be undefined or null");
    }
};

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var StaticCommon_1 = __webpack_require__(12);
var Common = /** @class */function () {
    function Common() {}
    Common.prototype.getType = function (val) {
        return Object.prototype.toString.call(val);
    };
    Common.prototype.isString = function (val) {
        return this.getType(val) === "[object String]";
    };
    Common.prototype.isObject = function (val) {
        return this.getType(val) === "[object Object]";
    };
    Common.prototype.isArray = function (val) {
        return this.getType(val) === "[object Array]";
    };
    Common.prototype.isNumeric = function (val) {
        return !isNaN(val);
    };
    Common.prototype.isDOM = function (val) {
        return (/^(\[object\s*)HTML([a-zA-Z]*)(Element\])$/.test(this.getType(val))
        );
    };
    Common.prototype.isSVGDOM = function (val) {
        return (/^\[object\sSVG([a-zA-Z]*)Element\]$/.test(this.getType(val))
        );
    };
    Common.prototype.isFunction = function (val) {
        return this.getType(val) === "[object Function]";
    };
    Common.prototype.isNodeList = function (val) {
        return this.getType(val) === "[object NodeList]";
    };
    Common.prototype.isRegExp = function (val) {
        return this.getType(val) === "[object RegExp]";
    };
    Common.prototype.isEmpty = function (val) {
        return val === undefined || val === null || this.isString(val) && val.length <= 0;
    };
    // tslint:disable-next-line:no-shadowed-variable
    Common.prototype.isEqual = function (a, b) {
        if (a === b) {
            return a !== 0 || 1 / a === 1 / b;
        }
        if (a == null || b == null) {
            return a === b;
        }
        var classNameA = this.getType(a),
            classNameB = this.getType(b);
        if (classNameA !== classNameB) {
            return false;
        } else {
            switch (classNameA) {
                case "[object RegExp]":
                case "[object String]":
                    return "" + a === "" + b;
                case "[object Number]":
                    if (+a !== +a) {
                        return +b !== +b;
                    }
                    return +a === 0 ? 1 / +a === 1 / b : +a === +b;
                case "[object Date]":
                case "[object Boolean]":
                    return +a === +b;
            }
            if (classNameA === "[object Object]") {
                var propsA = Object.getOwnPropertyNames(a),
                    propsB = Object.getOwnPropertyNames(b);
                if (propsA.length !== propsB.length) {
                    return false;
                } else {
                    for (var i = 0; i < propsA.length; i++) {
                        var propName = propsA[i];
                        if (a[propName] !== b[propName]) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            if (classNameA === "[object Array]") {
                return a.toString() === b.toString();
            }
        }
    };
    Common.prototype.sleepCall = function (fn, timeout, obj) {
        if (typeof fn === "function") {
            // let handler: number | null | undefined = null;
            var tim = timeout || 200;
            var sleep = function sleep() {
                if (obj) {
                    fn.call(obj);
                } else {
                    fn();
                }
                // handler !== null && clearTimeout(handler);
            };
            setTimeout(sleep, tim);
        }
    };
    Common.prototype.getValue = function (data, key, defaultValue) {
        return StaticCommon_1.StaticCommon.getValue(data, key, defaultValue);
    };
    /**
     * 给指定对象设置属性值
     * @param data 设置属性值对象
     * @param key 设置属性key,属性key有多层可使用.区分
     * @param value 设置属性值
     * @param fn 自定义设置值回调
     */
    Common.prototype.setValue = function (data, key, value, fn) {
        return StaticCommon_1.StaticCommon.setValue(data, key, value, fn);
    };
    /**
     * 获取随机ID
     */
    Common.prototype.getRandomID = function () {
        var now = new Date();
        var year = now.getFullYear().toString(),
            month = now.getMonth() + 1 < 10 ? "0" + (now.getMonth() + 1).toString() : (now.getMonth() + 1).toString(),
            date = now.getDate() < 10 ? "0" + now.getDate().toString() : now.getDate().toString(),
            hour = now.getHours() < 10 ? ["0", now.getHours()].join("") : now.getHours().toString(),
            minute = now.getMinutes() < 10 ? ["0", now.getMinutes()].join("") : now.getMinutes().toString(),
            second = now.getSeconds() < 10 ? ["0", now.getSeconds()].join("") : now.getSeconds().toString(),
            reSecond = now.getMilliseconds();
        var randValue = parseInt((Math.random() * 9999 + 1000).toString(), 10);
        return [year, month, date, hour, minute, second, reSecond, randValue].join("");
    };
    /**
     * 字符串有连接符-将自动转换成已首字母大写
     * @param val 转换文本
     * @param firstUpperCase 是否大写
     */
    Common.prototype.toHumpStr = function (val, firstUpperCase) {
        if (!this.isEmpty(val)) {
            var vStr = val.replace(/(^\-)|(\-$)/, "");
            var vArr = vStr.split("-");
            for (var i = 0; i < vArr.length; i++) {
                if (i === 0 && firstUpperCase || i > 0) {
                    vArr[i] = vArr[i].substr(0, 1).toUpperCase() + vArr[i].substr(1);
                }
            }
            return vArr.join("");
        } else {
            return val;
        }
    };
    Common.prototype.humpToStr = function (val) {
        if (!this.isEmpty(val)) {
            var vStr = val.substr(0, 1).toLowerCase() + val.substr(1);
            var rStr = vStr.replace(/([A-Z])/g, function ($1) {
                return "-" + $1.toLowerCase();
            });
            return rStr;
        }
        return val;
    };
    Common.prototype.extend = function (desc, src, setReadOnly, ignoreKeys) {
        if (!setReadOnly) {
            if (this.isObject(desc) && this.isObject(src)) {
                if (Object.assign) {
                    Object.assign(desc, src);
                } else {
                    // tslint:disable-next-line:forin
                    for (var key in src) {
                        if (!ignoreKeys || ignoreKeys.indexOf(key) < 0) {
                            desc[key] = src[key];
                        }
                    }
                }
            }
        } else {
            if (this.isObject(desc) && this.isObject(src)) {
                // tslint:disable-next-line:forin
                for (var key in src) {
                    if (!ignoreKeys || ignoreKeys.indexOf(key) < 0) {
                        // 已经存在的属性需要使用delete删除，防止redine error问题
                        if (desc.hasOwnProperty(key)) {
                            delete desc[key];
                        }
                        this.defineReadOnlyProperty(desc, key, src[key]);
                    }
                }
            }
        }
        return desc;
    };
    Common.prototype.merge = function (obj1, obj2) {
        var result = {};
        if (obj1 && !obj2) {
            result = obj1;
        } else if (!obj1 && obj2) {
            result = obj2;
        } else if (obj1 && obj2) {
            if (this.isObject(obj1)) {
                // tslint:disable-next-line:forin
                for (var key in obj1) {
                    result[key] = obj1[key];
                }
            }
            if (this.isObject(obj2)) {
                for (var sKey in obj2) {
                    if (!result.hasOwnProperty(sKey)) {
                        result[sKey] = obj2[sKey];
                    }
                }
            }
        }
        return result;
    };
    /**
     * 将字符串转转换成对应的数据类型，遇到true|false转换成bool类型，遇到数字文本转换成数字类型数据
     * @param data 要转换的数据
     */
    Common.prototype.val = function (data) {
        if (this.isString(data)) {
            if (!isNaN(data)) {
                return data.indexOf(".") >= 0 ? parseFloat(data) : parseInt(data, 10);
            } else {
                return (/^(true|false)$/.test(data) ? Boolean(data) : data
                );
            }
        } else {
            return data;
        }
    };
    Common.prototype.defineReadOnlyProperty = function (obj, propertyKey, propertyValue) {
        (function (paramObj, paramPropertyKey, paramPropertyValue) {
            paramObj && Object.defineProperty(paramObj, paramPropertyKey, {
                configurable: true,
                enumerable: true,
                value: paramPropertyValue,
                writable: false
            });
        })(obj, propertyKey, propertyValue);
    };
    Common.prototype.launchFullscreen = function (element) {
        if (element.requestFullscreen) {
            // tslint:disable-next-line: no-floating-promises
            element.requestFullscreen();
        } else if (element["mozRequestFullScreen"]) {
            element["mozRequestFullScreen"]();
        } else if (element["webkitRequestFullscreen"]) {
            element["webkitRequestFullscreen"]();
        } else if (element["msRequestFullscreen"]) {
            element["msRequestFullscreen"]();
        }
    };
    Common.prototype.exitFullscreen = function () {
        if (document.exitFullscreen) {
            // tslint:disable-next-line: no-floating-promises
            document.exitFullscreen();
        } else if (document["mozCancelFullScreen"]) {
            document["mozCancelFullScreen"]();
        } else if (document["webkitExitFullscreen"]) {
            document["webkitExitFullscreen"]();
        }
    };
    Common.prototype.isFullScreen = function () {
        return document["isFullScreen"] || document["mozIsFullScreen"] || document["webkitIsFullScreen"];
    };
    Common.prototype.guid = function () {
        var S4 = function S4() {
            // tslint:disable-next-line: no-bitwise
            return ((1 + Math.random()) * 0x10000 | 0).toString(16).substr(1);
        };
        return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4();
    };
    Common.prototype.getUri = function () {
        return StaticCommon_1.StaticCommon.getUri();
    };
    Common.prototype.getQuery = function (key) {
        return StaticCommon_1.StaticCommon.getQuery(key);
    };
    return Common;
}();
exports.Common = Common;
//# sourceMappingURL=Common.js.map

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var Canvas = /** @class */function () {
    function Canvas() {
        this.doRemoveAnimationList = [];
        // tslint:disable-next-line: variable-name
        var _this = this;
        // tslint:disable: only-arrow-functions
        this.requestAnimationFrame = window.requestAnimationFrame || window["webkitRequestAnimationFrame"] || window["mozRequestAnimationFrame"] || function (callback) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16.7 - (currTime - _this.lastTime));
            var id = window.setTimeout(function () {
                callback(currTime + timeToCall);
            }, timeToCall);
            _this.lastTime = currTime + timeToCall;
            return id;
        };
        this.cancelAnimationFrame = window.cancelAnimationFrame || window["webkitCancelAnimationFrame"] || window["mozCancelAnimationFrame"] || function (id) {
            clearTimeout(id);
        };
        // tslint:enable: only-arrow-functions
    }
    Canvas.prototype.startAnimation = function (callBack, targetObj) {
        var self = this;
        // tslint:disable-next-line: only-arrow-functions
        return function (fn, obj) {
            var handler;
            // tslint:disable-next-line: only-arrow-functions
            var animation = function animation() {
                var mIndex = self.doRemoveAnimationList.indexOf(handler);
                if (mIndex < 0) {
                    fn.apply(obj, arguments);
                    return self.requestAnimationFrame.call(window, animation);
                } else {
                    self.doRemoveAnimationList.splice(mIndex, 1);
                }
                mIndex = null;
            };
            handler = self.requestAnimationFrame.call(window, animation);
            return handler;
        }(callBack, targetObj);
    };
    Canvas.prototype.stopAnimation = function (handler) {
        this.cancelAnimationFrame.call(window, handler);
        this.doRemoveAnimationList.push(handler);
    };
    return Canvas;
}();
exports.Canvas = Canvas;
//# sourceMappingURL=Canvas.js.map

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// tslint:disable: jsdoc-format
/**
 * currentTime : 当前时间
 * beginValue  : 开始值
 * changeValue : 变化值
 * duration    : 动画过程时间
**/
// tslint:enable: jsdoc-format

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: object-literal-sort-keys no-parameter-reassignment
exports.MathAnimationApi = {
    /**
     * 匀速变化
     * @param currentTime [number] 当前时间
     * @param beginning [number] 开始变化的值
     * @param changeValue [number] 变化的值
     * @param duration [number] 动画总的时间
     * @returns number
     */
    Linear: function Linear(currentTime, beginValue, changeValue, duration) {
        return changeValue * currentTime / duration + beginValue;
    },
    /**
     * 二次平方缓动
     */
    Quad: {
        /**
         * 二次平方缓动easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            currentTime /= duration;
            return changeValue * Math.pow(currentTime, 2) + beginValue;
        },
        /**
         * 二次平方缓动easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            currentTime /= duration;
            return -changeValue * currentTime * (currentTime - 2) + beginValue;
        },
        /**
         * 二次平方缓动easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            if (currentTime / 2 < 1) {
                return changeValue / 2 * Math.pow(currentTime, 2) + beginValue;
            } else {
                currentTime = currentTime - 1;
                return -changeValue / 2 * (currentTime * (currentTime - 2) - 1) + beginValue;
            }
        }
    },
    /**
     * 三次方缓动效
     */
    Cubic: {
        /**
         * 三次方缓动easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            return changeValue * Math.pow(currentTime, 3) + beginValue;
        },
        /**
         * 三次方缓动easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration - 1;
            return changeValue * (Math.pow(currentTime, 3) + 1) + beginValue;
        },
        /**
         * 三次方缓动easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            if (currentTime / 2 < 1) {
                return changeValue / 2 * Math.pow(currentTime, 3) + beginValue;
            } else {
                currentTime = currentTime - 2;
                return changeValue / 2 * (Math.pow(currentTime, 3) + 2) + beginValue;
            }
        }
    },
    /**
     * 四次方缓动效果
     */
    Quart: {
        /**
         * 四次方缓动easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            return changeValue * Math.pow(currentTime, 4) + beginValue;
        },
        /**
         * 四次方缓动easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration - 1;
            return -changeValue * (Math.pow(currentTime, 4) - 1) + beginValue;
        },
        /**
         * 四次方缓动easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            if (currentTime / 2 < 1) {
                return changeValue / 2 * Math.pow(currentTime, 4) + beginValue;
            } else {
                currentTime -= 2;
                return -changeValue / 2 * (Math.pow(currentTime, 4) - 2) + beginValue;
            }
        }
    },
    /**
     * 五次方缓动效果
     */
    Quint: {
        /**
         * 四次方缓动easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            currentTime /= duration;
            return changeValue * Math.pow(currentTime, 5) + beginValue;
        },
        /**
         * 四次方缓动easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration - 1;
            return changeValue * (Math.pow(currentTime, 5) + 1) + beginValue;
        },
        /**
         * 四次方缓动easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            if (currentTime / 2 < 1) {
                return changeValue / 2 * Math.pow(currentTime, 5) + beginValue;
            } else {
                currentTime -= 2;
                return changeValue / 2 * (Math.pow(currentTime, 5) + 2) + beginValue;
            }
        }
    },
    /**
     * 正弦缓动效果
     */
    Sine: {
        /**
         * 正弦缓动效果easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            return -changeValue * Math.cos(currentTime / duration * (Math.PI / 2)) + changeValue + beginValue;
        },
        /**
         * 正弦缓动效果easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            return changeValue * Math.sin(currentTime / duration * (Math.PI / 2)) + beginValue;
        },
        /**
         * 正弦缓动效果easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            return -changeValue / 2 * (Math.cos(Math.PI * currentTime / duration) - 1) + beginValue;
        }
    },
    /**
     * 指数缓动效果
     */
    Expo: {
        /**
         * 指数缓动效果easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            return currentTime === 0 ? beginValue : changeValue * Math.pow(2, 10 * (currentTime / duration - 1)) + beginValue;
        },
        /**
         * 指数缓动效果easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            return currentTime === duration ? beginValue + changeValue : changeValue * (-Math.pow(2, -10 * currentTime / duration) + 1) + beginValue;
        },
        /**
         * 指数缓动效果easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            if (currentTime === 0) {
                return beginValue;
            }
            if (currentTime === duration) {
                return beginValue + changeValue;
            }
            currentTime /= duration;
            if (currentTime / 2 < 1) {
                return changeValue / 2 * Math.pow(2, 10 * (currentTime - 1)) + beginValue;
            } else {
                currentTime -= 1;
                return changeValue / 2 * (-Math.pow(2, -10 * currentTime) + 2) + beginValue;
            }
        }
    },
    /**
     * 圆形缓动效果
     */
    Circle: {
        /**
         * 圆形缓动效果easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            return -changeValue * (Math.sqrt(1 - Math.pow(currentTime, 2)) - 1) + beginValue;
        },
        /**
         * 圆形缓动效果easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration - 1;
            return changeValue * Math.sqrt(1 - Math.pow(currentTime, 2)) + beginValue;
        },
        /**
         * 圆形缓动效果easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            currentTime = currentTime / duration;
            if (currentTime / 2 < 1) {
                return -changeValue / 2 * (Math.sqrt(1 - Math.pow(currentTime, 2)) - 1) + beginValue;
            } else {
                currentTime -= 2;
                return changeValue / 2 + (Math.sqrt(1 - Math.pow(currentTime, 2)) + 1) + beginValue;
            }
        }
    },
    /**
     * 指衰减正弦曲线缓动函数
     */
    Elastic: {
        /**
         * 指衰减正弦曲线缓动easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @param a [number] undefined
         * @param p [number] undefined
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration, a, p) {
            var s;
            if (currentTime === 0) {
                return beginValue;
            }
            currentTime /= duration;
            if (currentTime === 1) {
                return beginValue + changeValue;
            }
            if (typeof p === "undefined") {
                p = duration * 0.3;
            }
            if (!a || a < Math.abs(changeValue)) {
                s = p / 4;
                a = changeValue;
            } else {
                s = p / (2 * Math.PI) * Math.asin(changeValue / a);
            }
            return -(a * Math.pow(2, 10 * (currentTime -= 1)) * Math.sin((currentTime * duration - s) * (2 * Math.PI) / p)) + beginValue;
        },
        /**
         * 指衰减正弦曲线缓动减速easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @param a [number] undefined
         * @param p [number] undefined
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration, a, p) {
            var s;
            if (currentTime === 0) {
                return beginValue;
            }
            currentTime /= duration;
            if (currentTime === 1) {
                return beginValue + changeValue;
            }
            if (typeof p === "undefined") {
                p = duration * .3;
            }
            if (!a || a < Math.abs(changeValue)) {
                a = changeValue;
                s = p / 4;
            } else {
                s = p / (2 * Math.PI) * Math.asin(changeValue / a);
            }
            return a * Math.pow(2, -10 * currentTime) * Math.sin((currentTime * duration - s) * (2 * Math.PI) / p) + changeValue + beginValue;
        },
        /**
         * 指衰减正弦曲线缓动函先加速后减速easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @param a [number] undefined
         * @param p [number] undefined
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration, a, p) {
            var s;
            if (currentTime === 0) {
                return beginValue;
            }
            currentTime /= duration / 2;
            if (currentTime === 2) {
                return beginValue + changeValue;
            }
            if (typeof p === "undefined") {
                p = duration * (0.3 * 1.5);
            }
            if (!a || a < Math.abs(changeValue)) {
                a = changeValue;
                s = p / 4;
            } else {
                s = p / (2 * Math.PI) * Math.asin(changeValue / a);
            }
            if (currentTime < 1) {
                return -0.5 * (a * Math.pow(2, 10 * (currentTime -= 1)) * Math.sin((currentTime * duration - s) * (2 * Math.PI) / p)) + beginValue;
            }
            return a * Math.pow(2, -10 * (currentTime -= 1)) * Math.sin((currentTime * duration - s) * (2 * Math.PI) / p) * .5 + changeValue + beginValue;
        }
    },
    /**
     * 超过范围的三次方的缓动函数
     */
    Back: {
        /**
         * 超过范围的三次方的缓动函数easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @param s [number] undefined
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration, s) {
            if (typeof s === "undefined") {
                s = 1.70158;
            }
            return changeValue * (currentTime /= duration) * currentTime * ((s + 1) * currentTime - s) + beginValue;
        },
        /**
         * 超过范围的三次方的缓动函数easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @param s [number] undefined
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration, s) {
            if (typeof s === "undefined") {
                s = 1.70158;
            }
            return changeValue * ((currentTime = currentTime / duration - 1) * currentTime * ((s + 1) * currentTime + s) + 1) + beginValue;
        },
        /**
         * 超过范围的三次方的缓动函数easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @param s [number] undefined
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration, s) {
            if (typeof s === "undefined") {
                s = 1.70158;
            }
            currentTime /= duration / 2;
            if (currentTime < 1) {
                return changeValue / 2 * (currentTime * currentTime * (((s *= 1.525) + 1) * currentTime - s)) + beginValue;
            }
            return changeValue / 2 * ((currentTime -= 2) * currentTime * (((s *= 1.525) + 1) * currentTime + s) + 2) + beginValue;
        }
    },
    /**
     * 指数衰减的反弹曲线缓动函数
     */
    Bounce: {
        /**
         * 指数衰减的反弹曲线缓动函数easeIn
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeIn: function easeIn(currentTime, beginValue, changeValue, duration) {
            return changeValue - exports.MathAnimationApi.Bounce.easeOut(duration - currentTime, 0, changeValue, duration) + beginValue;
        },
        /**
         * 指数衰减的反弹曲线缓动函数easeOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeOut: function easeOut(currentTime, beginValue, changeValue, duration) {
            currentTime /= duration;
            if (currentTime < 1 / 2.75) {
                return changeValue * (7.5625 * currentTime * currentTime) + beginValue;
            } else if (currentTime < 2 / 2.75) {
                return changeValue * (7.5625 * (currentTime -= 1.5 / 2.75) * currentTime + .75) + beginValue;
            } else if (currentTime < 2.5 / 2.75) {
                return changeValue * (7.5625 * (currentTime -= 2.25 / 2.75) * currentTime + .9375) + beginValue;
            } else {
                return changeValue * (7.5625 * (currentTime -= 2.625 / 2.75) * currentTime + .984375) + beginValue;
            }
        },
        /**
         * 指数衰减的反弹曲线缓动函数easeInOut
         * @param currentTime [number] 当前时间
         * @param beginning [number] 开始变化的值
         * @param changeValue [number] 变化的值
         * @param duration [number] 动画总的时间
         * @returns number
         */
        easeInOut: function easeInOut(currentTime, beginValue, changeValue, duration) {
            if (currentTime < duration / 2) {
                return exports.MathAnimationApi.Bounce.easeIn(currentTime * 2, 0, changeValue, duration) * .5 + beginValue;
            } else {
                return exports.MathAnimationApi.Bounce.easeOut(currentTime * 2 - duration, 0, changeValue, duration) * 0.5 + changeValue * 0.5 + beginValue;
            }
        }
    }
};
// tslint:enable: object-literal-sort-keys no-parameter-reassignment
//# sourceMappingURL=MathAnimationApi.js.map

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function sent() {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) {
            try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
        }if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var StaticCommon_1 = __webpack_require__(12);
var callYieldFunc = function callYieldFunc(callbackObj) {
    var result, keys, index, mLen, key, callback, lastKey, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                result = {};
                if (!callbackObj) return [3 /*break*/, 5];
                keys = Object.keys(callbackObj);
                if (!(keys.length > 0)) return [3 /*break*/, 5];
                index = 0, mLen = keys.length;
                _c.label = 1;
            case 1:
                if (!(index < mLen)) return [3 /*break*/, 5];
                key = keys[index];
                callback = callbackObj[key];
                if (!(typeof callback === "function")) return [3 /*break*/, 3];
                lastKey = keys[index - 1];
                _a = result;
                _b = key;
                return [4 /*yield*/, callback(result[lastKey])];
            case 2:
                _a[_b] = _c.sent();
                return [3 /*break*/, 4];
            case 3:
                result[key] = {
                    statusCode: "QueueCall_601",
                    // tslint:disable-next-line: object-literal-sort-keys
                    message: "The " + key + "'s fn attribute is not a function"
                };
                _c.label = 4;
            case 4:
                index++;
                return [3 /*break*/, 1];
            case 5:
                return [2 /*return*/, result];
        }
    });
};
exports.queueCallRaceAll = function (paramList, fn, option) {
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                if (paramList && paramList.length > 0) {
                    var allStatus_1 = {};
                    var allResult_1 = {};
                    var checkAllStatus_1 = function checkAllStatus_1() {
                        var hasError = false;
                        // tslint:disable-next-line: forin
                        for (var key in allStatus_1) {
                            if (allStatus_1[key] === "PENDING") {
                                return;
                            }
                            if (allStatus_1[key] === "ERROR") {
                                hasError = true;
                                break;
                            }
                        }
                        if (hasError) {
                            reject(allResult_1);
                        } else {
                            resolve(allResult_1);
                        }
                    };
                    paramList.map(function (item, index) {
                        var taskID = "queueCall" + index;
                        allStatus_1["queueCall" + index] = "PENDING";
                        (function (param, taskId) {
                            var callback = typeof param.fn === "function" ? param.fn : fn;
                            if (typeof callback === "function") {
                                // tslint:disable-next-line: no-inferred-empty-object-type
                                var callbackResult = callback({
                                    id: param.id,
                                    lastKey: null,
                                    lastResult: null,
                                    param: param.params,
                                    result: allResult_1
                                }, param.params);
                                if (StaticCommon_1.StaticCommon.isPromise(callbackResult)) {
                                    callbackResult.then(function (resp) {
                                        allResult_1[param.id] = resp;
                                        allStatus_1[taskID] = "OK";
                                        checkAllStatus_1();
                                    }).catch(function (error) {
                                        allResult_1[param.id] = {
                                            statusCode: "Fail",
                                            // tslint:disable-next-line: object-literal-sort-keys
                                            exception: error,
                                            message: error.message || error.statusText || "Unknow error"
                                        };
                                        allStatus_1[taskID] = "ERROR";
                                        checkAllStatus_1();
                                    });
                                } else {
                                    allResult_1[param.id] = callbackResult;
                                    allStatus_1[taskID] = "OK";
                                    checkAllStatus_1();
                                }
                            } else {
                                allResult_1[param.id] = {
                                    statusCode: "Fail",
                                    // tslint:disable-next-line: object-literal-sort-keys
                                    message: "the fn callback is not a function"
                                };
                                checkAllStatus_1();
                            }
                        })(item, taskID);
                    });
                } else {
                    resolve();
                }
            })];
        });
    });
};
/**
 * 按队列调用异步函数或普通函数
 * @param paramList {TypeQueueCallParam[]} 队列参数
 * @param fn 循环调用的方法，如果params.fn 没有设置将会调用fn参数
 */
exports.queueCallFunc = function (paramList, fn, option) {
    return __awaiter(void 0, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                var doActionData = {};
                var Result = {};
                var keyArr = [];
                var yieldResult = null;
                var doNext = function doNext(key, lastKey) {
                    return function () {
                        var yResult = yieldResult.next(Result[lastKey]);
                        if (!yResult.done) {
                            if (yResult.value && typeof yResult.value.toString === "function" && yResult.value.toString() === "[object Promise]") {
                                yResult.value.then(function (resp) {
                                    Result[key] = resp;
                                    goNext(key);
                                }).catch(function (err) {
                                    if (!option || !option.throwException) {
                                        Result[key] = {
                                            statusCode: "QueueCall_602",
                                            // tslint:disable-next-line: object-literal-sort-keys
                                            excpetion: err
                                        };
                                        goNext(key);
                                    } else if (option && option.throwException) {
                                        reject({
                                            exception: err,
                                            message: err.message,
                                            statusCode: "QueueCall_603"
                                        });
                                    }
                                });
                            } else {
                                Result[key] = yResult.value;
                                goNext(key);
                            }
                        } else {
                            resolve(Result);
                        }
                        return yResult;
                    };
                };
                var goNext = function goNext(key) {
                    var index = keyArr.indexOf(key);
                    var nextKey = keyArr[index + 1];
                    doNext(nextKey, key)();
                };
                if (StaticCommon_1.StaticCommon.isArray(paramList) && paramList.length > 0) {
                    paramList.map(function (tParam, index) {
                        var lastKey = index > 0 && paramList[index - 1] ? paramList[index - 1].id : undefined;
                        keyArr.push(tParam.id);
                        doActionData[tParam.id] = function (options, lKey) {
                            return function (lstResult) {
                                var lstKey = lKey;
                                var paramValue = options.params;
                                var handler = options.owner || _this;
                                var operateCallback = typeof options.fn === "function" ? options.fn : fn;
                                // tslint:disable-next-line: variable-name
                                var _option = {
                                    id: options.id,
                                    lastKey: lstKey,
                                    lastResult: lstResult,
                                    params: options.params,
                                    result: Result
                                };
                                if (StaticCommon_1.StaticCommon.isArray(paramValue)) {
                                    paramValue.unshift(_option);
                                    return operateCallback.apply(handler, paramValue);
                                } else {
                                    return operateCallback.call(handler, _option, paramValue);
                                }
                            };
                        }(tParam, lastKey);
                        lastKey = null;
                    });
                    yieldResult = callYieldFunc(doActionData);
                    doNext(paramList[0].id, undefined)();
                } else {
                    resolve({});
                }
            })];
        });
    });
};
//# sourceMappingURL=QueueCallFun.js.map

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var elmer_common_1 = __webpack_require__(8);
exports.getContext = function (target, defineRules, saveAttrKey) {
    var attrKey = !elmer_common_1.StaticCommon.isEmpty(saveAttrKey) ? saveAttrKey : "contextStore";
    var contextData = target[attrKey] || {};
    var contextResult = {};
    if (defineRules) {
        // tslint:disable-next-line: forin
        for (var key in defineRules) {
            var dRule = defineRules[key];
            var dData = elmer_common_1.StaticCommon.getValue(contextData, key);
            if (dData !== undefined) {
                contextResult[key] = dData;
            }
            if (typeof dRule.rule === "function") {
                if (!dRule.rule(dData)) {
                    // tslint:disable-next-line: no-console
                    console.error(key + "\u5B9A\u4E49\u7C7B\u578B\u548CContextStore\u6570\u636E\u4E0D\u5339\u914D!");
                }
            }
        }
    }
    return contextResult;
};

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var elmer_common_1 = __webpack_require__(8);
var defineReduxProvider_1 = __webpack_require__(13);
var ReduxGlobalStateKeys_1 = __webpack_require__(9);
exports.connect = function (reduxController, Component, mapStateToPropsFn, mapDispatchToPropsFn, getGlobalState, defineGlobalState) {
    var stateID = ReduxGlobalStateKeys_1.REDUX_GLOBAL_LISTEN_KEY;
    var stateData = getGlobalState(stateID);
    var checkSelector = Component.prototype.selector;
    if (checkSelector !== undefined && checkSelector !== null) {
        if (!stateData) {
            var gState = defineReduxProvider_1.defineReduxProvider(getGlobalState, defineGlobalState);
            stateData = gState.listener;
            gState = null;
        }
        if (!stateData[checkSelector]) {
            elmer_common_1.defineReadonlyProperty(reduxController.stateWatchs, checkSelector, {
                mapDispatchToProps: mapDispatchToPropsFn,
                mapStateToProps: mapStateToPropsFn
            });
        }
    }
    checkSelector = null;
    stateID = null;
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function sent() {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) {
            try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
        }if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var elmer_common_1 = __webpack_require__(8);
var createReducer_1 = __webpack_require__(26);
var defineReduxProvider_1 = __webpack_require__(13);
var ReduxGlobalStateKeys_1 = __webpack_require__(9);
var ReduxController = /** @class */function (_super) {
    __extends(ReduxController, _super);
    function ReduxController() {
        var _this = _super.call(this) || this;
        _this.stateData = {};
        _this.stateWatchs = {};
        _this.reducers = {};
        _this.reducersData = {};
        _this.initComponents = [];
        _this.autoSave = false;
        _this.saveDataKey = "ElmerReduxState";
        if (!_this.reducers) {
            _this.reducers = {};
        }
        return _this;
    }
    ReduxController.prototype.setNotifyCallback = function (callbackNames) {
        this.notifyCallbackNames = callbackNames;
    };
    ReduxController.prototype.checkInitStateData = function (getGlobalState, defineGlobalState) {
        if (!getGlobalState(ReduxGlobalStateKeys_1.REDUX_GLOBAL_STATE_KEY)) {
            defineReduxProvider_1.defineReduxProvider(getGlobalState, defineGlobalState);
        }
        this.getGlobalState = getGlobalState;
        this.defineGlobalState = defineGlobalState;
        this.stateData = !this.stateData ? getGlobalState(ReduxGlobalStateKeys_1.REDUX_GLOBAL_STATE_KEY) : __assign(__assign({}, this.stateData), getGlobalState(ReduxGlobalStateKeys_1.REDUX_GLOBAL_STATE_KEY));
        this.stateWatchs = !this.stateWatchs ? getGlobalState(ReduxGlobalStateKeys_1.REDUX_GLOBAL_LISTEN_KEY) || {} : __assign(__assign({}, this.stateWatchs), getGlobalState(ReduxGlobalStateKeys_1.REDUX_GLOBAL_LISTEN_KEY) || {});
    };
    ReduxController.prototype.connect = function (selector, mapStateToProps, mapDispatchToProps) {
        if (!this.isEmpty(selector)) {
            if (!this.stateWatchs[selector]) {
                this.defineReadOnlyProperty(this.stateWatchs, selector, {
                    mapDispatchToProps: mapDispatchToProps,
                    mapStateToProps: mapStateToProps
                });
            }
        }
    };
    /**
     * 根据做connect操作selector获取state
     * @param selector string 组件tagName
     */
    ReduxController.prototype.getStateByConnectSelector = function (selector) {
        var stateData = this.getStates();
        var listenData = this.getWatches();
        if (Object.keys(listenData).indexOf(selector) >= 0) {
            var listen = listenData[selector];
            return typeof listen.mapStateToProps === "function" && listen.mapStateToProps.call(this, stateData, this);
        }
    };
    ReduxController.prototype.getDispatchByConnectSelector = function (selector) {
        var watches = this.getWatches();
        if (Object.keys(watches).indexOf(selector) >= 0) {
            var listen = watches[selector];
            return typeof listen.mapDispatchToProps === "function" && listen.mapDispatchToProps.call(this, this.dispatch.bind(this), this);
        }
    };
    ReduxController.prototype.checkInitComponents = function (targetComponent, selector, nodeData) {
        var keysData = Object.keys(this.getWatches());
        for (var _i = 0, keysData_1 = keysData; _i < keysData_1.length; _i++) {
            var tmpKey = keysData_1[_i];
            if (tmpKey === selector) {
                if (this.isEmpty(this.initComponents[selector])) {
                    this.initComponents[selector] = {};
                }
                this.initComponents[selector][nodeData.virtualID] = targetComponent;
                break;
            }
        }
        keysData = null;
    };
    ReduxController.prototype.removeComponent = function (selector, nodeData) {
        if (this.initComponents[selector]) {
            this.initComponents[selector][nodeData.virtualID] = null;
            delete this.initComponents[selector][nodeData.virtualID];
            if (Object.keys(this.initComponents[selector]).length <= 0) {
                delete this.initComponents[selector];
            }
        }
    };
    ReduxController.prototype.dispatch = function (pushState, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                    try {
                        _this.doDispatch(pushState, options);
                        if (_this.autoSave) {
                            _this.saveStore.setItem(_this.saveDataKey, JSON.stringify(_this.stateData));
                        }
                        resolve({
                            message: "success",
                            status: 200
                        });
                    } catch (e) {
                        reject({
                            message: e.message,
                            stack: e.stack,
                            status: 500
                        });
                    }
                })];
            });
        });
    };
    ReduxController.prototype.getStates = function () {
        var stateData = !this.stateData ? this.getGlobalState(ReduxGlobalStateKeys_1.REDUX_GLOBAL_STATE_KEY) : __assign(__assign({}, this.stateData), this.getGlobalState(ReduxGlobalStateKeys_1.REDUX_GLOBAL_STATE_KEY));
        return stateData;
    };
    ReduxController.prototype.getWatches = function () {
        var listeners = !this.stateWatchs ? this.getGlobalState(ReduxGlobalStateKeys_1.REDUX_GLOBAL_LISTEN_KEY) || {} : __assign(__assign({}, this.stateWatchs), this.getGlobalState(ReduxGlobalStateKeys_1.REDUX_GLOBAL_LISTEN_KEY) || {});
        return listeners;
    };
    ReduxController.prototype.doDispatch = function (pushState, options) {
        var _this = this;
        var _a;
        try {
            if (!this.isEmpty(pushState) && !this.isEmpty(pushState.type)) {
                // 这里做dispatch操作
                var reducers = this.reducers;
                if (!reducers) {
                    this.reducers = {};
                    createReducer_1.attachReducerToController(this);
                    reducers = this.reducers;
                }
                // 如何设置指定的selector或者reducer key, 只将state 推送到对应的reducer处理
                var allowKeys = ((_a = options) === null || _a === void 0 ? void 0 : _a.reducers) || [];
                var reducerKeys = Object.keys(reducers);
                var stateData = this.getStates();
                var _loop_1 = function _loop_1(tmpReducerKey) {
                    if (!allowKeys || allowKeys.length <= 0 || allowKeys.length > 0 && allowKeys.indexOf(tmpReducerKey) >= 0) {
                        var oldData = this_1.getValue(stateData, tmpReducerKey);
                        var oldStateData = oldData !== undefined && null !== oldData ? JSON.parse(JSON.stringify(oldData)) : oldData;
                        var checkReducer = this_1.getValue(this_1.reducers, tmpReducerKey);
                        var newState = checkReducer(oldStateData, pushState, {
                            extend: this_1.extend
                        });
                        if (JSON.stringify(oldData) !== JSON.stringify(newState)) {
                            // reducer返回结果与state树上的数据不一致时，认为已经更新了
                            var updateState_1 = {};
                            for (var _i = 0, _a = Object.keys(newState); _i < _a.length; _i++) {
                                var stateKey = _a[_i];
                                (function (defineStateKey, defineStateValue) {
                                    _this.defineStateValue(defineStateValue);
                                    Object.defineProperty(updateState_1, defineStateKey, {
                                        configurable: true,
                                        enumerable: true,
                                        get: function get() {
                                            return defineStateValue;
                                        },
                                        set: function set() {
                                            // tslint:disable-next-line:no-console
                                            console.error("不允许直接修改Redux数据！", defineStateKey, defineStateValue);
                                        }
                                    });
                                })(stateKey, newState[stateKey]);
                            }
                            this_1.setValue(stateData, tmpReducerKey, updateState_1, function (obj, propertyKey, value) {
                                if (_this.isObject(obj) && !_this.isEmpty(propertyKey)) {
                                    if (!_this.isEmpty(value)) {
                                        delete obj[propertyKey];
                                    }
                                    Object.defineProperty(obj, propertyKey, {
                                        configurable: true,
                                        enumerable: true,
                                        get: function get() {
                                            return value || {};
                                        },
                                        set: function set() {
                                            // tslint:disable-next-line:no-console
                                            console.error("不允许直接修改Redux数据！");
                                        }
                                    });
                                }
                            });
                            this_1.stateData = stateData;
                            this_1.checkChangeComponent();
                            return "break";
                        }
                    }
                };
                var this_1 = this;
                for (var _i = 0, reducerKeys_1 = reducerKeys; _i < reducerKeys_1.length; _i++) {
                    var tmpReducerKey = reducerKeys_1[_i];
                    var state_1 = _loop_1(tmpReducerKey);
                    if (state_1 === "break") break;
                }
                reducerKeys = null;
            } else {
                if (pushState && this.isEmpty(pushState.type)) {
                    throw new Error("[ReduxController.dispatch] pushState未指定type属性");
                } else {
                    throw new Error("[ReduxController.dispatch] pushState不是object对象");
                }
            }
        } catch (e) {
            console.error(e);
        }
    };
    ReduxController.prototype.defineStateValue = function (stateValue) {
        if (this.isObject(stateValue)) {
            Object.keys(stateValue).map(function (stateKey) {
                (function (propsKey, propsValue) {
                    // remove loop defineState, improve dispatch performence
                    Object.defineProperty(stateValue, propsKey, {
                        configurable: true,
                        enumerable: true,
                        get: function get() {
                            return propsValue;
                        },
                        set: function set() {
                            // tslint:disable-next-line:no-console
                            console.error("\u4E0D\u5141\u8BB8\u76F4\u63A5\u4FEE\u6539Redux\u6570\u636E\uFF01[" + stateKey + "]", stateValue);
                        }
                    });
                })(stateKey, stateValue[stateKey]);
            });
        }
    };
    ReduxController.prototype.checkChangeComponent = function () {
        var watchesData = this.getWatches();
        var watchKeys = Object.keys(watchesData);
        for (var _i = 0, watchKeys_1 = watchKeys; _i < watchKeys_1.length; _i++) {
            var wKey = watchKeys_1[_i];
            var tmpWatch = watchesData[wKey];
            if (typeof tmpWatch.mapStateToProps === "function") {
                var mapState = tmpWatch.mapStateToProps.call(this, this.getStates(), this);
                this.checkChangeForComponent(mapState, wKey);
                mapState = null;
            }
            tmpWatch = null;
        }
        watchKeys = null;
        watchesData = null;
    };
    ReduxController.prototype.checkChangeForComponent = function (mapState, selector) {
        var _this = this;
        Object.keys(this.initComponents).map(function (tmpSelector) {
            if (tmpSelector === selector) {
                // 只对项目mapStateToPros，connect的组件做检查
                var tmpComponents = _this.initComponents[tmpSelector];
                var _loop_2 = function _loop_2(virtualID) {
                    var tmpComponent = tmpComponents[virtualID];
                    var checkProps = tmpComponent.props || {};
                    var hasChanged = false;
                    for (var mapKey in mapState) {
                        if (mapState && JSON.stringify(mapState[mapKey]) !== JSON.stringify(checkProps[mapKey])) {
                            hasChanged = true;
                            delete checkProps[mapKey];
                            _this.defineReadOnlyProperty(checkProps, mapKey, mapState[mapKey]);
                        }
                    }
                    if (hasChanged) {
                        if (_this.notifyCallbackNames && _this.notifyCallbackNames.length > 0) {
                            // 设置多个callback为了兼容旧版本代码
                            _this.notifyCallbackNames.map(function (callbackName) {
                                typeof tmpComponent[callbackName] === "function" && tmpComponent[callbackName].call(tmpComponent, checkProps);
                            });
                        }
                    }
                    tmpComponent = null;
                    checkProps = null;
                };
                // tslint:disable-next-line:forin
                for (var virtualID in tmpComponents) {
                    _loop_2(virtualID);
                }
                tmpComponents = null;
            }
        });
    };
    ReduxController.className = "ReduxController";
    return ReduxController;
}(elmer_common_1.Common);
exports.ReduxController = ReduxController;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (!String.prototype["__defineGetter__"]) {
    // tslint:disable-next-line:typedef
    String.prototype["__defineGetter__"] = function (color, func) {
        this[color] = func;
    };
}
/*
if(!NodeList.prototype.forEach) {
    NodeList.prototype.forEach = function(callBack:Function, thisArgs?: any): void {
        const self = thisArgs || window;
        for(let i=0;i<this.length;i++) {
            callBack.call(self, this[i], this);
        }
    };
}
 */
if (!Date.prototype.format) {
    // tslint:disable-next-line: only-arrow-functions
    Date.prototype.format = function (formatStr) {
        var year = this.getFullYear();
        var month = this.getMonth() + 1;
        var date = this.getDate();
        var hour = this.getHours();
        var minutes = this.getMinutes();
        var second = this.getSeconds();
        var milliseconds = this.getMilliseconds();
        month = month > 9 ? month : "0" + month;
        date = date > 9 ? date : "0" + date;
        hour = hour > 9 ? hour : "0" + hour;
        minutes = minutes > 9 ? minutes : "0" + minutes;
        second = second > 9 ? second : "0" + second;
        var result = formatStr.replace(/YYYY/g, year).replace(/MM/g, month).replace(/DD/g, date).replace(/H/ig, hour).replace(/i/g, minutes).replace(/ms/g, milliseconds).replace(/s/g, second).replace(/yyyy/g, year).replace(/mm/g, month).replace(/dd/g, date);
        return result;
    };
}

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ElmerRender = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _elmerCommon = __webpack_require__(0);

var _elmerVirtualDom = __webpack_require__(16);

var _Component = __webpack_require__(5);

var _hookUtils = __webpack_require__(2);

var _globalUtil = __webpack_require__(3);

var _inject = __webpack_require__(7);

var _RenderMiddleware = __webpack_require__(22);

var _ElmerRenderAttrs = __webpack_require__(72);

var _RenderQueue = __webpack_require__(73);

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function sent() {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) {
            try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
        }if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
// import { InjectComponent } from "../middleware/InjectComponent";

var ElmerRender = /** @class */function (_super) {
    __extends(ElmerRender, _super);
    function ElmerRender(options) {
        var _a, _b, _c, _d;
        var _this_1 = _super.call(this) || this;
        _this_1.userComponents = {}; // 当前组件引用的自定义组件
        _this_1.renderComponents = {}; // 当前组件下的自定义组件渲染对象
        var userComponents = options.component.components || {};
        var fromParentComponents = options.userComponents || {};
        if (_this_1.isArray(userComponents)) {
            // 此处转换为了兼容旧代码
            // 新版本将使用Object去掉Array的配置 {tagName:Component}, tagName在html代码中调用的标签名字，Component为自定义组件类
            var covertComponents_1 = {};
            userComponents.map(function (componentConfig) {
                covertComponents_1[componentConfig.selector] = componentConfig.component;
            });
            userComponents = covertComponents_1;
        }
        _this_1.virtualRender.setVirtualElement(_this_1.virtualElement);
        _this_1.virtualId = _this_1.guid() + "_" + new Date().getTime().toString(); // 当前自定义组件节点ID
        _this_1.options = options;
        _this_1.userComponents = __assign(__assign({}, userComponents), fromParentComponents);
        _this_1.eventObj = options.event;
        _this_1.options.component.setState = _this_1.setComponentState.bind(_this_1);
        _this_1.options.component.setData = _this_1.setComponentData.bind(_this_1); // 当前方法由于需要遍历所有属性影响性能不建议使用，使用setState会更好，兼容旧代码
        _this_1.options.component.dom = {};
        typeof ((_b = (_a = _this_1.options) === null || _a === void 0 ? void 0 : _a.component) === null || _b === void 0 ? void 0 : _b.$init) === "function" && ((_d = (_c = _this_1.options) === null || _c === void 0 ? void 0 : _c.component) === null || _d === void 0 ? void 0 : _d.$init());
        if (typeof _this_1.options.component.$resize === "function") {
            _this_1.eventObj.subscribe({
                callback: _this_1.options.component.$resize,
                eventName: "resize",
                path: _this_1.options.path,
                vNodePath: _this_1.options.nodePath
            });
        }
        _this_1.eventObj.nodeRegister(options.nodePath, _this_1.options.path);
        return _this_1;
    }
    /**
     * 获取最后一个渲染的真实元素
     */
    ElmerRender.prototype.getLastDom = function () {
        if (this.newDom && this.newDom.children) {
            for (var i = this.newDom.children.length - 1; i >= 0; i--) {
                if (this.newDom.children[i].status !== "DELETE") {
                    return this.newDom.children[i].dom;
                }
            }
        }
    };
    /**
     * 获取第一个渲染到browser的元素
     */
    ElmerRender.prototype.getFirstDom = function () {
        if (this.newDom && this.newDom.children) {
            for (var i = 0; i < this.newDom.children.length; i--) {
                if (this.newDom.children[i].status !== "DELETE") {
                    return this.newDom.children[i].dom;
                }
            }
        }
    };
    ElmerRender.prototype.destroy = function () {
        var _this_1 = this;
        this.renderMiddleware.destroy({
            Component: this.options.componentFactory,
            componentObj: this.options.component,
            nodeData: this.options.component.vdom,
            props: this.options.component.props
        });
        if (this.newDom) {
            this.newDom.children.map(function (itemDom) {
                var _a;
                (_a = itemDom === null || itemDom === void 0 ? void 0 : itemDom.dom) === null || _a === void 0 ? void 0 : _a.parentElement.removeChild(itemDom.dom);
            });
        }
        if (this.renderComponents) {
            Object.keys(this.renderComponents).map(function (virtualId) {
                var vRender = _this_1.renderComponents[virtualId];
                vRender.destroy();
            });
        }
        this.unbindAllEvents(true);
        this.newDom = null;
        this.oldDom = null;
    };
    ElmerRender.prototype.render = function (option) {
        return __awaiter(this, void 0, void 0, function () {
            var _this_1 = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                    _this_1.renderMiddleware.beforeRender({
                        Component: _this_1.options.componentFactory,
                        componentObj: _this_1.options.component,
                        nodeData: _this_1.options.component.vdom,
                        props: _this_1.options.component.props
                    });
                    _this_1.renderQueue.startAction(_this_1.virtualId, option, _this_1.renderAction.bind(_this_1), function () {
                        if (option.firstRender) {
                            _this_1.renderMiddleware.didMount({
                                Component: _this_1.options.componentFactory,
                                componentObj: _this_1.options.component,
                                nodeData: _this_1.options.component.vdom,
                                props: _this_1.options.component.props
                            });
                            typeof _this_1.options.component.$didMount === "function" && _this_1.options.component.$didMount();
                        } else {
                            _this_1.renderMiddleware.afterRender({
                                Component: _this_1.options.componentFactory,
                                componentObj: _this_1.options.component,
                                nodeData: _this_1.options.component.vdom,
                                props: _this_1.options.component.props
                            });
                            typeof _this_1.options.component.$didUpdate === "function" && _this_1.options.component.$didUpdate();
                        }
                        resolve({});
                    }).catch(function (err) {
                        // tslint:disable-next-line: no-console
                        console.error(err.stack || err);
                        if (option.firstRender) {
                            _this_1.renderMiddleware.didMount({
                                Component: _this_1.options.componentFactory,
                                componentObj: _this_1.options.component,
                                nodeData: _this_1.options.component.vdom,
                                props: _this_1.options.component.props
                            });
                            typeof _this_1.options.component.$didMount === "function" && _this_1.options.component.$didMount();
                        } else {
                            _this_1.renderMiddleware.afterRender({
                                Component: _this_1.options.componentFactory,
                                componentObj: _this_1.options.component,
                                nodeData: _this_1.options.component.vdom,
                                props: _this_1.options.component.props
                            });
                            typeof _this_1.options.component.$didUpdate === "function" && _this_1.options.component.$didUpdate();
                        }
                        reject(err);
                    });
                })];
            });
        });
    };
    ElmerRender.prototype.getSourceCode = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this_1 = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                    var vdom;
                    if (typeof _this_1.options.component.$render === "function") {
                        vdom = _this_1.options.component.$render();
                    } else if (typeof _this_1.options.component["render"] === "function") {
                        vdom = _this_1.options.component["render"]();
                    } else {
                        vdom = _this_1.options.component["templateCode"];
                    }
                    if (_this_1.isString(vdom)) {
                        // vdom = this.htmlParse.parse(vdom);
                        _this_1.options.worker.callObjMethod("htmlParse", "parse", vdom).then(function (resp) {
                            resolve(resp.data);
                        }).catch(function (err) {
                            reject(err);
                        });
                    } else {
                        resolve(vdom);
                    }
                })];
            });
        });
    };
    ElmerRender.prototype.renderAction = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this_1 = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                    try {
                        typeof _this_1.options.component.$before === "function" && _typeof(_this_1.options.component.$before());
                        _this_1.getSourceCode().then(function (vdom) {
                            _this_1.oldDom = _this_1.newDom;
                            _this_1.sourceDom = vdom;
                            if (options.state) {
                                _this_1.extend(_this_1.options.component.state, options.state);
                            }
                            if (options.data) {
                                _this_1.extend(_this_1.options.component, options.data);
                            }
                            // 准备渲染虚拟dom，做数据绑定和diff运算
                            typeof _this_1.options.component.$beforeVirtualRender === "function" && _this_1.options.component.$beforeVirtualRender(_this_1.sourceDom);
                            var renderDom = _this_1.virtualRender.render(_this_1.sourceDom, _this_1.oldDom, _this_1.options.component, {
                                children: _this_1.options.children,
                                rootPath: _this_1.options.path,
                                sessionId: _this_1.virtualId
                            });
                            // this.virtualRender.unBind(this.virtualId, "onBeforeRender", renderEventId); // render 结束移除监听事件
                            typeof _this_1.options.component.$afterVirtualRender === "function" && _this_1.options.component.$afterVirtualRender(renderDom);
                            typeof _this_1.options.component.$beforeRender === "function" && _this_1.options.component.$beforeRender();
                            // 准备渲染数据
                            var renderParams = [];
                            var hasPathUpdate = false;
                            renderDom.children.map(function (dom, index) {
                                if (dom.status === "DELETE" || dom.status === "APPEND" || dom.status === "MOVE" || dom.status === "MOVEUPDATE") {
                                    hasPathUpdate = true;
                                }
                                renderParams.push({
                                    id: "virtualRender_" + index,
                                    params: {
                                        parent: _this_1.options.container,
                                        vdom: dom,
                                        vdomParent: renderDom
                                    }
                                });
                            });
                            if (!hasPathUpdate) {
                                hasPathUpdate = renderDom.deleteElements && renderDom.deleteElements.length > 0;
                            }
                            _this_1.unbindAllEvents(); // 清空上一次的注册的事件，重新添加
                            _this_1.deleteVDomOutOfLogic(renderDom.deleteElements); // 删除dom diff算法计算出需要手动删除的节点
                            (0, _elmerCommon.queueCallFunc)(renderParams, function (option, params) {
                                var prevDom = option.lastResult ? option.lastResult.prevDom : null;
                                if (option.id === "virtualRender_0") {
                                    prevDom = _this_1.options.prevDom;
                                }
                                return _this_1.renderVirtualDom({
                                    container: params.parent,
                                    hasPathUpdate: hasPathUpdate,
                                    prevDom: prevDom,
                                    vdom: params.vdom,
                                    vdomParent: params.vdomParent
                                });
                            }, {
                                throwException: true
                            }).then(function () {
                                resolve({});
                            }).catch(function (err) {
                                reject({
                                    message: err.message,
                                    stack: _this_1.isObject(err.exception) ? err.exception.stack : err.stack,
                                    statusCode: err.statusCode
                                });
                            });
                            _this_1.newDom = renderDom; // 渲染结束更新节点到对应的属性
                            _this_1.options.component.vdom = renderDom;
                        }).catch(function (err) {
                            reject(err);
                        });
                    } catch (e) {
                        // tslint:disable-next-line: no-console
                        console.error(e);
                        reject({
                            message: e.message,
                            statusCode: "T_500"
                        });
                    }
                })];
            });
        });
    };
    /**
     * 移除所有事件监听
     */
    ElmerRender.prototype.unbindAllEvents = function (deleteVNode) {
        this.eventObj.nodeUnRegister(this.options.nodePath, deleteVNode);
    };
    ElmerRender.prototype.setComponentState = function (state, force) {
        return __awaiter(this, void 0, void 0, function () {
            var _this_1 = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                    if (_this_1.isObject(state)) {
                        var component = _this_1.options.component;
                        var stateKeys = Object.keys(state);
                        var dataChanged = force;
                        if (component.state) {
                            for (var _i = 0, stateKeys_1 = stateKeys; _i < stateKeys_1.length; _i++) {
                                var sKey = stateKeys_1[_i];
                                if (_this_1.isObject(state[sKey]) && _this_1.isObject(component.state[sKey])) {
                                    if (!_this_1.isEqual(state[sKey], component.state[sKey])) {
                                        dataChanged = true;
                                        break;
                                    }
                                } else {
                                    if (state[sKey] !== component.state[sKey]) {
                                        dataChanged = true;
                                        break;
                                    }
                                }
                            }
                        } else {
                            dataChanged = true;
                        }
                        if (dataChanged) {
                            _this_1.render({
                                firstRender: false,
                                state: state
                            }).then(function () {
                                resolve({});
                            }).catch(function (err) {
                                typeof _this_1.options.component["$error"] === "function" && _this_1.options.component["$error"](err);
                                reject(err);
                            });
                        } else {
                            resolve({});
                        }
                    } else {
                        throw new Error("setState action get an wrong data,it\"s must be an object!");
                    }
                })];
            });
        });
    };
    /**
     * 对比当前组件所有属性, 当前方法不建议使用
     * @deprecated
     * @param data 对比数据
     * @param fn 重新渲染结束回调
     */
    ElmerRender.prototype.setComponentData = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var _this_1 = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                    // tslint:disable-next-line: no-console
                    console.warn("The SetData method is not recommended. Use setState instead。");
                    if (_this_1.isObject(data)) {
                        var component = _this_1.options.component;
                        var dataKeys = Object.keys(data);
                        var dataChanged = false;
                        for (var _i = 0, dataKeys_1 = dataKeys; _i < dataKeys_1.length; _i++) {
                            var sKey = dataKeys_1[_i];
                            if (_this_1.isObject(data[sKey]) && _this_1.isObject(component[sKey])) {
                                if (!_this_1.isEqual(data[sKey], component[sKey])) {
                                    dataChanged = true;
                                    break;
                                }
                            } else {
                                if (data[sKey] !== component[sKey]) {
                                    dataChanged = true;
                                    break;
                                }
                            }
                        }
                        if (dataChanged) {
                            _this_1.extend(_this_1.options.component, data);
                            _this_1.render({
                                data: data,
                                firstRender: false
                            }).then(function () {
                                resolve({});
                            }).catch(function (err) {
                                typeof _this_1.options.component["$error"] === "function" && _this_1.options.component["$error"](err);
                                reject(err);
                            });
                        } else {
                            resolve({});
                        }
                    } else {
                        throw new Error("setState action get an wrong data,it\"s must be an object!");
                    }
                })];
            });
        });
    };
    ElmerRender.prototype.renderVirtualDom = function (options) {
        var _this_1 = this;
        var container = options.container,
            vdom = options.vdom,
            vdomParent = options.vdomParent,
            prevDom = options.prevDom;
        return new Promise(function (resolve, reject) {
            try {
                var elmerData_1 = (0, _globalUtil.globalVar)();
                var components = elmerData_1.components || {};
                vdom.isDiff = false;
                if (_this_1.isEmpty(vdom.tagName)) {
                    reject({
                        message: "virtual dom node is not correct, missing tagName attribute",
                        statusCode: "VR_404"
                    });
                } else {
                    var UserComponent = _this_1.userComponents[vdom.tagName] || components[vdom.tagName];
                    if (typeof UserComponent === "function") {
                        _this_1.renderUserComponent({
                            UserComponent: UserComponent,
                            container: container,
                            hasPathUpdate: options.hasPathUpdate,
                            vdom: vdom,
                            vdomParent: vdomParent
                        }).then(function () {
                            resolve({
                                prevDom: _this_1.getPrevDomByVirtualNode(vdom)
                            });
                        }).catch(function (err) {
                            reject({
                                message: err.message,
                                stack: _this_1.isObject(err.exception) ? err.exception.stack : err.stack,
                                statusCode: err.statusCode
                            });
                        });
                    } else {
                        // 渲染浏览器标准元素
                        // vdom.status === "NORMAL"  不需要做任何操作
                        var hasPathChange_1 = vdom.deleteElements && vdom.deleteElements.length > 0;
                        if (vdom.status === "APPEND") {
                            // 新增元素
                            _this_1.vdomAppendRender(container, vdom, vdomParent, prevDom);
                            hasPathChange_1 = true;
                        } else if (vdom.status === "UPDATE") {
                            if (_this_1.isDOM(vdom.dom)) {
                                _this_1.renderDomAttrs.render(vdom.dom, vdom);
                            } else {
                                if (vdom.tagName === "text") {
                                    vdom.dom.textContent = vdom.innerHTML;
                                } else {
                                    // vdom.dom对象为undefined或null即为不存在对应的真实dom节点，需要新增
                                    !vdom.dom && _this_1.vdomAppendRender(container, vdom, vdomParent, prevDom);
                                }
                            }
                        } else if (vdom.status === "MOVE") {
                            _this_1.vdomMove(container, vdom, vdomParent);
                            hasPathChange_1 = true;
                        } else if (vdom.status === "MOVEUPDATE") {
                            _this_1.vdomMove(container, vdom, vdomParent);
                            hasPathChange_1 = true;
                            _this_1.renderDomAttrs.render(vdom.dom, vdom);
                        } else if (vdom.status === "NORMAL") {
                            if (!vdom.dom) {
                                _this_1.vdomAppendRender(container, vdom, vdomParent, prevDom);
                            }
                        } else if (vdom.status === "DELETE") {
                            hasPathChange_1 = true;
                        }
                        if (!hasPathChange_1) {
                            hasPathChange_1 = options.hasPathUpdate;
                        }
                        if (vdom.status !== "DELETE") {
                            vdom.dom.path = vdom.path;
                            vdom.dom.vNodePath = _this_1.options.nodePath;
                            if (!_this_1.isEmpty(vdom.props.id)) {
                                _this_1.options.component.dom[vdom.props.id] = vdom.dom;
                            }
                            _this_1.subscribeEventAction(vdom);
                            if (vdom.dataSet && vdom.dataSet.type === "html") {
                                vdom.dom.innerHTML = vdom.innerHTML;
                                resolve({
                                    prevDom: vdom.dom
                                });
                            } else {
                                if (vdom.children && vdom.children.length > 0) {
                                    // 当status为delete时删除父节点并移除事件监听就行，不需要在对子节点循环删除
                                    var renderParams_1 = [];
                                    vdom.children.map(function (childDom, index) {
                                        renderParams_1.push({
                                            id: "virtualRender_" + index,
                                            params: {
                                                parent: vdom.dom,
                                                vdom: childDom,
                                                vdomParent: vdom
                                            }
                                        });
                                    });
                                    (0, _elmerCommon.queueCallFunc)(renderParams_1, function (_a, params) {
                                        return _this_1.renderVirtualDom({
                                            container: params.parent,
                                            hasPathUpdate: hasPathChange_1,
                                            vdom: params.vdom,
                                            vdomParent: params.vdomParent
                                        });
                                    }, {
                                        throwException: true
                                    }).then(function () {
                                        resolve({
                                            hasPathUpdate: hasPathChange_1,
                                            prevDom: vdom.dom
                                        });
                                    }).catch(function (err) {
                                        reject({
                                            message: err.message,
                                            stack: _this_1.isObject(err.exception) ? err.exception.stack : err.stack,
                                            statusCode: err.statusCode
                                        });
                                    });
                                } else {
                                    resolve({
                                        hasPathUpdate: hasPathChange_1,
                                        prevDom: vdom.dom
                                    });
                                }
                            }
                        } else {
                            // 节点不是删除状态时，children是空， 当前循环到此结束
                            if (vdom.status === "DELETE") {
                                // 当节点被标记为删除时，移除dom元素，并销毁事件监听和虚拟dom对象
                                // todo release all user defined component
                                // 删除事件监听已经在渲染前做删除，不需要在此处做操作
                                if (vdom.dom) {
                                    vdom.dom.parentElement && vdom.dom.parentElement.removeChild(vdom.dom);
                                }
                                _this_1.deleteVirtualDom(vdom);
                            }
                            if (!_this_1.isEmpty(vdom.props.id)) {
                                delete _this_1.options.component.dom[vdom.props.id]; // 移除当前dom
                            }
                            resolve({
                                hasPathUpdate: hasPathChange_1,
                                prevDom: vdom.dom
                            });
                        }
                    }
                    // 删除不必要的元素，非异步过程不需要等待返回
                    _this_1.deleteVDomOutOfLogic(vdom.deleteElements);
                }
            } catch (e) {
                reject({
                    exception: e,
                    message: e.message,
                    statusCode: "RT_500"
                });
            }
        });
    };
    ElmerRender.prototype.renderUserComponent = function (options) {
        var _this_1 = this;
        var UserComponent = options.UserComponent,
            container = options.container,
            vdom = options.vdom,
            vdomParent = options.vdomParent;
        return new Promise(function (resolve, reject) {
            var prevDom = _this_1.getPrevDom(vdom, vdomParent);
            var middlewareObj = _this_1.renderMiddleware;
            var doUpdateAction = function doUpdateAction(vRender, vRDom, doUpdatePrevDom) {
                var props = {};
                vRender.options.prevDom = doUpdatePrevDom;
                _this_1.extend(props, vRender.options.component.props, true);
                _this_1.extend(props, vRDom.changeAttrs, true);
                middlewareObj.beforeUpdate({
                    Component: UserComponent,
                    componentObj: vRender.options.component,
                    nodeData: vdom,
                    props: props
                });
                // this.injectComponent.beforeUpdateComponent(vRender.options.component, UserComponent, props, vRDom);
                typeof vRender.options.component.$willReceiveProps === "function" && vRender.options.component.$willReceiveProps(props, vRender.options.component.props);
            };
            vdom.tagAttrs = {
                isComponent: true
            };
            if (vdom.status === "APPEND") {
                var flag = UserComponent.flag;
                var props = vdom.props;
                middlewareObj.beforeInit({
                    Component: UserComponent,
                    componentObj: null,
                    nodeData: vdom,
                    props: props
                });
                // this.injectComponent.beforeInitComponent(UserComponent, props, vdom);
                var virtualId = "component_" + _this_1.guid();
                var missionId_1 = _this_1.options.missionId;
                var component = void 0;
                if (flag === _Component.CONST_CLASS_COMPONENT_FLAG) {
                    // 类组件
                    component = new UserComponent(props);
                } else {
                    var hookStore_1 = {
                        getNode: {},
                        useCallback: {},
                        useComponent: {},
                        useEffect: {},
                        useState: {}
                    };
                    // 高阶组件，即是一个函数的静态组件
                    component = {
                        dom: {},
                        props: props,
                        selector: vdom.tagName,
                        // tslint:disable-next-line: object-literal-sort-keys
                        __factory: UserComponent,
                        // tslint:disable-next-line: object-literal-shorthand
                        render: function render() {
                            _hookUtils.wikiState[missionId_1] = {
                                _component: UserComponent,
                                _renderObj: vRender_1,
                                _this: this,
                                getNodeIndex: 0,
                                hookStore: hookStore_1,
                                useCallbackIndex: 0,
                                useComponentIndex: 0,
                                useEffectIndex: 0,
                                useStateIndex: 0
                            };
                            _hookUtils.wikiState["missionId"] = missionId_1;
                            return this["__factory"].call(this, vdom.props);
                        },
                        $willReceiveProps: function $willReceiveProps(newProps) {
                            this.props = newProps;
                            middlewareObj.willReceiveProps({
                                Component: UserComponent,
                                componentObj: this,
                                nodeData: vdom,
                                props: newProps
                            });
                        }
                    };
                }
                var vRender_1 = new ElmerRender({
                    children: vdom.children,
                    component: component,
                    componentFactory: UserComponent,
                    container: container,
                    event: _this_1.eventObj,
                    missionId: _this_1.options.missionId,
                    nodePath: _this_1.isEmpty(_this_1.options.nodePath) ? virtualId : _this_1.options.nodePath + "." + virtualId,
                    path: vdom.path,
                    prevDom: _this_1.getPrevDomByVirtualNode(prevDom),
                    renderOptions: _this_1.options.renderOptions,
                    worker: _this_1.options.worker
                });
                vdom.virtualID = virtualId;
                // this.injectComponent.initComponent(component, UserComponent, vdom);
                _this_1.renderComponents[virtualId] = vRender_1;
                middlewareObj.init({
                    Component: UserComponent,
                    componentObj: component,
                    nodeData: vdom,
                    props: props
                });
                if (!_this_1.isEmpty(props.id)) {
                    _this_1.options.component.dom[props.id] = component;
                }
                // ---- some thing is doing in init
                vRender_1.render({
                    firstRender: true
                }).then(function () {
                    resolve({});
                }).catch(function (err) {
                    reject(err);
                });
                if (!_this_1.isEmpty(vdom.props.id)) {
                    _this_1.options.component.dom[vdom.props.id] = component;
                }
            } else if (vdom.status === "UPDATE") {
                var vRender_2 = _this_1.renderComponents[vdom.virtualID];
                if (vRender_2) {
                    var rPrevDom_1 = prevDom ? prevDom.dom : null;
                    if (_this_1.checkVirtualNodeChange(vdom)) {
                        // 如果子节点有变化，先执行render方法往下执行渲染
                        // 由于触发willReciveProps方法未必会执行渲染动作，所以先执行子节点的渲染在触发willReciveProps事件
                        vRender_2.options.children = vdom.children;
                        vRender_2.render({
                            firstRender: false
                        }).finally(function () {
                            doUpdateAction(vRender_2, vdom, rPrevDom_1);
                            resolve({});
                        });
                    } else {
                        doUpdateAction(vRender_2, vdom, rPrevDom_1);
                        resolve({});
                    }
                    // 预留执行其他方法
                } else {
                    resolve({});
                }
            } else if (vdom.status === "MOVE") {
                _this_1.moveComponentPosition(container, vdom, vdomParent);
                var vRender_3 = _this_1.renderComponents[vdom.virtualID];
                if (_this_1.checkVirtualNodeChange(vdom)) {
                    var rPrevDom_2 = prevDom ? prevDom.dom : null;
                    // 如果子节点有变化，先执行render方法往下执行渲染
                    // 由于触发willReciveProps方法未必会执行渲染动作，所以先执行子节点的渲染在触发willReciveProps事件
                    vRender_3.options.children = vdom.children;
                    vRender_3.render({
                        firstRender: false
                    }).finally(function () {
                        doUpdateAction(vRender_3, vdom, rPrevDom_2);
                        resolve({});
                    });
                } else {
                    resolve({});
                }
            } else if (vdom.status === "MOVEUPDATE") {
                _this_1.moveComponentPosition(container, vdom, vdomParent);
                var vRender_4 = _this_1.renderComponents[vdom.virtualID];
                if (vRender_4) {
                    var rPrevDom_3 = prevDom ? prevDom.dom : null;
                    if (_this_1.checkVirtualNodeChange(vdom)) {
                        // 如果子节点有变化，先执行render方法往下执行渲染
                        // 由于触发willReciveProps方法未必会执行渲染动作，所以先执行子节点的渲染在触发willReciveProps事件
                        vRender_4.options.children = vdom.children;
                        vRender_4.render({
                            firstRender: false
                        }).finally(function () {
                            doUpdateAction(vRender_4, vdom, rPrevDom_3);
                            resolve({});
                        });
                    } else {
                        doUpdateAction(vRender_4, vdom, rPrevDom_3);
                        resolve({});
                    }
                } else {
                    resolve({});
                }
            } else if (vdom.status === "DELETE") {
                var vRender = _this_1.renderComponents[vdom.virtualID];
                vRender && vRender.destroy();
                delete _this_1.renderComponents[vdom.virtualID];
                if (!_this_1.isEmpty(vdom.props.id)) {
                    delete _this_1.options.component.dom[vdom.props.id];
                }
                resolve({});
            } else {
                if (_this_1.checkVirtualNodeChange(vdom)) {
                    var vRender = _this_1.renderComponents[vdom.virtualID];
                    vRender.options.children = vdom.children;
                    vRender.render({
                        firstRender: false
                    }).finally(function () {
                        resolve({});
                    });
                } else {
                    resolve({});
                }
            }
        });
    };
    ElmerRender.prototype.checkVirtualNodeChange = function (vdom) {
        if (vdom.status !== "NORMAL") {
            return true;
        } else {
            if (vdom.children && vdom.children.length > 0) {
                for (var _i = 0, _a = vdom.children; _i < _a.length; _i++) {
                    var item = _a[_i];
                    if (this.checkVirtualNodeChange(item)) {
                        return true;
                    }
                }
            }
        }
    };
    /**
     * 新节点位置变化，需要做移动操作
     * @param container
     * @param vdom
     * @param vdomParent
     */
    ElmerRender.prototype.vdomMove = function (container, vdom, vdomParent) {
        var index = vdom.path[vdom.path.length - 1];
        var prevIndex = index - 1;
        var prevDom = vdomParent.children[prevIndex];
        if (prevDom) {
            var domNext = prevDom.dom.nextElementSibling;
            if (domNext) {
                container.insertBefore(vdom.dom, domNext);
            } else {
                container.appendChild(vdom.dom);
            }
        } else {
            // 未找到上一个节点，则任务当前节点为第一个节点
            if (container.children.length > 0) {
                container.insertBefore(vdom.dom, container.children[0]);
            } else {
                container.appendChild(vdom.dom);
            }
        }
        vdom.dom.path = vdom.path;
    };
    ElmerRender.prototype.createDomByVdom = function (vdom) {
        if (vdom.tagName === "text") {
            return document.createTextNode(vdom.innerHTML);
        } else if (vdom.tagName === "<!--") {
            return document.createComment(vdom.innerHTML);
        } else {
            return document.createElement(vdom.tagName);
        }
    };
    ElmerRender.prototype.vdomAppendRender = function (container, vdom, vdomParent, prevSlideDom) {
        var _a;
        var prevDom = this.getPrevDom(vdom, vdomParent);
        var newDom = this.createDomByVdom(vdom);
        newDom.virtualId = this.virtualId; // 给所有需要做事件绑定元素绑定当前层级上虚拟节点id，用于区分不同的节点
        if (prevDom) {
            // 查找到前一个节点，需要插入到前一个节点后面，紧跟着上一个节点，防止节点位置错误
            var prevDomElement = prevDom.dom;
            if (((_a = prevDom === null || prevDom === void 0 ? void 0 : prevDom.tagAttrs) === null || _a === void 0 ? void 0 : _a.isComponent) || !this.isEmpty(vdom.virtualID)) {
                // 当前组件为自定义组件，需要到virtualComponent查询相近的元素
                // 防止拿到错误的元素
                var vRender = this.renderComponents[prevDom.virtualID];
                prevDomElement = vRender.getLastDom();
            }
            if (prevDomElement) {
                var domNext = prevDomElement.nextElementSibling;
                if (domNext) {
                    container.insertBefore(newDom, domNext);
                } else {
                    container.appendChild(newDom);
                }
            } else {
                // 上一个节点的真实节点不存在时，插入到最前面
                // 一般这种情况是不会出现的，出现这种情况证明渲染逻辑已经出现问题
                if (container.children.length > 0) {
                    container.insertBefore(newDom, container.children[0]);
                } else {
                    container.appendChild(newDom);
                }
            }
        } else {
            if (!prevSlideDom) {
                // 针对第一层节点的渲染
                // 查找不到上一个节点，说明当前节点需要插入到第一个位置
                if (container.children.length > 0) {
                    container.insertBefore(newDom, container.children[0]);
                } else {
                    container.appendChild(newDom);
                }
            } else {
                // 针对第一层节点的渲染, 第一层会渲染拿从上一节点传进来的参考元素
                var nextSlideDom = prevSlideDom.nextElementSibling;
                if (nextSlideDom) {
                    container.insertBefore(newDom, nextSlideDom);
                } else {
                    container.appendChild(newDom);
                }
            }
        }
        if (["text", "<!--"].indexOf(vdom.tagName) < 0) {
            // 文本节点不需要做事件绑定和属性渲染
            this.renderDomAttrs.render(newDom, vdom);
        }
        vdom.dom = newDom;
    };
    /**
     * 绑定事件监听
     * @param dom 真实dom节点
     * @param vdom 虚拟dom节点数据
     */
    ElmerRender.prototype.subscribeEventAction = function (vdom) {
        var _this_1 = this;
        var allEvents = vdom.events || {};
        var eventKeys = Object.keys(vdom.events);
        if (vdom.events && eventKeys.length > 0) {
            Object.keys(vdom.events).map(function (eventName) {
                var eventCallback = vdom.events[eventName];
                if (typeof eventCallback === "function") {
                    // 找到存在的回调函数再做事件监听绑定
                    (function (evtDom, evtName, _callback, componenent) {
                        var eventId = _this_1.eventObj.subscribe({
                            callback: function callback(event) {
                                var newEvent = __assign(__assign({}, event), { cancelBubble: false, data: evtDom.data, dataSet: evtDom.dataSet });
                                var eventResult = _callback.call(componenent, newEvent);
                                event.cancelBubble = newEvent.cancelBubble;
                                return eventResult;
                            },
                            eventName: evtName,
                            path: evtDom.path,
                            vNodePath: _this_1.options.nodePath
                        });
                    })(vdom, eventName, eventCallback, _this_1.options.component);
                }
            });
        }
    };
    ElmerRender.prototype.getPrevDom = function (vdom, vdomParent) {
        var index = vdom.path[vdom.path.length - 1];
        var prevIndex = index - 1;
        var prevDom = vdomParent.children[prevIndex];
        if (prevDom) {
            if (prevDom.status !== "DELETE") {
                return prevDom;
            } else {
                return this.getPrevDom(prevDom, vdomParent);
            }
        }
    };
    ElmerRender.prototype.getNextDom = function (vdom, vdomParent) {
        var index = vdom.path[vdom.path.length - 1];
        var nextIndex = index + 1;
        var nextDom = vdomParent.children[nextIndex];
        if (nextDom) {
            if (nextDom.status !== "DELETE") {
                return nextDom;
            } else {
                return this.getNextDom(nextDom, vdomParent);
            }
        }
    };
    /**
     * 遇到需要删除的节点时，释放所有子节点数据
     * @param vdom
     */
    ElmerRender.prototype.deleteVirtualDom = function (vdom) {
        var _this_1 = this;
        var _a;
        if ((_a = vdom === null || vdom === void 0 ? void 0 : vdom.tagAttrs) === null || _a === void 0 ? void 0 : _a.isComponent) {
            if (this.renderComponents[vdom.virtualID]) {
                this.renderComponents[vdom.virtualID].destroy();
                delete this.renderComponents[vdom.virtualID];
            }
        }
        vdom.status === "DELETE";
        vdom.dom = null;
        vdom.events = null;
        vdom.props = {};
        if (vdom.children && vdom.children.length > 0) {
            vdom.children.map(function (vdomChild) {
                _this_1.deleteVirtualDom(vdomChild);
            });
        }
    };
    /**
     * 删除通过diff运算检测出在旧dom树存在节点，但是在新dom树没有出现节点的元素
     * 这种元素在新dom树无法标记，所以需要手动删除
     * @param deleteVdoms
     */
    ElmerRender.prototype.deleteVDomOutOfLogic = function (deleteVdoms) {
        var _a;
        if (deleteVdoms && deleteVdoms.length > 0) {
            for (var _i = 0, deleteVdoms_1 = deleteVdoms; _i < deleteVdoms_1.length; _i++) {
                var delDom = deleteVdoms_1[_i];
                if (!this.isEmpty(delDom.props.id)) {
                    delete this.options.component.props[delDom.props.id];
                }
                if ((_a = delDom === null || delDom === void 0 ? void 0 : delDom.tagAttrs) === null || _a === void 0 ? void 0 : _a.isComponent) {
                    var dRender = this.renderComponents[delDom.virtualID];
                    dRender && dRender.destroy();
                    delete this.renderComponents[delDom.virtualID];
                } else {
                    if (delDom.dom) {
                        delDom.dom.parentElement && delDom.dom.parentElement.removeChild(delDom.dom);
                        // 每次渲染前都会将事件监听清除，重新挂载新的事件监听, 不需要每次都做判断
                        // 此操作对渲染功能影响是否需要在做处理，留到后续版本做更新
                        // todo: Release event listener
                    }
                }
            }
        }
    };
    /**
     * 自定义组件位置发生变化，需要根据实际dom树移动，不需要删除在重新创建
     * @param vdom 当前虚拟dom节点
     * @param vdomParent 当前虚拟dom节点的父节点
     */
    ElmerRender.prototype.moveComponentPosition = function (container, vdom, vdomParent) {
        var _a, _b;
        // 位置发生变化时，只有往后查找渲染的节点，因为只有通过insertBefore这个方法才可以移动节点
        // 如果是往前查找，找到前一个节点时需要找下一个节点才能调用insertBefore这时候会陷入死循环
        var vRender = this.renderComponents[vdom.virtualID];
        var nextDom = this.getNextDom(vdom, vdomParent);
        var nextSlideDom = nextDom.dom;
        if (((_a = nextDom === null || nextDom === void 0 ? void 0 : nextDom.tagAttrs) === null || _a === void 0 ? void 0 : _a.isComponent) || !this.isEmpty(nextDom.virtualID)) {
            nextSlideDom = (_b = this.renderComponents[nextDom.virtualID]) === null || _b === void 0 ? void 0 : _b.getFirstDom();
        }
        if (nextSlideDom) {
            var moveMaxIndex = vRender.newDom.children.length;
            var moveIndex = moveMaxIndex - 1;
            // 由于移动使用insertBefore方法，所以nextSlideDom是当前component的下一个元素
            // 所以应该是从最后的元素开始移动
            while (moveIndex >= 0) {
                var moveDom = vRender.newDom.children[moveIndex];
                if (moveDom.status !== "DELETE") {
                    container.insertBefore(moveDom.dom, nextSlideDom);
                    nextSlideDom = moveDom.dom; // 下一个元素应该是当前元素
                }
                moveIndex -= 1;
            }
        } else {
            // 通过diff运算检测出当前元素需要移动，但是处于当前同级dom列表中的最后一个，往后追加即可
            vRender.newDom.children.map(function (moveItem) {
                if (moveItem.status !== "DELETE") {
                    // status为DELETE状态的虚拟dom是没有真实dom节点可以操作的
                    container.appendChild(moveItem.dom);
                }
            });
        }
    };
    ElmerRender.prototype.getPrevDomByVirtualNode = function (vdom) {
        if (vdom) {
            if (!this.isEmpty(vdom.virtualID)) {
                var vRender = this.renderComponents[vdom.virtualID];
                if (vRender) {
                    return vRender.getLastDom();
                }
            } else {
                return vdom.dom;
            }
        }
    };
    __decorate([(0, _inject.autowired)(_elmerVirtualDom.VirtualRender, "VirtualRender"), __metadata("design:type", _elmerVirtualDom.VirtualRender)], ElmerRender.prototype, "virtualRender", void 0);
    __decorate([(0, _inject.autowired)(_elmerVirtualDom.VirtualNode), __metadata("design:type", _elmerVirtualDom.VirtualNode)], ElmerRender.prototype, "virtualElement", void 0);
    __decorate([(0, _inject.autowired)(_RenderQueue.RenderQueue), __metadata("design:type", _RenderQueue.RenderQueue)], ElmerRender.prototype, "renderQueue", void 0);
    __decorate([(0, _inject.autowired)(_ElmerRenderAttrs.ElmerRenderAttrs), __metadata("design:type", _ElmerRenderAttrs.ElmerRenderAttrs)], ElmerRender.prototype, "renderDomAttrs", void 0);
    __decorate([(0, _inject.autowired)(_RenderMiddleware.RenderMiddleware), __metadata("design:type", _RenderMiddleware.RenderMiddleware)], ElmerRender.prototype, "renderMiddleware", void 0);
    return ElmerRender;
}(_elmerCommon.Common);
exports.ElmerRender = ElmerRender;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ElmerRenderAttrs = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _elmerCommon = __webpack_require__(0);

var _injectable = __webpack_require__(1);

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ElmerRenderAttrs = /** @class */function () {
    function ElmerRenderAttrs() {}
    /**
     * 渲染dom属性值
     * @param dom 真实dom节点
     * @param vdom 虚拟dom节点
     */
    ElmerRenderAttrs.prototype.render = function (dom, vdom) {
        if (vdom.tagName === "text") {
            dom.textContent = vdom.innerHTML;
        } else {
            var updateProps_1 = vdom.status === "APPEND" ? vdom.props : vdom.changeAttrs;
            var isLink_1 = /^(a)$/i.test(dom.tagName);
            if (updateProps_1) {
                Object.keys(updateProps_1).map(function (attrKey) {
                    var attrValue = updateProps_1[attrKey];
                    if (/^checked$/i.test(attrKey)) {
                        dom.setAttribute(attrKey, attrValue ? "checked" : null);
                        dom.checked = attrValue;
                    } else if (/^show$/i.test(attrKey)) {
                        dom.style.display = attrValue ? "block" : "none";
                    } else if (/^iShow$/.test(attrKey)) {
                        dom.style.display = attrValue ? "inline-block" : "none";
                    } else if (/^href$/i.test(attrKey)) {
                        if (isLink_1) {
                            if (/^\s*javascript\s*\:/i.test(attrValue)) {
                                throw new Error("Script is not allowed in the hyperlink's attribute");
                            } else {
                                dom.setAttribute(attrKey, attrValue);
                            }
                        }
                    } else {
                        dom.setAttribute(attrKey, attrValue);
                    }
                });
            }
            if (isLink_1) {
                if (_elmerCommon.StaticCommon.isEmpty(vdom.props.href)) {
                    dom.setAttribute("href", "javascript:void(0);");
                }
            }
            if (vdom.deleteAttrs) {
                for (var _i = 0, _a = vdom.deleteAttrs; _i < _a.length; _i++) {
                    var attrKey = _a[_i];
                    dom.removeAttribute(attrKey);
                }
            }
        }
    };
    ElmerRenderAttrs = __decorate([(0, _injectable.injectable)("ElmerRenderAttrs")], ElmerRenderAttrs);
    return ElmerRenderAttrs;
}();
exports.ElmerRenderAttrs = ElmerRenderAttrs;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RenderQueue = undefined;

var _elmerCommon = __webpack_require__(0);

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

/**
 * 队列执行渲染任务
 * 1、当前模块主要功能将一次渲染当做一个任务推送到队列中去执行
 * 2、在第一次渲染还未执行结束时触发第二次或更多次渲染任务，在第一次渲染结束以后，立即执行第二次渲染，此时会将新增的任务数据合并一次执行
 */
var RenderQueue = /** @class */function (_super) {
    __extends(RenderQueue, _super);
    function RenderQueue() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.queueList = {};
        return _this;
    }
    RenderQueue.prototype.startAction = function (sessionId, options, renderCallback, finishCallback) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var actionId = "queueRenderAction_" + _this.guid();
            if (!_this.queueList[sessionId]) {
                _this.queueList[sessionId] = {
                    actionList: [],
                    actionRuning: false,
                    actionRuningIndexs: [],
                    lastActionIndex: -1,
                    render: renderCallback
                };
            }
            _this.queueList[sessionId].onFinish = finishCallback;
            _this.queueList[sessionId].actionList.push({
                actionId: actionId,
                isRended: false,
                options: options,
                reject: reject,
                resolve: resolve
            });
            _this.runActions(sessionId);
        });
    };
    RenderQueue.prototype.runActions = function (sessionId) {
        var _this = this;
        var renderSession = this.queueList[sessionId];
        if (!renderSession.actionRuning) {
            // 没有正在执行任务，开始检测状态并进入执行阶段
            // 当有任务正在执行时跳过触发阶段
            var actionLength = renderSession.actionList.length;
            if (actionLength > 0) {
                // has task waiting
                var updateState = {};
                var updateData = {};
                for (var i = actionLength - 1; i > renderSession.lastActionIndex; i--) {
                    if (!renderSession.actionList[i].isRended) {
                        // 合并队列中的数据，统一执行一次
                        // 添加当前队列索引到执行状态的列表中，下一次执行任务忽略执行过的队列
                        var curAction = renderSession.actionList[i];
                        this.extend(updateState, curAction.options.state);
                        this.extend(updateData, curAction.options.data);
                        renderSession.actionRuningIndexs.push(i);
                        renderSession.actionList[i].isRended = true;
                    }
                }
                renderSession.lastActionIndex = actionLength - 1;
                renderSession.actionRuning = true;
                renderSession.render({
                    data: updateData,
                    state: updateState
                }).then(function () {
                    // 将当前执行的数据都
                    _this.checkSessionStatus(sessionId, false);
                }).catch(function (err) {
                    _this.checkSessionStatus(sessionId, true, err);
                });
            }
        }
    };
    RenderQueue.prototype.checkSessionStatus = function (sessionId, error, exception) {
        var renderSession = this.queueList[sessionId];
        if (renderSession && renderSession.actionList) {
            // 当任务队列长度等于已经执行过的索引长度一致时可认为任务已经执行完成
            var finished = renderSession.actionList.length === renderSession.actionRuningIndexs.length;
            if (finished) {
                // 任务结束以后执行回调
                renderSession.actionRuning = false;
                for (var _i = 0, _a = renderSession.actionList; _i < _a.length; _i++) {
                    var action = _a[_i];
                    if (error) {
                        action.reject(exception);
                    } else {
                        action.resolve({});
                    }
                }
                // 通知最后一次触发任务时的回调，某些场景不需要每次渲染任务结束都需要执行操作
                typeof renderSession.onFinish === "function" && renderSession.onFinish();
            } else {
                // 任务未执行完成，继续下一次任务
                renderSession.actionRuning = false;
                this.runActions(sessionId);
            }
        }
    };
    RenderQueue.className = "RenderQueue";
    return RenderQueue;
}(_elmerCommon.Common);
exports.RenderQueue = RenderQueue;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _Component = __webpack_require__(5);

var _declareComponent = __webpack_require__(14);

var _ElmerDom = __webpack_require__(19);

var _hooks = __webpack_require__(4);

var _injectable = __webpack_require__(1);

var _propsValidation = __webpack_require__(27);

var _Button = __webpack_require__(81);

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var TestApp = function TestApp(props, options) {
    var setState1 = (0, _hooks.useState)("test1", '001100');
    var setState2 = (0, _hooks.useState)("test2", false);
    props.time = props.time + "__APP__";
    return "<div><select><option>Hello world_{{state.test1}}</option></select><a href=''>Hello XXS{{state.test2}}</a></div>";
};
var DemoApp = /** @class */function (_super) {
    __extends(DemoApp, _super);
    function DemoApp() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            time: "",
            index: 0,
            app: "App",
            listData: [],
            showList: true
        };
        return _this;
    }
    DemoApp.prototype.$init = function () {
        for (var i = 0; i < 5; i++) {
            this.state.listData.push({
                title: "App_" + i,
                value: i
            });
        }
    };
    DemoApp.prototype.onClick = function () {
        this.props.actionRegion({
            type: "ChangeRegion",
            data: new Date().getTime().toString() + "_by_redux",
            index: this.state.index + 1
        });
        console.log("onEventChange");
    };
    DemoApp.prototype.$resize = function (evt) {
        console.log(evt.width, evt.height, evt.outWidth, evt.outHeight);
    };
    DemoApp.prototype.$willReceiveProps = function (props) {
        if (props.demoApp !== this.state.time) {
            this.setState({
                time: props.demoApp
            });
        }
    };
    DemoApp.prototype.onCloseAnimation = function () {
        var ulDom = this.dom['test'];
        if (this.state.showList) {
            this.$.slideOut(ulDom);
            this.setState({
                showList: false
            });
        } else {
            this.$.slideIn(ulDom);
            this.setState({
                showList: true
            });
        }
    };
    DemoApp.prototype.$render = function () {
        return "<div><button et:click=\"onClick\">OnClickEvent</button><span>my class<b>format {{state.time}}</b> staff, stateIndex: {{state.index}}</span>\n        <div><context/></div>\n        <button et:click='onCloseAnimation'>{{state.showList ? '\u6D88\u5931\u52A8\u753B' : '\u663E\u793A\u52A8\u753B'}}</button>\n        <ul  id='test' style=\"overflow:hidden;\">\n        <li em:for=\"let item in this.state.listData\"><span>{{item.title}}</span></li>\n        </ul>\n        </div>\n        <TestApp time=\"{{state.app}}\"/><Button title=\"{{state.showList ? '\u6D88\u5931\u52A8\u753B' : '\u663E\u793A\u52A8\u753B'}}\" id=\"diffDebugger\" />";
    };
    DemoApp.propType = {
        title: {
            rule: _propsValidation.PropTypes.string
        },
        actionRegion: {
            rule: _propsValidation.PropTypes.object.isRequired
        }
    };
    __decorate([(0, _injectable.autowired)(_ElmerDom.ElmerDOM), __metadata("design:type", _ElmerDom.ElmerDOM)], DemoApp.prototype, "$", void 0);
    DemoApp = __decorate([(0, _declareComponent.declareComponent)({
        selector: "demo-app",
        components: {
            TestApp: TestApp,
            Button: _Button2.default
        },
        connect: {
            mapStateToProps: function mapStateToProps(state, obj) {
                return { demoApp: obj.getValue(state, "demo.demoApp") || "init App" };
            },
            mapDispatchToProps: function mapDispatchToProps(dispatch) {
                return {
                    actionRegion: function actionRegion(data) {
                        return dispatch(data);
                    }
                };
            },
            reducers: [{
                name: "demo",
                callback: function callback(state, action) {
                    switch (action.type) {
                        case "DEMO":
                            return {
                                version: "test"
                            };
                        case "ChangeRegion":
                            {
                                console.log("update from redux");
                                return __assign(__assign({}, state), { demoApp: action.data });
                            }
                        default:
                            return {
                                demoApp: true,
                                demoTitle: "redux demo"
                            };
                    }
                }
            }]
        }
    })], DemoApp);
    return DemoApp;
}(_Component.Component);
exports.default = DemoApp;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.useEffect = undefined;

var _hookUtils = __webpack_require__(2);

var useEffect = exports.useEffect = function useEffect(callback) {
    var componentObj = (0, _hookUtils.getWikiState)("_this");
    var hookStore = (0, _hookUtils.getWikiState)("hookStore");
    var hookIndex = (0, _hookUtils.getWikiState)("useEffectIndex");
    if (!hookStore) {
        throw new Error("[useEffect] Something went wrong!!!");
    }
    if (!hookStore.useEffect[hookIndex]) {
        if (typeof callback !== "function") {
            throw new Error("[useEffect] the argument of callback is not a function.");
        }
        hookStore.useEffect[hookIndex] = {
            callback: callback,
            destoryCallback: null
        };
        if (typeof componentObj.$unMount !== "function") {
            componentObj.$unMount = function () {
                // tslint:disable-next-line: forin
                for (var fKey in hookStore.useEffect) {
                    try {
                        var fn = hookStore.useEffect[fKey];
                        typeof fn === "function" && fn();
                    } catch (e) {
                        // tslint:disable-next-line: no-console
                        console.error(e);
                    }
                }
            };
        }
        componentObj["$useEffect"] = callback;
    }
    (0, _hookUtils.setWikiState)("useEffectIndex", hookIndex + 1);
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.useState = undefined;

var _hookUtils = __webpack_require__(2);

var useState = exports.useState = function useState(stateKey, initState) {
    var componentObj = (0, _hookUtils.getWikiState)("_this");
    var hookStore = (0, _hookUtils.getWikiState)("hookStore");
    var useStateIndex = (0, _hookUtils.getWikiState)("useStateIndex");
    if (!hookStore) {
        throw new Error("[useState] Something went wrong!!!");
    }
    if (!hookStore.useState[useStateIndex]) {
        var updateStateHook = function (obj, store, stateIndex, stateName) {
            return function (newState) {
                var useStateObj = store.useState[stateIndex];
                if (JSON.stringify(useStateObj.state) !== JSON.stringify(newState)) {
                    var updateState = {};
                    updateState[stateName] = newState;
                    store.useState[stateIndex].state = newState;
                    obj.setState(updateState);
                }
            };
        }(componentObj, hookStore, useStateIndex, stateKey);
        var getState = function (store, index) {
            return function () {
                var useStateObj = store.useState[index];
                return useStateObj.state;
            };
        }(hookStore, useStateIndex);
        hookStore.useState[useStateIndex] = {
            state: initState,
            stateKey: stateKey,
            // tslint:disable-next-line: object-literal-sort-keys
            callback: updateStateHook,
            getState: getState
        };
        if (!componentObj.state) {
            componentObj.state = {};
        }
        componentObj.state[stateKey] = initState;
        (0, _hookUtils.setWikiState)("useStateIndex", useStateIndex + 1);
        return [initState, updateStateHook, getState];
    } else {
        (0, _hookUtils.setWikiState)("useStateIndex", useStateIndex + 1);
        return [hookStore.useState[useStateIndex].state, hookStore.useState[useStateIndex].callback, hookStore.useState[useStateIndex].getState];
    }
};

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.useCallback = undefined;

var _elmerCommon = __webpack_require__(0);

var _hookUtils = __webpack_require__(2);

var useCallback = exports.useCallback = function useCallback(callback, options) {
    var componentObj = (0, _hookUtils.getWikiState)("_this");
    var hookStore = (0, _hookUtils.getWikiState)("hookStore");
    var hookIndex = (0, _hookUtils.getWikiState)("useCallbackIndex");
    if (!hookStore) {
        throw new Error("[useState] Something went wrong!!!");
    }
    if (!hookStore.useCallback[hookIndex]) {
        var callbackHook = function (obj, store, stateIndex, attrName, myCallback) {
            // tslint:disable-next-line: only-arrow-functions
            var newCallback = function newCallback() {
                var hookStoreObj = store.useCallback[stateIndex];
                var args = hookStoreObj.arguments || [];
                var newArgs = arguments;
                if (args && args.length > 0) {
                    var hasChange = false;
                    if (newArgs.length !== args.length) {
                        hasChange = true;
                    } else {
                        // tslint:disable-next-line: forin
                        for (var key in args) {
                            var arg = args[key];
                            if (!_elmerCommon.StaticCommon.isEqual(arg, newArgs[key])) {
                                hasChange = true;
                                break;
                            }
                        }
                    }
                    if (hasChange) {
                        var myResult = myCallback.apply(null, newArgs);
                        store.useCallback[stateIndex].value = myResult;
                        store.useCallback[stateIndex].arguments = newArgs;
                        return myResult;
                    } else {
                        return hookStoreObj.value;
                    }
                } else {
                    var myResult = myCallback.apply(null, newArgs);
                    store.useCallback[stateIndex].value = myResult;
                    return myResult;
                }
            };
            if (!_elmerCommon.StaticCommon.isEmpty(attrName)) {
                obj[attrName] = newCallback;
            }
            return newCallback;
        }(componentObj, hookStore, hookIndex, options === null || options === void 0 ? void 0 : options.name, callback);
        hookStore.useCallback[hookIndex] = {
            arguments: options === null || options === void 0 ? void 0 : options.arguments,
            callback: callbackHook,
            value: options === null || options === void 0 ? void 0 : options.initValue
        };
        (0, _hookUtils.setWikiState)("useCallbackIndex", hookIndex + 1);
        return [options === null || options === void 0 ? void 0 : options.initValue, callbackHook];
    } else {
        (0, _hookUtils.setWikiState)("useCallbackIndex", hookIndex + 1);
        return [hookStore.useCallback[hookIndex].value, hookStore.useCallback[hookIndex].callback];
    }
};

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.useComponent = undefined;

var _elmerCommon = __webpack_require__(0);

var _hookUtils = __webpack_require__(2);

var useComponent = exports.useComponent = function useComponent(selector, Component) {
    var renderObj = (0, _hookUtils.getWikiState)("_renderObj");
    var hookStore = (0, _hookUtils.getWikiState)("hookStore");
    var hookIndex = (0, _hookUtils.getWikiState)("useComponentIndex");
    var componentObj = (0, _hookUtils.getWikiState)("_this");
    if (!hookStore) {
        throw new Error("[useState] Something went wrong!!!");
    }
    if (_elmerCommon.StaticCommon.isEmpty(selector)) {
        throw new Error("[useComponent] selector can not be an empty string");
    }
    if (!hookStore.useComponent[hookIndex]) {
        var useComponentCallback = function (vRenderObj, obj) {
            return function (NewComponent) {
                vRenderObj.userComponents[selector] = NewComponent;
            };
        }(renderObj, componentObj);
        if (!renderObj.userComponents[selector]) {
            renderObj.userComponents[selector] = Component;
        }
        hookStore.useComponent[hookIndex] = useComponentCallback;
        (0, _hookUtils.setWikiState)("useComponentIndex", hookIndex + 1);
        return useComponentCallback;
    } else {
        (0, _hookUtils.setWikiState)("useComponentIndex", hookIndex + 1);
        return hookStore.useComponent[hookIndex];
    }
};

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getNode = undefined;

var _hookUtils = __webpack_require__(2);

/**
 * 获取节点对象
 * @param id 节点ID
 */
var getNode = exports.getNode = function getNode(id) {
    var componentObj = (0, _hookUtils.getWikiState)("_this");
    var hookStore = (0, _hookUtils.getWikiState)("hookStore");
    var hookIndex = (0, _hookUtils.getWikiState)("getNodeIndex");
    if (!hookStore) {
        throw new Error("[useState] Something went wrong!!!");
    }
    if (!hookStore.getNode[hookIndex]) {
        var newGetNode = function (obj, nodeId) {
            return function () {
                return obj.dom[nodeId];
            };
        }(componentObj, id);
        hookStore.getNode[hookIndex] = newGetNode;
        (0, _hookUtils.setWikiState)("getNodeIndex", hookIndex + 1);
        return newGetNode();
    } else {
        (0, _hookUtils.setWikiState)("getNodeIndex", hookIndex + 1);
        return hookStore.getNode[hookIndex]();
    }
};

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createParamChecker = undefined;

var _typeChecker = __webpack_require__(28);

var _dataTypeValidators = __webpack_require__(29);

function onError(msg, fn, params) {
    if (fn && typeof fn === "function") {
        fn(msg, params);
    } else {
        // tslint:disable-next-line:no-console
        console.error(msg, params);
    }
}
function createParamTypeChecker(checkerType, types) {
    function factory(value, options) {
        var cType = factory.type;
        var exOptions = options ? options : {
            error: null
        };
        var validate = null;
        switch (cType) {
            case _typeChecker.EnumCheckerTypes.oneOf:
                {
                    validate = _dataTypeValidators.oneOfValidator;
                    break;
                }
            case _typeChecker.EnumCheckerTypes.oneValueOf:
                {
                    validate = _dataTypeValidators.oneValueOfValidator;
                    break;
                }
            case _typeChecker.EnumCheckerTypes.oneEnumValueOf:
                {
                    validate = _dataTypeValidators.oneEnumValueOfValidator;
                    break;
                }
        }
        exOptions.silence = true;
        if (typeof validate === "function") {
            if (!validate(value, factory.checkers, exOptions) && value !== undefined && value !== null) {
                var lType = Object.prototype.toString.call(value);
                var checkTypes_1 = [];
                types.map(function (tmpChecker) {
                    checkTypes_1.push(tmpChecker.type);
                });
                var checkTypesStr = checkTypes_1.join(",");
                onError("\u53C2\u6570\u7C7B\u578B\u4E0D\u5339\u914D,\u5B9A\u4E49\u7C7B\u578B[" + cType + "(" + checkTypesStr + ")]\uFF0C\u4F20\u5165\u503C\u7C7B\u578B" + lType + "\u3002", options ? options.error : null, types);
                return false;
            }
        } else {
            onError(cType + "未定义validate方法。", options ? options.error : null, types);
            return false;
        }
        return true;
    }
    // tslint:disable-next-line:only-arrow-functions
    factory.isRequired = function (value, options) {
        if (value === undefined || value === null || typeof value === "string" && value.length <= 0) {
            var errMsg = "属性值不能为undefined或null";
            options && typeof options.error === "function" && options.error(errMsg);
            return false;
        } else {
            return factory(value, options);
        }
    };
    factory.isRequired.type = checkerType;
    function factoryParamTypeChecker(myCheckerType, checkers) {
        if (!checkers || checkers.length <= 0) {
            throw new Error("设置错误，至少设置一个数据类型检查规则。");
        } else {
            factory.checkers = checkers;
            factory.type = myCheckerType;
            return factory;
        }
    }
    return factoryParamTypeChecker(checkerType, types);
}
var createParamChecker = exports.createParamChecker = createParamTypeChecker;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReduxApp = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _Component = __webpack_require__(5);

var _declareComponent = __webpack_require__(14);

var _Loadable = __webpack_require__(82);

var _hooks = __webpack_require__(4);

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var AsyncApp = (0, _Loadable.Loadable)({
    loader: function loader() {
        return __webpack_require__.e(/* import() | AsyncApp */ 1).then(__webpack_require__.t.bind(null, 30, 7));
    }
});
var AsyncRouter = (0, _Loadable.Loadable)({
    loader: function loader() {
        return __webpack_require__.e(/* import() | AsyncRouter */ 2).then(__webpack_require__.t.bind(null, 31, 7));
    },
    loading: function loading() {
        return '<h2>Hellow world</h2>';
    }
});
var ReduxApp = /** @class */function (_super) {
    __extends(ReduxApp, _super);
    function ReduxApp(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            testApp: props.testApp
        };
        return _this;
    }
    ReduxApp.prototype.$willReceiveProps = function (props) {
        console.log("update---", props.testApp);
        this.setState({
            testApp: props.testApp
        });
    };
    ReduxApp.prototype.onClick = function () {
        this.props.updateTestApp({
            type: "TestApp",
            // tslint:disable-next-line: object-literal-sort-keys
            data: "New State - " + new Date().getTime()
        });
    };
    ReduxApp.prototype.render = function () {
        return "<div>\n            <span>__Test data is from redux__: {{props.testApp}}</span>\n            <button et:click=\"onClick\">Update Redux</button>\n            <AsyncApp />\n        </div>";
    };
    ReduxApp = __decorate([(0, _declareComponent.declareComponent)({
        selector: "ReduxApp",
        components: {
            AsyncApp: AsyncApp,
            AsyncRouter: AsyncRouter
        },
        connect: {
            mapStateToProps: function mapStateToProps(state) {
                return __assign({}, state.app);
            },
            // tslint:disable-next-line: object-literal-sort-keys
            mapDispatchToProps: function mapDispatchToProps(dispatch) {
                return {
                    updateTestApp: function updateTestApp(data) {
                        return dispatch(data);
                    }
                };
            },
            reducers: [{
                name: "app",
                // tslint:disable-next-line: object-literal-sort-keys
                callback: function callback(state, action) {
                    switch (action.type) {
                        case "TestApp":
                            {
                                return __assign(__assign({}, state), { testApp: action.data });
                            }
                        default:
                            {
                                return {
                                    testApp: "Init App"
                                };
                            }
                    }
                }
            }]
        }
    }), __metadata("design:paramtypes", [Object])], ReduxApp);
    return ReduxApp;
}(_Component.Component);
exports.ReduxApp = ReduxApp;

exports.default = function (props) {
    var _a = (0, _hooks.useState)("score", 1122),
        _b = _a[0],
        setScore = _a[1],
        getScore = _a[2];
    var _c = (0, _hooks.useState)("visible", false),
        _d = _c[0],
        setVisible = _c[1];
    var _e = (0, _hooks.useState)('title', props.title),
        _f = _e[0],
        setTitle = _e[1];
    (0, _hooks.useCallback)(function () {
        setScore(getScore() + 1);
        setVisible(true);
    }, {
        name: "onClick"
    });
    (0, _hooks.useEffect)(function (name, _a) {
        var props = _a.props;
        setTitle(props.title);
        return function () {
            console.log('useEffect unMount', 'haha');
        };
    });
    return "<div>\n        <label>\n            <button et:click='onClick'>\n                <span>Hook TestButton{{state.score}}__{{state.title}}</span>\n                <i show=\"{{state.visible}}\">Visible_Test{{props.title}}</i>\n            </button>\n        </label>\n        <hr/>\n        <eui-redux-app />\n    <div>";
};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Loadable = undefined;

var _elmerCommon = __webpack_require__(0);

var _hooks = __webpack_require__(4);

var defaultLoading = function defaultLoading() {
    return "<div style=\"display: inline-block;width: 48px;height: 48px;text-align: center; padding: 20px;\" data-type=\"html\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"48px\" height=\"60px\" viewBox=\"0 0 24 30\" style=\"enable-background:new 0 0 50 50\" xml:space=\"preserve\">\n    <rect x=\"0\" y=\"9.22656\" width=\"4\" height=\"12.5469\" fill=\"#FF6700\">\n        <animate attributeName=\"height\" attributeType=\"XML\" values=\"5;21;5\" begin=\"0s\" dur=\"0.6s\" repeatCount=\"indefinite\"></animate>\n        <animate attributeName=\"y\" attributeType=\"XML\" values=\"13; 5; 13\" begin=\"0s\" dur=\"0.6s\" repeatCount=\"indefinite\"></animate>\n    </rect>\n    <rect x=\"10\" y=\"5.22656\" width=\"4\" height=\"20.5469\" fill=\"#FF6700\">\n        <animate attributeName=\"height\" attributeType=\"XML\" values=\"5;21;5\" begin=\"0.15s\" dur=\"0.6s\" repeatCount=\"indefinite\"></animate>\n        <animate attributeName=\"y\" attributeType=\"XML\" values=\"13; 5; 13\" begin=\"0.15s\" dur=\"0.6s\" repeatCount=\"indefinite\"></animate>\n    </rect>\n    <rect x=\"20\" y=\"8.77344\" width=\"4\" height=\"13.4531\" fill=\"#FF6700\">\n        <animate attributeName=\"height\" attributeType=\"XML\" values=\"5;21;5\" begin=\"0.3s\" dur=\"0.6s\" repeatCount=\"indefinite\"></animate>\n        <animate attributeName=\"y\" attributeType=\"XML\" values=\"13; 5; 13\" begin=\"0.3s\" dur=\"0.6s\" repeatCount=\"indefinite\"></animate>\n    </rect>\n</svg></div>";
};
var defaultError = function defaultError(_a) {
    var message = _a.message,
        statusCode = _a.statusCode,
        showCode = _a.showCode;
    var _b = (0, _hooks.useState)("statusInfo", {
        message: message,
        showCode: showCode,
        statusCode: statusCode
    }),
        _c = _b[0],
        setStatusInfo = _b[1];
    (0, _hooks.useEffect)(function (name, _a) {
        var props = _a.props;
        if (name === "willReceiveProps") {
            setStatusInfo({
                message: props.message,
                showCode: props.showCode,
                statusCode: props.statusCode
            });
        }
    });
    return "<label><span>{{state.statusInfo.message}}</span><i>{{state.statusInfo.statusCode}}</i></label>";
};
var Loadable = exports.Loadable = function Loadable(options) {
    return function () {
        var _a = (0, _hooks.useState)("loaded", false),
            _b = _a[0],
            setLoaded = _a[1];
        var appId = (0, _hooks.useState)("asyncAppId", "__AsyncAppId__" + _elmerCommon.StaticCommon.guid())[0];
        var _c = (0, _hooks.useState)("loadStatus", {
            message: "Ok",
            showError: false,
            statusCode: "200"
        }),
            _d = _c[0],
            setStatus = _c[1];
        var useNewComponent = (0, _hooks.useComponent)("AsyncComponent", options.loading || defaultLoading);
        (0, _hooks.useComponent)("ErrorInfo", options.error || defaultError);
        (0, _hooks.useComponent)("Loading", options.loading || defaultLoading);
        (0, _hooks.useState)("className", options.className);
        (0, _hooks.useEffect)(function (name) {
            if (name === "didMount") {
                if (typeof options.loader === "function") {
                    options.loader().then(function (resp) {
                        if (resp["__esModule"] && typeof resp.default === "function") {
                            var AsyncComponet = resp.default;
                            useNewComponent(AsyncComponet);
                            setStatus({
                                showError: false
                            });
                        } else {
                            setStatus({
                                message: "AsyncComponent module not an function or constructor.",
                                showError: true
                            });
                        }
                        setLoaded(true);
                        // const timeH = setTimeout(() => {
                        //     setLoaded(true);
                        //     clearTimeout(timeH);
                        // }, 2000);
                    }).catch(function (err) {
                        // tslint:disable-next-line: no-console
                        console.error(err);
                        setStatus({
                            message: "Load asyncComponent fail: " + err.message,
                            showError: true
                        });
                        setLoaded(true);
                    });
                }
            }
        });
        return "<div>\n            <AsyncComponent if=\"{{state.loaded eq true && state.loadStatus.showError eq false}}\" id=\"{{state.asyncAppId}}\" status=\"{{state.loaded}}\"/>\n            <Loading if=\"{{state.loaded eq false}}\"/>\n            <ErrorInfo if=\"{{state.loadStatus.showError}}\" message=\"{{state.loadStatus.message}}{{state.loaded}}\" statusCode=\"{{state.loadStatus.statusCode}}\"/>\n        </div>";
    };
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReduxProvider = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _elmerRedux = __webpack_require__(25);

var _Component = __webpack_require__(5);

var _declareComponent = __webpack_require__(14);

var _globalUtil = __webpack_require__(3);

var _inject = __webpack_require__(7);

var _propsValidation = __webpack_require__(27);

var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

// transfer getGlobalState and defineGlobalState to reduxController,
(0, _elmerRedux.defineStateOperateAction)((0, _inject.autoInit)(_elmerRedux.ReduxController), _globalUtil.getGlobalState, _globalUtil.defineGlobalState);
var ReduxProvider = /** @class */function (_super) {
    __extends(ReduxProvider, _super);
    function ReduxProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.reduxController.reducers = props.reducers;
        _this.reduxController.autoSave = props.autoSave;
        switch (props.saveStore) {
            case "SessionStorage":
                _this.reduxController.saveStore = sessionStorage;
                break;
            case "LocalStorage":
                _this.reduxController.saveStore = localStorage;
                break;
            case "StoragePlugin":
                if (typeof props.defineStorage === "function") {
                    _this.reduxController.saveStore = new props.defineStorage();
                } else {
                    throw new Error("The defineStroage attribute can not be null or undefined.");
                }
                break;
            default:
                _this.reduxController.saveStore = sessionStorage;
        }
        // tslint:disable-next-line: no-console
        console.log("Init Redux Provider");
        return _this;
    }
    ReduxProvider.prototype.$init = function () {
        (0, _elmerRedux.defineReduxProvider)(_globalUtil.getGlobalState, _globalUtil.defineGlobalState);
        (0, _elmerRedux.attachReducerToController)(this.reduxController);
        this.initDefaultState();
    };
    ReduxProvider.prototype.initDefaultState = function () {
        var myReducer = this.props.reducers || {};
        // restore the redux state from dataStorage if autoSave equal true;
        if (this.reduxController.autoSave) {
            var stateDataStr = this.reduxController.saveStore.getItem(this.reduxController.saveDataKey);
            if (!this.isEmpty(stateDataStr)) {
                this.reduxController.stateData = JSON.parse(stateDataStr);
                stateDataStr = null;
            }
        }
        this.initState(myReducer, this.reduxController.stateData, null);
        myReducer = null;
        this.reduxController.reducers = null; // 在初始化时已经做扁平化处理，保存的节点不需要;
        delete this.reduxController.reducers;
    };
    ReduxProvider.prototype.render = function () {
        return "<context />";
    };
    ReduxProvider.prototype.initState = function (reducer, stateData, nodeKey) {
        var _this = this;
        if (this.isFunction(reducer)) {
            var initState = reducer(undefined, {
                type: "INIT_REDUCER_STATE"
            });
            var nodeKeyValue_1 = nodeKey.replace(/^\./, "");
            delete this.reduxController.reducersData[nodeKeyValue_1];
            Object.defineProperty(this.reduxController.reducersData, nodeKeyValue_1, {
                configurable: true,
                enumerable: true,
                get: function get() {
                    return reducer;
                },
                set: function set() {
                    // tslint:disable-next-line:no-console
                    console.error("\u4E0D\u5141\u8BB8\u76F4\u63A5\u4FEE\u6539Redux\u6570\u636E\u3002[" + nodeKeyValue_1 + "]", nodeKey);
                }
            });
            if (undefined === initState || null === initState) {
                // tslint:disable-next-line: no-console
                console.error("No init state return from reducer: " + nodeKeyValue_1);
            } else {
                this.defineStateValue(initState);
                return initState;
            }
        } else {
            Object.keys(reducer).map(function (tmpKey) {
                if (!stateData[tmpKey]) {
                    stateData[tmpKey] = {};
                }
                var myData = _this.initState(reducer[tmpKey], stateData[tmpKey], !_this.isEmpty(nodeKey) ? [nodeKey, tmpKey].join(".") : tmpKey);
                if (myData) {
                    _this.defineReadOnlyProperty(stateData, tmpKey, myData);
                }
            });
        }
    };
    ReduxProvider.prototype.defineStateValue = function (stateValue) {
        var _this = this;
        if (this.isObject(stateValue)) {
            Object.keys(stateValue).map(function (stateKey) {
                (function (propsKey, propsValue) {
                    if (_this.isObject(propsValue)) {
                        _this.defineStateValue(propsValue);
                    }
                    Object.defineProperty(stateValue, propsKey, {
                        configurable: true,
                        enumerable: true,
                        get: function get() {
                            return propsValue;
                        },
                        set: function set() {
                            // tslint:disable-next-line:no-console
                            console.error("\u4E0D\u5141\u8BB8\u76F4\u63A5\u4FEE\u6539Redux\u6570\u636E\u3002" + stateKey, stateValue);
                        }
                    });
                })(stateKey, stateValue[stateKey]);
            });
        }
    };
    ReduxProvider.propType = {
        autoSave: {
            description: "自动保存到sessionStorage",
            rule: _propsValidation.PropTypes.bool
        },
        defineStorage: {
            description: "define storage factory",
            rule: _propsValidation.PropTypes.func
        },
        reducers: {
            defaultValue: {},
            description: "Redux监听方法集合",
            rule: _propsValidation.PropTypes.object.isRequired
        },
        saveStore: {
            defaultValue: "SessionStorage",
            description: "Redux保存方式",
            rule: _propsValidation.PropTypes.oneValueOf(["SessionStorage", "LocalStorage", "StoragePlugin"]).isRequired
        }
    };
    __decorate([(0, _inject.autowired)(_elmerRedux.ReduxController), __metadata("design:type", _elmerRedux.ReduxController)], ReduxProvider.prototype, "reduxController", void 0);
    ReduxProvider = __decorate([(0, _declareComponent.declareComponent)({
        selector: "ReduxProvider"
    }), __metadata("design:paramtypes", [Object])], ReduxProvider);
    return ReduxProvider;
}(_Component.Component);
exports.ReduxProvider = ReduxProvider;

/***/ })
/******/ ]);
//# sourceMappingURL=main.min.js.map